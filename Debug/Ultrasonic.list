
Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a988  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800aa48  0800aa48  0001aa48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af18  0800af18  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800af18  0800af18  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af18  0800af18  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800af20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d4  0800b0f4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800b0f4  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c84  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000277b  00000000  00000000  00030ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00033640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7d  00000000  00000000  00034630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d231  00000000  00000000  000352ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152f4  00000000  00000000  000524de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abaae  00000000  00000000  000677d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004df8  00000000  00000000  00113280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00118078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800aa2c 	.word	0x0800aa2c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800aa2c 	.word	0x0800aa2c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f981 	bl	8001740 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8d1 	bl	80015f0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f973 	bl	8001740 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f969 	bl	8001740 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f8f9 	bl	8001674 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f8ef 	bl	8001674 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_d2uiz>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2200      	movs	r2, #0
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <__aeabi_d2uiz+0x38>)
 80004aa:	0004      	movs	r4, r0
 80004ac:	000d      	movs	r5, r1
 80004ae:	f7ff ffef 	bl	8000490 <__aeabi_dcmpge>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d104      	bne.n	80004c0 <__aeabi_d2uiz+0x1c>
 80004b6:	0020      	movs	r0, r4
 80004b8:	0029      	movs	r1, r5
 80004ba:	f002 f807 	bl	80024cc <__aeabi_d2iz>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <__aeabi_d2uiz+0x38>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0020      	movs	r0, r4
 80004c6:	0029      	movs	r1, r5
 80004c8:	f001 fc60 	bl	8001d8c <__aeabi_dsub>
 80004cc:	f001 fffe 	bl	80024cc <__aeabi_d2iz>
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	061b      	lsls	r3, r3, #24
 80004d4:	469c      	mov	ip, r3
 80004d6:	4460      	add	r0, ip
 80004d8:	e7f1      	b.n	80004be <__aeabi_d2uiz+0x1a>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	41e00000 	.word	0x41e00000

080004e0 <__aeabi_d2lz>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	0005      	movs	r5, r0
 80004e4:	000c      	movs	r4, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0028      	movs	r0, r5
 80004ec:	0021      	movs	r1, r4
 80004ee:	f7ff ffb1 	bl	8000454 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x28>
 80004f6:	0028      	movs	r0, r5
 80004f8:	0021      	movs	r1, r4
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e1      	adds	r1, r4, r3
 800050e:	0028      	movs	r0, r5
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x22>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f001 f96f 	bl	8001808 <__aeabi_dmul>
 800052a:	f7ff ffbb 	bl	80004a4 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f002 f832 	bl	8002598 <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f001 f966 	bl	8001808 <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fc22 	bl	8001d8c <__aeabi_dsub>
 8000548:	f7ff ffac 	bl	80004a4 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f001 ffeb 	bl	8002538 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <__aeabi_l2d+0x28>)
 8000566:	f001 f94f 	bl	8001808 <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f002 f812 	bl	8002598 <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 f9ec 	bl	8000954 <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_fadd>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	4647      	mov	r7, r8
 8000588:	46ce      	mov	lr, r9
 800058a:	024a      	lsls	r2, r1, #9
 800058c:	0243      	lsls	r3, r0, #9
 800058e:	0045      	lsls	r5, r0, #1
 8000590:	0fc4      	lsrs	r4, r0, #31
 8000592:	0a50      	lsrs	r0, r2, #9
 8000594:	4680      	mov	r8, r0
 8000596:	0048      	lsls	r0, r1, #1
 8000598:	0a5b      	lsrs	r3, r3, #9
 800059a:	0e00      	lsrs	r0, r0, #24
 800059c:	0992      	lsrs	r2, r2, #6
 800059e:	4694      	mov	ip, r2
 80005a0:	b580      	push	{r7, lr}
 80005a2:	001e      	movs	r6, r3
 80005a4:	4681      	mov	r9, r0
 80005a6:	0002      	movs	r2, r0
 80005a8:	0e2d      	lsrs	r5, r5, #24
 80005aa:	00df      	lsls	r7, r3, #3
 80005ac:	0fc9      	lsrs	r1, r1, #31
 80005ae:	428c      	cmp	r4, r1
 80005b0:	d024      	beq.n	80005fc <__aeabi_fadd+0x78>
 80005b2:	1a28      	subs	r0, r5, r0
 80005b4:	2800      	cmp	r0, #0
 80005b6:	dd0e      	ble.n	80005d6 <__aeabi_fadd+0x52>
 80005b8:	2a00      	cmp	r2, #0
 80005ba:	d13e      	bne.n	800063a <__aeabi_fadd+0xb6>
 80005bc:	4662      	mov	r2, ip
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x40>
 80005c2:	e0fd      	b.n	80007c0 <__aeabi_fadd+0x23c>
 80005c4:	1e42      	subs	r2, r0, #1
 80005c6:	2801      	cmp	r0, #1
 80005c8:	d100      	bne.n	80005cc <__aeabi_fadd+0x48>
 80005ca:	e137      	b.n	800083c <__aeabi_fadd+0x2b8>
 80005cc:	28ff      	cmp	r0, #255	; 0xff
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0x4e>
 80005d0:	e0a9      	b.n	8000726 <__aeabi_fadd+0x1a2>
 80005d2:	0010      	movs	r0, r2
 80005d4:	e039      	b.n	800064a <__aeabi_fadd+0xc6>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d063      	beq.n	80006a2 <__aeabi_fadd+0x11e>
 80005da:	464b      	mov	r3, r9
 80005dc:	1b52      	subs	r2, r2, r5
 80005de:	2d00      	cmp	r5, #0
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x60>
 80005e2:	e0e0      	b.n	80007a6 <__aeabi_fadd+0x222>
 80005e4:	2f00      	cmp	r7, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x66>
 80005e8:	e0ce      	b.n	8000788 <__aeabi_fadd+0x204>
 80005ea:	1e53      	subs	r3, r2, #1
 80005ec:	2a01      	cmp	r2, #1
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x6e>
 80005f0:	e155      	b.n	800089e <__aeabi_fadd+0x31a>
 80005f2:	2aff      	cmp	r2, #255	; 0xff
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0x74>
 80005f6:	e094      	b.n	8000722 <__aeabi_fadd+0x19e>
 80005f8:	001a      	movs	r2, r3
 80005fa:	e0d9      	b.n	80007b0 <__aeabi_fadd+0x22c>
 80005fc:	1a2a      	subs	r2, r5, r0
 80005fe:	2a00      	cmp	r2, #0
 8000600:	dc00      	bgt.n	8000604 <__aeabi_fadd+0x80>
 8000602:	e099      	b.n	8000738 <__aeabi_fadd+0x1b4>
 8000604:	2800      	cmp	r0, #0
 8000606:	d062      	beq.n	80006ce <__aeabi_fadd+0x14a>
 8000608:	2dff      	cmp	r5, #255	; 0xff
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x8a>
 800060c:	e08b      	b.n	8000726 <__aeabi_fadd+0x1a2>
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	4661      	mov	r1, ip
 8000612:	04db      	lsls	r3, r3, #19
 8000614:	4319      	orrs	r1, r3
 8000616:	468c      	mov	ip, r1
 8000618:	2a1b      	cmp	r2, #27
 800061a:	dc00      	bgt.n	800061e <__aeabi_fadd+0x9a>
 800061c:	e0d2      	b.n	80007c4 <__aeabi_fadd+0x240>
 800061e:	2301      	movs	r3, #1
 8000620:	19db      	adds	r3, r3, r7
 8000622:	015a      	lsls	r2, r3, #5
 8000624:	d56a      	bpl.n	80006fc <__aeabi_fadd+0x178>
 8000626:	3501      	adds	r5, #1
 8000628:	2dff      	cmp	r5, #255	; 0xff
 800062a:	d05b      	beq.n	80006e4 <__aeabi_fadd+0x160>
 800062c:	2201      	movs	r2, #1
 800062e:	49a3      	ldr	r1, [pc, #652]	; (80008bc <__aeabi_fadd+0x338>)
 8000630:	401a      	ands	r2, r3
 8000632:	085b      	lsrs	r3, r3, #1
 8000634:	400b      	ands	r3, r1
 8000636:	4313      	orrs	r3, r2
 8000638:	e01c      	b.n	8000674 <__aeabi_fadd+0xf0>
 800063a:	2dff      	cmp	r5, #255	; 0xff
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0xbc>
 800063e:	e072      	b.n	8000726 <__aeabi_fadd+0x1a2>
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	4662      	mov	r2, ip
 8000644:	04db      	lsls	r3, r3, #19
 8000646:	431a      	orrs	r2, r3
 8000648:	4694      	mov	ip, r2
 800064a:	281b      	cmp	r0, #27
 800064c:	dc00      	bgt.n	8000650 <__aeabi_fadd+0xcc>
 800064e:	e090      	b.n	8000772 <__aeabi_fadd+0x1ee>
 8000650:	2301      	movs	r3, #1
 8000652:	1afb      	subs	r3, r7, r3
 8000654:	015a      	lsls	r2, r3, #5
 8000656:	d551      	bpl.n	80006fc <__aeabi_fadd+0x178>
 8000658:	019b      	lsls	r3, r3, #6
 800065a:	099e      	lsrs	r6, r3, #6
 800065c:	0030      	movs	r0, r6
 800065e:	f002 f88f 	bl	8002780 <__clzsi2>
 8000662:	0033      	movs	r3, r6
 8000664:	3805      	subs	r0, #5
 8000666:	4083      	lsls	r3, r0
 8000668:	4285      	cmp	r5, r0
 800066a:	dc00      	bgt.n	800066e <__aeabi_fadd+0xea>
 800066c:	e075      	b.n	800075a <__aeabi_fadd+0x1d6>
 800066e:	4a94      	ldr	r2, [pc, #592]	; (80008c0 <__aeabi_fadd+0x33c>)
 8000670:	1a2d      	subs	r5, r5, r0
 8000672:	4013      	ands	r3, r2
 8000674:	075a      	lsls	r2, r3, #29
 8000676:	d004      	beq.n	8000682 <__aeabi_fadd+0xfe>
 8000678:	220f      	movs	r2, #15
 800067a:	401a      	ands	r2, r3
 800067c:	2a04      	cmp	r2, #4
 800067e:	d000      	beq.n	8000682 <__aeabi_fadd+0xfe>
 8000680:	3304      	adds	r3, #4
 8000682:	015a      	lsls	r2, r3, #5
 8000684:	d53c      	bpl.n	8000700 <__aeabi_fadd+0x17c>
 8000686:	1c68      	adds	r0, r5, #1
 8000688:	2dfe      	cmp	r5, #254	; 0xfe
 800068a:	d02b      	beq.n	80006e4 <__aeabi_fadd+0x160>
 800068c:	019b      	lsls	r3, r3, #6
 800068e:	0a5e      	lsrs	r6, r3, #9
 8000690:	b2c0      	uxtb	r0, r0
 8000692:	05c0      	lsls	r0, r0, #23
 8000694:	4330      	orrs	r0, r6
 8000696:	07e4      	lsls	r4, r4, #31
 8000698:	4320      	orrs	r0, r4
 800069a:	bcc0      	pop	{r6, r7}
 800069c:	46b9      	mov	r9, r7
 800069e:	46b0      	mov	r8, r6
 80006a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006a2:	20fe      	movs	r0, #254	; 0xfe
 80006a4:	1c6a      	adds	r2, r5, #1
 80006a6:	4210      	tst	r0, r2
 80006a8:	d172      	bne.n	8000790 <__aeabi_fadd+0x20c>
 80006aa:	2d00      	cmp	r5, #0
 80006ac:	d000      	beq.n	80006b0 <__aeabi_fadd+0x12c>
 80006ae:	e0ae      	b.n	800080e <__aeabi_fadd+0x28a>
 80006b0:	2f00      	cmp	r7, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x132>
 80006b4:	e0ec      	b.n	8000890 <__aeabi_fadd+0x30c>
 80006b6:	4663      	mov	r3, ip
 80006b8:	2000      	movs	r0, #0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0e9      	beq.n	8000692 <__aeabi_fadd+0x10e>
 80006be:	1afb      	subs	r3, r7, r3
 80006c0:	015a      	lsls	r2, r3, #5
 80006c2:	d400      	bmi.n	80006c6 <__aeabi_fadd+0x142>
 80006c4:	e0f3      	b.n	80008ae <__aeabi_fadd+0x32a>
 80006c6:	4663      	mov	r3, ip
 80006c8:	000c      	movs	r4, r1
 80006ca:	1bdb      	subs	r3, r3, r7
 80006cc:	e7d2      	b.n	8000674 <__aeabi_fadd+0xf0>
 80006ce:	4661      	mov	r1, ip
 80006d0:	2900      	cmp	r1, #0
 80006d2:	d05b      	beq.n	800078c <__aeabi_fadd+0x208>
 80006d4:	1e51      	subs	r1, r2, #1
 80006d6:	2a01      	cmp	r2, #1
 80006d8:	d100      	bne.n	80006dc <__aeabi_fadd+0x158>
 80006da:	e0a7      	b.n	800082c <__aeabi_fadd+0x2a8>
 80006dc:	2aff      	cmp	r2, #255	; 0xff
 80006de:	d022      	beq.n	8000726 <__aeabi_fadd+0x1a2>
 80006e0:	000a      	movs	r2, r1
 80006e2:	e799      	b.n	8000618 <__aeabi_fadd+0x94>
 80006e4:	20ff      	movs	r0, #255	; 0xff
 80006e6:	2600      	movs	r6, #0
 80006e8:	e7d3      	b.n	8000692 <__aeabi_fadd+0x10e>
 80006ea:	21fe      	movs	r1, #254	; 0xfe
 80006ec:	1c6a      	adds	r2, r5, #1
 80006ee:	4211      	tst	r1, r2
 80006f0:	d073      	beq.n	80007da <__aeabi_fadd+0x256>
 80006f2:	2aff      	cmp	r2, #255	; 0xff
 80006f4:	d0f6      	beq.n	80006e4 <__aeabi_fadd+0x160>
 80006f6:	0015      	movs	r5, r2
 80006f8:	4467      	add	r7, ip
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	075a      	lsls	r2, r3, #29
 80006fe:	d1bb      	bne.n	8000678 <__aeabi_fadd+0xf4>
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	2dff      	cmp	r5, #255	; 0xff
 8000704:	d00f      	beq.n	8000726 <__aeabi_fadd+0x1a2>
 8000706:	025b      	lsls	r3, r3, #9
 8000708:	0a5e      	lsrs	r6, r3, #9
 800070a:	b2e8      	uxtb	r0, r5
 800070c:	e7c1      	b.n	8000692 <__aeabi_fadd+0x10e>
 800070e:	4662      	mov	r2, ip
 8000710:	2a00      	cmp	r2, #0
 8000712:	d008      	beq.n	8000726 <__aeabi_fadd+0x1a2>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	03d2      	lsls	r2, r2, #15
 8000718:	4213      	tst	r3, r2
 800071a:	d004      	beq.n	8000726 <__aeabi_fadd+0x1a2>
 800071c:	4640      	mov	r0, r8
 800071e:	4210      	tst	r0, r2
 8000720:	d101      	bne.n	8000726 <__aeabi_fadd+0x1a2>
 8000722:	000c      	movs	r4, r1
 8000724:	4643      	mov	r3, r8
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0dc      	beq.n	80006e4 <__aeabi_fadd+0x160>
 800072a:	2680      	movs	r6, #128	; 0x80
 800072c:	03f6      	lsls	r6, r6, #15
 800072e:	431e      	orrs	r6, r3
 8000730:	0276      	lsls	r6, r6, #9
 8000732:	20ff      	movs	r0, #255	; 0xff
 8000734:	0a76      	lsrs	r6, r6, #9
 8000736:	e7ac      	b.n	8000692 <__aeabi_fadd+0x10e>
 8000738:	2a00      	cmp	r2, #0
 800073a:	d0d6      	beq.n	80006ea <__aeabi_fadd+0x166>
 800073c:	1b42      	subs	r2, r0, r5
 800073e:	2d00      	cmp	r5, #0
 8000740:	d05c      	beq.n	80007fc <__aeabi_fadd+0x278>
 8000742:	28ff      	cmp	r0, #255	; 0xff
 8000744:	d0ee      	beq.n	8000724 <__aeabi_fadd+0x1a0>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	04db      	lsls	r3, r3, #19
 800074a:	431f      	orrs	r7, r3
 800074c:	2a1b      	cmp	r2, #27
 800074e:	dc00      	bgt.n	8000752 <__aeabi_fadd+0x1ce>
 8000750:	e082      	b.n	8000858 <__aeabi_fadd+0x2d4>
 8000752:	2301      	movs	r3, #1
 8000754:	464d      	mov	r5, r9
 8000756:	4463      	add	r3, ip
 8000758:	e763      	b.n	8000622 <__aeabi_fadd+0x9e>
 800075a:	2220      	movs	r2, #32
 800075c:	1b40      	subs	r0, r0, r5
 800075e:	3001      	adds	r0, #1
 8000760:	1a12      	subs	r2, r2, r0
 8000762:	0019      	movs	r1, r3
 8000764:	4093      	lsls	r3, r2
 8000766:	40c1      	lsrs	r1, r0
 8000768:	1e5a      	subs	r2, r3, #1
 800076a:	4193      	sbcs	r3, r2
 800076c:	2500      	movs	r5, #0
 800076e:	430b      	orrs	r3, r1
 8000770:	e780      	b.n	8000674 <__aeabi_fadd+0xf0>
 8000772:	2320      	movs	r3, #32
 8000774:	4661      	mov	r1, ip
 8000776:	1a1b      	subs	r3, r3, r0
 8000778:	4099      	lsls	r1, r3
 800077a:	4662      	mov	r2, ip
 800077c:	000b      	movs	r3, r1
 800077e:	40c2      	lsrs	r2, r0
 8000780:	1e59      	subs	r1, r3, #1
 8000782:	418b      	sbcs	r3, r1
 8000784:	4313      	orrs	r3, r2
 8000786:	e764      	b.n	8000652 <__aeabi_fadd+0xce>
 8000788:	000c      	movs	r4, r1
 800078a:	4643      	mov	r3, r8
 800078c:	0015      	movs	r5, r2
 800078e:	e7b8      	b.n	8000702 <__aeabi_fadd+0x17e>
 8000790:	4663      	mov	r3, ip
 8000792:	1afe      	subs	r6, r7, r3
 8000794:	0173      	lsls	r3, r6, #5
 8000796:	d445      	bmi.n	8000824 <__aeabi_fadd+0x2a0>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d000      	beq.n	800079e <__aeabi_fadd+0x21a>
 800079c:	e75e      	b.n	800065c <__aeabi_fadd+0xd8>
 800079e:	2400      	movs	r4, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	2600      	movs	r6, #0
 80007a4:	e775      	b.n	8000692 <__aeabi_fadd+0x10e>
 80007a6:	2bff      	cmp	r3, #255	; 0xff
 80007a8:	d0bb      	beq.n	8000722 <__aeabi_fadd+0x19e>
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	04db      	lsls	r3, r3, #19
 80007ae:	431f      	orrs	r7, r3
 80007b0:	2a1b      	cmp	r2, #27
 80007b2:	dd47      	ble.n	8000844 <__aeabi_fadd+0x2c0>
 80007b4:	2301      	movs	r3, #1
 80007b6:	4662      	mov	r2, ip
 80007b8:	000c      	movs	r4, r1
 80007ba:	464d      	mov	r5, r9
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	e749      	b.n	8000654 <__aeabi_fadd+0xd0>
 80007c0:	0005      	movs	r5, r0
 80007c2:	e79e      	b.n	8000702 <__aeabi_fadd+0x17e>
 80007c4:	4661      	mov	r1, ip
 80007c6:	2320      	movs	r3, #32
 80007c8:	40d1      	lsrs	r1, r2
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	4662      	mov	r2, ip
 80007ce:	409a      	lsls	r2, r3
 80007d0:	0013      	movs	r3, r2
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	4193      	sbcs	r3, r2
 80007d6:	430b      	orrs	r3, r1
 80007d8:	e722      	b.n	8000620 <__aeabi_fadd+0x9c>
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d146      	bne.n	800086c <__aeabi_fadd+0x2e8>
 80007de:	2f00      	cmp	r7, #0
 80007e0:	d062      	beq.n	80008a8 <__aeabi_fadd+0x324>
 80007e2:	4663      	mov	r3, ip
 80007e4:	2000      	movs	r0, #0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fadd+0x268>
 80007ea:	e752      	b.n	8000692 <__aeabi_fadd+0x10e>
 80007ec:	003b      	movs	r3, r7
 80007ee:	4463      	add	r3, ip
 80007f0:	015a      	lsls	r2, r3, #5
 80007f2:	d583      	bpl.n	80006fc <__aeabi_fadd+0x178>
 80007f4:	4a32      	ldr	r2, [pc, #200]	; (80008c0 <__aeabi_fadd+0x33c>)
 80007f6:	3501      	adds	r5, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	e77f      	b.n	80006fc <__aeabi_fadd+0x178>
 80007fc:	2f00      	cmp	r7, #0
 80007fe:	d0c4      	beq.n	800078a <__aeabi_fadd+0x206>
 8000800:	1e53      	subs	r3, r2, #1
 8000802:	2a01      	cmp	r2, #1
 8000804:	d012      	beq.n	800082c <__aeabi_fadd+0x2a8>
 8000806:	2aff      	cmp	r2, #255	; 0xff
 8000808:	d08c      	beq.n	8000724 <__aeabi_fadd+0x1a0>
 800080a:	001a      	movs	r2, r3
 800080c:	e79e      	b.n	800074c <__aeabi_fadd+0x1c8>
 800080e:	2f00      	cmp	r7, #0
 8000810:	d000      	beq.n	8000814 <__aeabi_fadd+0x290>
 8000812:	e77c      	b.n	800070e <__aeabi_fadd+0x18a>
 8000814:	4663      	mov	r3, ip
 8000816:	2b00      	cmp	r3, #0
 8000818:	d183      	bne.n	8000722 <__aeabi_fadd+0x19e>
 800081a:	2680      	movs	r6, #128	; 0x80
 800081c:	2400      	movs	r4, #0
 800081e:	20ff      	movs	r0, #255	; 0xff
 8000820:	03f6      	lsls	r6, r6, #15
 8000822:	e736      	b.n	8000692 <__aeabi_fadd+0x10e>
 8000824:	4663      	mov	r3, ip
 8000826:	000c      	movs	r4, r1
 8000828:	1bde      	subs	r6, r3, r7
 800082a:	e717      	b.n	800065c <__aeabi_fadd+0xd8>
 800082c:	003b      	movs	r3, r7
 800082e:	4463      	add	r3, ip
 8000830:	2501      	movs	r5, #1
 8000832:	015a      	lsls	r2, r3, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x2b4>
 8000836:	e761      	b.n	80006fc <__aeabi_fadd+0x178>
 8000838:	2502      	movs	r5, #2
 800083a:	e6f7      	b.n	800062c <__aeabi_fadd+0xa8>
 800083c:	4663      	mov	r3, ip
 800083e:	2501      	movs	r5, #1
 8000840:	1afb      	subs	r3, r7, r3
 8000842:	e707      	b.n	8000654 <__aeabi_fadd+0xd0>
 8000844:	2320      	movs	r3, #32
 8000846:	1a9b      	subs	r3, r3, r2
 8000848:	0038      	movs	r0, r7
 800084a:	409f      	lsls	r7, r3
 800084c:	003b      	movs	r3, r7
 800084e:	40d0      	lsrs	r0, r2
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	4193      	sbcs	r3, r2
 8000854:	4303      	orrs	r3, r0
 8000856:	e7ae      	b.n	80007b6 <__aeabi_fadd+0x232>
 8000858:	2320      	movs	r3, #32
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	0039      	movs	r1, r7
 800085e:	409f      	lsls	r7, r3
 8000860:	003b      	movs	r3, r7
 8000862:	40d1      	lsrs	r1, r2
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	4193      	sbcs	r3, r2
 8000868:	430b      	orrs	r3, r1
 800086a:	e773      	b.n	8000754 <__aeabi_fadd+0x1d0>
 800086c:	2f00      	cmp	r7, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x2ee>
 8000870:	e758      	b.n	8000724 <__aeabi_fadd+0x1a0>
 8000872:	4662      	mov	r2, ip
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_fadd+0x2f6>
 8000878:	e755      	b.n	8000726 <__aeabi_fadd+0x1a2>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	03d2      	lsls	r2, r2, #15
 800087e:	4213      	tst	r3, r2
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x300>
 8000882:	e750      	b.n	8000726 <__aeabi_fadd+0x1a2>
 8000884:	4641      	mov	r1, r8
 8000886:	4211      	tst	r1, r2
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x308>
 800088a:	e74c      	b.n	8000726 <__aeabi_fadd+0x1a2>
 800088c:	4643      	mov	r3, r8
 800088e:	e74a      	b.n	8000726 <__aeabi_fadd+0x1a2>
 8000890:	4663      	mov	r3, ip
 8000892:	2b00      	cmp	r3, #0
 8000894:	d083      	beq.n	800079e <__aeabi_fadd+0x21a>
 8000896:	000c      	movs	r4, r1
 8000898:	4646      	mov	r6, r8
 800089a:	2000      	movs	r0, #0
 800089c:	e6f9      	b.n	8000692 <__aeabi_fadd+0x10e>
 800089e:	4663      	mov	r3, ip
 80008a0:	000c      	movs	r4, r1
 80008a2:	1bdb      	subs	r3, r3, r7
 80008a4:	3501      	adds	r5, #1
 80008a6:	e6d5      	b.n	8000654 <__aeabi_fadd+0xd0>
 80008a8:	4646      	mov	r6, r8
 80008aa:	2000      	movs	r0, #0
 80008ac:	e6f1      	b.n	8000692 <__aeabi_fadd+0x10e>
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fadd+0x330>
 80008b2:	e723      	b.n	80006fc <__aeabi_fadd+0x178>
 80008b4:	2400      	movs	r4, #0
 80008b6:	2600      	movs	r6, #0
 80008b8:	e6eb      	b.n	8000692 <__aeabi_fadd+0x10e>
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	7dffffff 	.word	0x7dffffff
 80008c0:	fbffffff 	.word	0xfbffffff

080008c4 <__aeabi_ui2f>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	1e04      	subs	r4, r0, #0
 80008c8:	d00e      	beq.n	80008e8 <__aeabi_ui2f+0x24>
 80008ca:	f001 ff59 	bl	8002780 <__clzsi2>
 80008ce:	239e      	movs	r3, #158	; 0x9e
 80008d0:	0001      	movs	r1, r0
 80008d2:	1a1b      	subs	r3, r3, r0
 80008d4:	2b96      	cmp	r3, #150	; 0x96
 80008d6:	dc0c      	bgt.n	80008f2 <__aeabi_ui2f+0x2e>
 80008d8:	2808      	cmp	r0, #8
 80008da:	d02c      	beq.n	8000936 <__aeabi_ui2f+0x72>
 80008dc:	3908      	subs	r1, #8
 80008de:	408c      	lsls	r4, r1
 80008e0:	0264      	lsls	r4, r4, #9
 80008e2:	0a64      	lsrs	r4, r4, #9
 80008e4:	b2d8      	uxtb	r0, r3
 80008e6:	e001      	b.n	80008ec <__aeabi_ui2f+0x28>
 80008e8:	2000      	movs	r0, #0
 80008ea:	2400      	movs	r4, #0
 80008ec:	05c0      	lsls	r0, r0, #23
 80008ee:	4320      	orrs	r0, r4
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	2b99      	cmp	r3, #153	; 0x99
 80008f4:	dd0a      	ble.n	800090c <__aeabi_ui2f+0x48>
 80008f6:	0002      	movs	r2, r0
 80008f8:	0020      	movs	r0, r4
 80008fa:	321b      	adds	r2, #27
 80008fc:	4090      	lsls	r0, r2
 80008fe:	0002      	movs	r2, r0
 8000900:	1e50      	subs	r0, r2, #1
 8000902:	4182      	sbcs	r2, r0
 8000904:	2005      	movs	r0, #5
 8000906:	1a40      	subs	r0, r0, r1
 8000908:	40c4      	lsrs	r4, r0
 800090a:	4314      	orrs	r4, r2
 800090c:	2905      	cmp	r1, #5
 800090e:	dc16      	bgt.n	800093e <__aeabi_ui2f+0x7a>
 8000910:	0022      	movs	r2, r4
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <__aeabi_ui2f+0x8c>)
 8000914:	4002      	ands	r2, r0
 8000916:	0765      	lsls	r5, r4, #29
 8000918:	d009      	beq.n	800092e <__aeabi_ui2f+0x6a>
 800091a:	250f      	movs	r5, #15
 800091c:	402c      	ands	r4, r5
 800091e:	2c04      	cmp	r4, #4
 8000920:	d005      	beq.n	800092e <__aeabi_ui2f+0x6a>
 8000922:	3204      	adds	r2, #4
 8000924:	0154      	lsls	r4, r2, #5
 8000926:	d502      	bpl.n	800092e <__aeabi_ui2f+0x6a>
 8000928:	239f      	movs	r3, #159	; 0x9f
 800092a:	4002      	ands	r2, r0
 800092c:	1a5b      	subs	r3, r3, r1
 800092e:	0192      	lsls	r2, r2, #6
 8000930:	0a54      	lsrs	r4, r2, #9
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	e7da      	b.n	80008ec <__aeabi_ui2f+0x28>
 8000936:	0264      	lsls	r4, r4, #9
 8000938:	2096      	movs	r0, #150	; 0x96
 800093a:	0a64      	lsrs	r4, r4, #9
 800093c:	e7d6      	b.n	80008ec <__aeabi_ui2f+0x28>
 800093e:	1f4a      	subs	r2, r1, #5
 8000940:	4094      	lsls	r4, r2
 8000942:	0022      	movs	r2, r4
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <__aeabi_ui2f+0x8c>)
 8000946:	4002      	ands	r2, r0
 8000948:	0765      	lsls	r5, r4, #29
 800094a:	d0f0      	beq.n	800092e <__aeabi_ui2f+0x6a>
 800094c:	e7e5      	b.n	800091a <__aeabi_ui2f+0x56>
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	fbffffff 	.word	0xfbffffff

08000954 <__aeabi_dadd>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	464f      	mov	r7, r9
 8000958:	4646      	mov	r6, r8
 800095a:	46d6      	mov	lr, sl
 800095c:	0004      	movs	r4, r0
 800095e:	b5c0      	push	{r6, r7, lr}
 8000960:	001f      	movs	r7, r3
 8000962:	030b      	lsls	r3, r1, #12
 8000964:	0010      	movs	r0, r2
 8000966:	004e      	lsls	r6, r1, #1
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	0fcd      	lsrs	r5, r1, #31
 800096c:	0f61      	lsrs	r1, r4, #29
 800096e:	007a      	lsls	r2, r7, #1
 8000970:	4319      	orrs	r1, r3
 8000972:	00e3      	lsls	r3, r4, #3
 8000974:	033c      	lsls	r4, r7, #12
 8000976:	0fff      	lsrs	r7, r7, #31
 8000978:	46bc      	mov	ip, r7
 800097a:	0a64      	lsrs	r4, r4, #9
 800097c:	0f47      	lsrs	r7, r0, #29
 800097e:	4327      	orrs	r7, r4
 8000980:	0d76      	lsrs	r6, r6, #21
 8000982:	0d52      	lsrs	r2, r2, #21
 8000984:	00c0      	lsls	r0, r0, #3
 8000986:	46b9      	mov	r9, r7
 8000988:	4680      	mov	r8, r0
 800098a:	1ab7      	subs	r7, r6, r2
 800098c:	4565      	cmp	r5, ip
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x3e>
 8000990:	e09b      	b.n	8000aca <__aeabi_dadd+0x176>
 8000992:	2f00      	cmp	r7, #0
 8000994:	dc00      	bgt.n	8000998 <__aeabi_dadd+0x44>
 8000996:	e084      	b.n	8000aa2 <__aeabi_dadd+0x14e>
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_dadd+0x4a>
 800099c:	e0be      	b.n	8000b1c <__aeabi_dadd+0x1c8>
 800099e:	4ac8      	ldr	r2, [pc, #800]	; (8000cc0 <__aeabi_dadd+0x36c>)
 80009a0:	4296      	cmp	r6, r2
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x52>
 80009a4:	e124      	b.n	8000bf0 <__aeabi_dadd+0x29c>
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	464c      	mov	r4, r9
 80009aa:	0412      	lsls	r2, r2, #16
 80009ac:	4314      	orrs	r4, r2
 80009ae:	46a1      	mov	r9, r4
 80009b0:	2f38      	cmp	r7, #56	; 0x38
 80009b2:	dd00      	ble.n	80009b6 <__aeabi_dadd+0x62>
 80009b4:	e167      	b.n	8000c86 <__aeabi_dadd+0x332>
 80009b6:	2f1f      	cmp	r7, #31
 80009b8:	dd00      	ble.n	80009bc <__aeabi_dadd+0x68>
 80009ba:	e1d6      	b.n	8000d6a <__aeabi_dadd+0x416>
 80009bc:	2220      	movs	r2, #32
 80009be:	464c      	mov	r4, r9
 80009c0:	1bd2      	subs	r2, r2, r7
 80009c2:	4094      	lsls	r4, r2
 80009c4:	46a2      	mov	sl, r4
 80009c6:	4644      	mov	r4, r8
 80009c8:	40fc      	lsrs	r4, r7
 80009ca:	0020      	movs	r0, r4
 80009cc:	4654      	mov	r4, sl
 80009ce:	4304      	orrs	r4, r0
 80009d0:	4640      	mov	r0, r8
 80009d2:	4090      	lsls	r0, r2
 80009d4:	1e42      	subs	r2, r0, #1
 80009d6:	4190      	sbcs	r0, r2
 80009d8:	464a      	mov	r2, r9
 80009da:	40fa      	lsrs	r2, r7
 80009dc:	4304      	orrs	r4, r0
 80009de:	1a89      	subs	r1, r1, r2
 80009e0:	1b1c      	subs	r4, r3, r4
 80009e2:	42a3      	cmp	r3, r4
 80009e4:	4192      	sbcs	r2, r2
 80009e6:	4252      	negs	r2, r2
 80009e8:	1a8b      	subs	r3, r1, r2
 80009ea:	469a      	mov	sl, r3
 80009ec:	4653      	mov	r3, sl
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	d400      	bmi.n	80009f4 <__aeabi_dadd+0xa0>
 80009f2:	e0d4      	b.n	8000b9e <__aeabi_dadd+0x24a>
 80009f4:	4653      	mov	r3, sl
 80009f6:	025a      	lsls	r2, r3, #9
 80009f8:	0a53      	lsrs	r3, r2, #9
 80009fa:	469a      	mov	sl, r3
 80009fc:	4653      	mov	r3, sl
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dadd+0xb0>
 8000a02:	e104      	b.n	8000c0e <__aeabi_dadd+0x2ba>
 8000a04:	4650      	mov	r0, sl
 8000a06:	f001 febb 	bl	8002780 <__clzsi2>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	2220      	movs	r2, #32
 8000a10:	0020      	movs	r0, r4
 8000a12:	1ad2      	subs	r2, r2, r3
 8000a14:	4651      	mov	r1, sl
 8000a16:	40d0      	lsrs	r0, r2
 8000a18:	4099      	lsls	r1, r3
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	409c      	lsls	r4, r3
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	42b3      	cmp	r3, r6
 8000a22:	da00      	bge.n	8000a26 <__aeabi_dadd+0xd2>
 8000a24:	e102      	b.n	8000c2c <__aeabi_dadd+0x2d8>
 8000a26:	1b9b      	subs	r3, r3, r6
 8000a28:	1c59      	adds	r1, r3, #1
 8000a2a:	291f      	cmp	r1, #31
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0xdc>
 8000a2e:	e0a7      	b.n	8000b80 <__aeabi_dadd+0x22c>
 8000a30:	2320      	movs	r3, #32
 8000a32:	0010      	movs	r0, r2
 8000a34:	0026      	movs	r6, r4
 8000a36:	1a5b      	subs	r3, r3, r1
 8000a38:	409c      	lsls	r4, r3
 8000a3a:	4098      	lsls	r0, r3
 8000a3c:	40ce      	lsrs	r6, r1
 8000a3e:	40ca      	lsrs	r2, r1
 8000a40:	1e63      	subs	r3, r4, #1
 8000a42:	419c      	sbcs	r4, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	4692      	mov	sl, r2
 8000a48:	2600      	movs	r6, #0
 8000a4a:	4304      	orrs	r4, r0
 8000a4c:	0763      	lsls	r3, r4, #29
 8000a4e:	d009      	beq.n	8000a64 <__aeabi_dadd+0x110>
 8000a50:	230f      	movs	r3, #15
 8000a52:	4023      	ands	r3, r4
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d005      	beq.n	8000a64 <__aeabi_dadd+0x110>
 8000a58:	1d23      	adds	r3, r4, #4
 8000a5a:	42a3      	cmp	r3, r4
 8000a5c:	41a4      	sbcs	r4, r4
 8000a5e:	4264      	negs	r4, r4
 8000a60:	44a2      	add	sl, r4
 8000a62:	001c      	movs	r4, r3
 8000a64:	4653      	mov	r3, sl
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_dadd+0x118>
 8000a6a:	e09b      	b.n	8000ba4 <__aeabi_dadd+0x250>
 8000a6c:	4b94      	ldr	r3, [pc, #592]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000a6e:	3601      	adds	r6, #1
 8000a70:	429e      	cmp	r6, r3
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x122>
 8000a74:	e0b8      	b.n	8000be8 <__aeabi_dadd+0x294>
 8000a76:	4653      	mov	r3, sl
 8000a78:	4992      	ldr	r1, [pc, #584]	; (8000cc4 <__aeabi_dadd+0x370>)
 8000a7a:	08e4      	lsrs	r4, r4, #3
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	0019      	movs	r1, r3
 8000a80:	075b      	lsls	r3, r3, #29
 8000a82:	4323      	orrs	r3, r4
 8000a84:	0572      	lsls	r2, r6, #21
 8000a86:	024c      	lsls	r4, r1, #9
 8000a88:	0b24      	lsrs	r4, r4, #12
 8000a8a:	0d52      	lsrs	r2, r2, #21
 8000a8c:	0512      	lsls	r2, r2, #20
 8000a8e:	07ed      	lsls	r5, r5, #31
 8000a90:	4322      	orrs	r2, r4
 8000a92:	432a      	orrs	r2, r5
 8000a94:	0018      	movs	r0, r3
 8000a96:	0011      	movs	r1, r2
 8000a98:	bce0      	pop	{r5, r6, r7}
 8000a9a:	46ba      	mov	sl, r7
 8000a9c:	46b1      	mov	r9, r6
 8000a9e:	46a8      	mov	r8, r5
 8000aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa2:	2f00      	cmp	r7, #0
 8000aa4:	d048      	beq.n	8000b38 <__aeabi_dadd+0x1e4>
 8000aa6:	1b97      	subs	r7, r2, r6
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x15a>
 8000aac:	e10e      	b.n	8000ccc <__aeabi_dadd+0x378>
 8000aae:	000c      	movs	r4, r1
 8000ab0:	431c      	orrs	r4, r3
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x162>
 8000ab4:	e1b7      	b.n	8000e26 <__aeabi_dadd+0x4d2>
 8000ab6:	1e7c      	subs	r4, r7, #1
 8000ab8:	2f01      	cmp	r7, #1
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x16a>
 8000abc:	e226      	b.n	8000f0c <__aeabi_dadd+0x5b8>
 8000abe:	4d80      	ldr	r5, [pc, #512]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000ac0:	42af      	cmp	r7, r5
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x172>
 8000ac4:	e1d5      	b.n	8000e72 <__aeabi_dadd+0x51e>
 8000ac6:	0027      	movs	r7, r4
 8000ac8:	e107      	b.n	8000cda <__aeabi_dadd+0x386>
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	dc00      	bgt.n	8000ad0 <__aeabi_dadd+0x17c>
 8000ace:	e0b2      	b.n	8000c36 <__aeabi_dadd+0x2e2>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d047      	beq.n	8000b64 <__aeabi_dadd+0x210>
 8000ad4:	4a7a      	ldr	r2, [pc, #488]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000ad6:	4296      	cmp	r6, r2
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x188>
 8000ada:	e089      	b.n	8000bf0 <__aeabi_dadd+0x29c>
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	464c      	mov	r4, r9
 8000ae0:	0412      	lsls	r2, r2, #16
 8000ae2:	4314      	orrs	r4, r2
 8000ae4:	46a1      	mov	r9, r4
 8000ae6:	2f38      	cmp	r7, #56	; 0x38
 8000ae8:	dc6b      	bgt.n	8000bc2 <__aeabi_dadd+0x26e>
 8000aea:	2f1f      	cmp	r7, #31
 8000aec:	dc00      	bgt.n	8000af0 <__aeabi_dadd+0x19c>
 8000aee:	e16e      	b.n	8000dce <__aeabi_dadd+0x47a>
 8000af0:	003a      	movs	r2, r7
 8000af2:	4648      	mov	r0, r9
 8000af4:	3a20      	subs	r2, #32
 8000af6:	40d0      	lsrs	r0, r2
 8000af8:	4684      	mov	ip, r0
 8000afa:	2f20      	cmp	r7, #32
 8000afc:	d007      	beq.n	8000b0e <__aeabi_dadd+0x1ba>
 8000afe:	2240      	movs	r2, #64	; 0x40
 8000b00:	4648      	mov	r0, r9
 8000b02:	1bd2      	subs	r2, r2, r7
 8000b04:	4090      	lsls	r0, r2
 8000b06:	0002      	movs	r2, r0
 8000b08:	4640      	mov	r0, r8
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	4680      	mov	r8, r0
 8000b0e:	4640      	mov	r0, r8
 8000b10:	1e42      	subs	r2, r0, #1
 8000b12:	4190      	sbcs	r0, r2
 8000b14:	4662      	mov	r2, ip
 8000b16:	0004      	movs	r4, r0
 8000b18:	4314      	orrs	r4, r2
 8000b1a:	e057      	b.n	8000bcc <__aeabi_dadd+0x278>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	4302      	orrs	r2, r0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x1d0>
 8000b22:	e103      	b.n	8000d2c <__aeabi_dadd+0x3d8>
 8000b24:	1e7a      	subs	r2, r7, #1
 8000b26:	2f01      	cmp	r7, #1
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x1d8>
 8000b2a:	e193      	b.n	8000e54 <__aeabi_dadd+0x500>
 8000b2c:	4c64      	ldr	r4, [pc, #400]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000b2e:	42a7      	cmp	r7, r4
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x1e0>
 8000b32:	e18a      	b.n	8000e4a <__aeabi_dadd+0x4f6>
 8000b34:	0017      	movs	r7, r2
 8000b36:	e73b      	b.n	80009b0 <__aeabi_dadd+0x5c>
 8000b38:	4c63      	ldr	r4, [pc, #396]	; (8000cc8 <__aeabi_dadd+0x374>)
 8000b3a:	1c72      	adds	r2, r6, #1
 8000b3c:	4222      	tst	r2, r4
 8000b3e:	d000      	beq.n	8000b42 <__aeabi_dadd+0x1ee>
 8000b40:	e0e0      	b.n	8000d04 <__aeabi_dadd+0x3b0>
 8000b42:	000a      	movs	r2, r1
 8000b44:	431a      	orrs	r2, r3
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d000      	beq.n	8000b4c <__aeabi_dadd+0x1f8>
 8000b4a:	e174      	b.n	8000e36 <__aeabi_dadd+0x4e2>
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dadd+0x1fe>
 8000b50:	e1d0      	b.n	8000ef4 <__aeabi_dadd+0x5a0>
 8000b52:	464a      	mov	r2, r9
 8000b54:	4302      	orrs	r2, r0
 8000b56:	d000      	beq.n	8000b5a <__aeabi_dadd+0x206>
 8000b58:	e1e3      	b.n	8000f22 <__aeabi_dadd+0x5ce>
 8000b5a:	074a      	lsls	r2, r1, #29
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	08c9      	lsrs	r1, r1, #3
 8000b62:	e029      	b.n	8000bb8 <__aeabi_dadd+0x264>
 8000b64:	464a      	mov	r2, r9
 8000b66:	4302      	orrs	r2, r0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x218>
 8000b6a:	e17d      	b.n	8000e68 <__aeabi_dadd+0x514>
 8000b6c:	1e7a      	subs	r2, r7, #1
 8000b6e:	2f01      	cmp	r7, #1
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x220>
 8000b72:	e0e0      	b.n	8000d36 <__aeabi_dadd+0x3e2>
 8000b74:	4c52      	ldr	r4, [pc, #328]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000b76:	42a7      	cmp	r7, r4
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x228>
 8000b7a:	e166      	b.n	8000e4a <__aeabi_dadd+0x4f6>
 8000b7c:	0017      	movs	r7, r2
 8000b7e:	e7b2      	b.n	8000ae6 <__aeabi_dadd+0x192>
 8000b80:	0010      	movs	r0, r2
 8000b82:	3b1f      	subs	r3, #31
 8000b84:	40d8      	lsrs	r0, r3
 8000b86:	2920      	cmp	r1, #32
 8000b88:	d003      	beq.n	8000b92 <__aeabi_dadd+0x23e>
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	4314      	orrs	r4, r2
 8000b92:	1e63      	subs	r3, r4, #1
 8000b94:	419c      	sbcs	r4, r3
 8000b96:	2300      	movs	r3, #0
 8000b98:	2600      	movs	r6, #0
 8000b9a:	469a      	mov	sl, r3
 8000b9c:	4304      	orrs	r4, r0
 8000b9e:	0763      	lsls	r3, r4, #29
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_dadd+0x250>
 8000ba2:	e755      	b.n	8000a50 <__aeabi_dadd+0xfc>
 8000ba4:	4652      	mov	r2, sl
 8000ba6:	08e3      	lsrs	r3, r4, #3
 8000ba8:	0752      	lsls	r2, r2, #29
 8000baa:	4313      	orrs	r3, r2
 8000bac:	4652      	mov	r2, sl
 8000bae:	0037      	movs	r7, r6
 8000bb0:	08d1      	lsrs	r1, r2, #3
 8000bb2:	4a43      	ldr	r2, [pc, #268]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000bb4:	4297      	cmp	r7, r2
 8000bb6:	d01f      	beq.n	8000bf8 <__aeabi_dadd+0x2a4>
 8000bb8:	0309      	lsls	r1, r1, #12
 8000bba:	057a      	lsls	r2, r7, #21
 8000bbc:	0b0c      	lsrs	r4, r1, #12
 8000bbe:	0d52      	lsrs	r2, r2, #21
 8000bc0:	e764      	b.n	8000a8c <__aeabi_dadd+0x138>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	464c      	mov	r4, r9
 8000bc6:	4314      	orrs	r4, r2
 8000bc8:	1e62      	subs	r2, r4, #1
 8000bca:	4194      	sbcs	r4, r2
 8000bcc:	18e4      	adds	r4, r4, r3
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	4192      	sbcs	r2, r2
 8000bd2:	4252      	negs	r2, r2
 8000bd4:	4692      	mov	sl, r2
 8000bd6:	448a      	add	sl, r1
 8000bd8:	4653      	mov	r3, sl
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	d5df      	bpl.n	8000b9e <__aeabi_dadd+0x24a>
 8000bde:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000be0:	3601      	adds	r6, #1
 8000be2:	429e      	cmp	r6, r3
 8000be4:	d000      	beq.n	8000be8 <__aeabi_dadd+0x294>
 8000be6:	e0b3      	b.n	8000d50 <__aeabi_dadd+0x3fc>
 8000be8:	0032      	movs	r2, r6
 8000bea:	2400      	movs	r4, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	e74d      	b.n	8000a8c <__aeabi_dadd+0x138>
 8000bf0:	074a      	lsls	r2, r1, #29
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x2ac>
 8000bfe:	e200      	b.n	8001002 <__aeabi_dadd+0x6ae>
 8000c00:	2480      	movs	r4, #128	; 0x80
 8000c02:	0324      	lsls	r4, r4, #12
 8000c04:	430c      	orrs	r4, r1
 8000c06:	0324      	lsls	r4, r4, #12
 8000c08:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000c0a:	0b24      	lsrs	r4, r4, #12
 8000c0c:	e73e      	b.n	8000a8c <__aeabi_dadd+0x138>
 8000c0e:	0020      	movs	r0, r4
 8000c10:	f001 fdb6 	bl	8002780 <__clzsi2>
 8000c14:	0003      	movs	r3, r0
 8000c16:	3318      	adds	r3, #24
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	dc00      	bgt.n	8000c1e <__aeabi_dadd+0x2ca>
 8000c1c:	e6f7      	b.n	8000a0e <__aeabi_dadd+0xba>
 8000c1e:	0022      	movs	r2, r4
 8000c20:	3808      	subs	r0, #8
 8000c22:	4082      	lsls	r2, r0
 8000c24:	2400      	movs	r4, #0
 8000c26:	42b3      	cmp	r3, r6
 8000c28:	db00      	blt.n	8000c2c <__aeabi_dadd+0x2d8>
 8000c2a:	e6fc      	b.n	8000a26 <__aeabi_dadd+0xd2>
 8000c2c:	1af6      	subs	r6, r6, r3
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <__aeabi_dadd+0x370>)
 8000c30:	401a      	ands	r2, r3
 8000c32:	4692      	mov	sl, r2
 8000c34:	e70a      	b.n	8000a4c <__aeabi_dadd+0xf8>
 8000c36:	2f00      	cmp	r7, #0
 8000c38:	d02b      	beq.n	8000c92 <__aeabi_dadd+0x33e>
 8000c3a:	1b97      	subs	r7, r2, r6
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x2ee>
 8000c40:	e0b8      	b.n	8000db4 <__aeabi_dadd+0x460>
 8000c42:	4c1f      	ldr	r4, [pc, #124]	; (8000cc0 <__aeabi_dadd+0x36c>)
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dadd+0x2f6>
 8000c48:	e11c      	b.n	8000e84 <__aeabi_dadd+0x530>
 8000c4a:	2480      	movs	r4, #128	; 0x80
 8000c4c:	0424      	lsls	r4, r4, #16
 8000c4e:	4321      	orrs	r1, r4
 8000c50:	2f38      	cmp	r7, #56	; 0x38
 8000c52:	dd00      	ble.n	8000c56 <__aeabi_dadd+0x302>
 8000c54:	e11e      	b.n	8000e94 <__aeabi_dadd+0x540>
 8000c56:	2f1f      	cmp	r7, #31
 8000c58:	dd00      	ble.n	8000c5c <__aeabi_dadd+0x308>
 8000c5a:	e19e      	b.n	8000f9a <__aeabi_dadd+0x646>
 8000c5c:	2620      	movs	r6, #32
 8000c5e:	000c      	movs	r4, r1
 8000c60:	1bf6      	subs	r6, r6, r7
 8000c62:	0018      	movs	r0, r3
 8000c64:	40b3      	lsls	r3, r6
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	40f8      	lsrs	r0, r7
 8000c6a:	1e5e      	subs	r6, r3, #1
 8000c6c:	41b3      	sbcs	r3, r6
 8000c6e:	40f9      	lsrs	r1, r7
 8000c70:	4304      	orrs	r4, r0
 8000c72:	431c      	orrs	r4, r3
 8000c74:	4489      	add	r9, r1
 8000c76:	4444      	add	r4, r8
 8000c78:	4544      	cmp	r4, r8
 8000c7a:	419b      	sbcs	r3, r3
 8000c7c:	425b      	negs	r3, r3
 8000c7e:	444b      	add	r3, r9
 8000c80:	469a      	mov	sl, r3
 8000c82:	0016      	movs	r6, r2
 8000c84:	e7a8      	b.n	8000bd8 <__aeabi_dadd+0x284>
 8000c86:	4642      	mov	r2, r8
 8000c88:	464c      	mov	r4, r9
 8000c8a:	4314      	orrs	r4, r2
 8000c8c:	1e62      	subs	r2, r4, #1
 8000c8e:	4194      	sbcs	r4, r2
 8000c90:	e6a6      	b.n	80009e0 <__aeabi_dadd+0x8c>
 8000c92:	4c0d      	ldr	r4, [pc, #52]	; (8000cc8 <__aeabi_dadd+0x374>)
 8000c94:	1c72      	adds	r2, r6, #1
 8000c96:	4222      	tst	r2, r4
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dadd+0x348>
 8000c9a:	e0a8      	b.n	8000dee <__aeabi_dadd+0x49a>
 8000c9c:	000a      	movs	r2, r1
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_dadd+0x352>
 8000ca4:	e10a      	b.n	8000ebc <__aeabi_dadd+0x568>
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_dadd+0x358>
 8000caa:	e15e      	b.n	8000f6a <__aeabi_dadd+0x616>
 8000cac:	464a      	mov	r2, r9
 8000cae:	4302      	orrs	r2, r0
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_dadd+0x360>
 8000cb2:	e161      	b.n	8000f78 <__aeabi_dadd+0x624>
 8000cb4:	074a      	lsls	r2, r1, #29
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c9      	lsrs	r1, r1, #3
 8000cbc:	e77c      	b.n	8000bb8 <__aeabi_dadd+0x264>
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	000007ff 	.word	0x000007ff
 8000cc4:	ff7fffff 	.word	0xff7fffff
 8000cc8:	000007fe 	.word	0x000007fe
 8000ccc:	4ccf      	ldr	r4, [pc, #828]	; (800100c <__aeabi_dadd+0x6b8>)
 8000cce:	42a2      	cmp	r2, r4
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dadd+0x380>
 8000cd2:	e0ce      	b.n	8000e72 <__aeabi_dadd+0x51e>
 8000cd4:	2480      	movs	r4, #128	; 0x80
 8000cd6:	0424      	lsls	r4, r4, #16
 8000cd8:	4321      	orrs	r1, r4
 8000cda:	2f38      	cmp	r7, #56	; 0x38
 8000cdc:	dc5b      	bgt.n	8000d96 <__aeabi_dadd+0x442>
 8000cde:	2f1f      	cmp	r7, #31
 8000ce0:	dd00      	ble.n	8000ce4 <__aeabi_dadd+0x390>
 8000ce2:	e0dc      	b.n	8000e9e <__aeabi_dadd+0x54a>
 8000ce4:	2520      	movs	r5, #32
 8000ce6:	000c      	movs	r4, r1
 8000ce8:	1bed      	subs	r5, r5, r7
 8000cea:	001e      	movs	r6, r3
 8000cec:	40ab      	lsls	r3, r5
 8000cee:	40ac      	lsls	r4, r5
 8000cf0:	40fe      	lsrs	r6, r7
 8000cf2:	1e5d      	subs	r5, r3, #1
 8000cf4:	41ab      	sbcs	r3, r5
 8000cf6:	4334      	orrs	r4, r6
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	1a5b      	subs	r3, r3, r1
 8000d00:	4699      	mov	r9, r3
 8000d02:	e04c      	b.n	8000d9e <__aeabi_dadd+0x44a>
 8000d04:	464a      	mov	r2, r9
 8000d06:	1a1c      	subs	r4, r3, r0
 8000d08:	1a88      	subs	r0, r1, r2
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	4192      	sbcs	r2, r2
 8000d0e:	4252      	negs	r2, r2
 8000d10:	4692      	mov	sl, r2
 8000d12:	0002      	movs	r2, r0
 8000d14:	4650      	mov	r0, sl
 8000d16:	1a12      	subs	r2, r2, r0
 8000d18:	4692      	mov	sl, r2
 8000d1a:	0212      	lsls	r2, r2, #8
 8000d1c:	d478      	bmi.n	8000e10 <__aeabi_dadd+0x4bc>
 8000d1e:	4653      	mov	r3, sl
 8000d20:	4323      	orrs	r3, r4
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dadd+0x3d2>
 8000d24:	e66a      	b.n	80009fc <__aeabi_dadd+0xa8>
 8000d26:	2100      	movs	r1, #0
 8000d28:	2500      	movs	r5, #0
 8000d2a:	e745      	b.n	8000bb8 <__aeabi_dadd+0x264>
 8000d2c:	074a      	lsls	r2, r1, #29
 8000d2e:	08db      	lsrs	r3, r3, #3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	e73d      	b.n	8000bb2 <__aeabi_dadd+0x25e>
 8000d36:	181c      	adds	r4, r3, r0
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	4449      	add	r1, r9
 8000d3e:	468a      	mov	sl, r1
 8000d40:	425b      	negs	r3, r3
 8000d42:	449a      	add	sl, r3
 8000d44:	4653      	mov	r3, sl
 8000d46:	2601      	movs	r6, #1
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	d400      	bmi.n	8000d4e <__aeabi_dadd+0x3fa>
 8000d4c:	e727      	b.n	8000b9e <__aeabi_dadd+0x24a>
 8000d4e:	2602      	movs	r6, #2
 8000d50:	4652      	mov	r2, sl
 8000d52:	4baf      	ldr	r3, [pc, #700]	; (8001010 <__aeabi_dadd+0x6bc>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	401a      	ands	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	4021      	ands	r1, r4
 8000d5c:	0862      	lsrs	r2, r4, #1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	07dc      	lsls	r4, r3, #31
 8000d62:	085b      	lsrs	r3, r3, #1
 8000d64:	469a      	mov	sl, r3
 8000d66:	4314      	orrs	r4, r2
 8000d68:	e670      	b.n	8000a4c <__aeabi_dadd+0xf8>
 8000d6a:	003a      	movs	r2, r7
 8000d6c:	464c      	mov	r4, r9
 8000d6e:	3a20      	subs	r2, #32
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	46a4      	mov	ip, r4
 8000d74:	2f20      	cmp	r7, #32
 8000d76:	d007      	beq.n	8000d88 <__aeabi_dadd+0x434>
 8000d78:	2240      	movs	r2, #64	; 0x40
 8000d7a:	4648      	mov	r0, r9
 8000d7c:	1bd2      	subs	r2, r2, r7
 8000d7e:	4090      	lsls	r0, r2
 8000d80:	0002      	movs	r2, r0
 8000d82:	4640      	mov	r0, r8
 8000d84:	4310      	orrs	r0, r2
 8000d86:	4680      	mov	r8, r0
 8000d88:	4640      	mov	r0, r8
 8000d8a:	1e42      	subs	r2, r0, #1
 8000d8c:	4190      	sbcs	r0, r2
 8000d8e:	4662      	mov	r2, ip
 8000d90:	0004      	movs	r4, r0
 8000d92:	4314      	orrs	r4, r2
 8000d94:	e624      	b.n	80009e0 <__aeabi_dadd+0x8c>
 8000d96:	4319      	orrs	r1, r3
 8000d98:	000c      	movs	r4, r1
 8000d9a:	1e63      	subs	r3, r4, #1
 8000d9c:	419c      	sbcs	r4, r3
 8000d9e:	4643      	mov	r3, r8
 8000da0:	1b1c      	subs	r4, r3, r4
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	419b      	sbcs	r3, r3
 8000da6:	4649      	mov	r1, r9
 8000da8:	425b      	negs	r3, r3
 8000daa:	1acb      	subs	r3, r1, r3
 8000dac:	469a      	mov	sl, r3
 8000dae:	4665      	mov	r5, ip
 8000db0:	0016      	movs	r6, r2
 8000db2:	e61b      	b.n	80009ec <__aeabi_dadd+0x98>
 8000db4:	000c      	movs	r4, r1
 8000db6:	431c      	orrs	r4, r3
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dadd+0x468>
 8000dba:	e0c7      	b.n	8000f4c <__aeabi_dadd+0x5f8>
 8000dbc:	1e7c      	subs	r4, r7, #1
 8000dbe:	2f01      	cmp	r7, #1
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dadd+0x470>
 8000dc2:	e0f9      	b.n	8000fb8 <__aeabi_dadd+0x664>
 8000dc4:	4e91      	ldr	r6, [pc, #580]	; (800100c <__aeabi_dadd+0x6b8>)
 8000dc6:	42b7      	cmp	r7, r6
 8000dc8:	d05c      	beq.n	8000e84 <__aeabi_dadd+0x530>
 8000dca:	0027      	movs	r7, r4
 8000dcc:	e740      	b.n	8000c50 <__aeabi_dadd+0x2fc>
 8000dce:	2220      	movs	r2, #32
 8000dd0:	464c      	mov	r4, r9
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	1bd2      	subs	r2, r2, r7
 8000dd6:	4094      	lsls	r4, r2
 8000dd8:	40f8      	lsrs	r0, r7
 8000dda:	4304      	orrs	r4, r0
 8000ddc:	4640      	mov	r0, r8
 8000dde:	4090      	lsls	r0, r2
 8000de0:	1e42      	subs	r2, r0, #1
 8000de2:	4190      	sbcs	r0, r2
 8000de4:	464a      	mov	r2, r9
 8000de6:	40fa      	lsrs	r2, r7
 8000de8:	4304      	orrs	r4, r0
 8000dea:	1889      	adds	r1, r1, r2
 8000dec:	e6ee      	b.n	8000bcc <__aeabi_dadd+0x278>
 8000dee:	4c87      	ldr	r4, [pc, #540]	; (800100c <__aeabi_dadd+0x6b8>)
 8000df0:	42a2      	cmp	r2, r4
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dadd+0x4a2>
 8000df4:	e6f9      	b.n	8000bea <__aeabi_dadd+0x296>
 8000df6:	1818      	adds	r0, r3, r0
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	419b      	sbcs	r3, r3
 8000dfc:	4449      	add	r1, r9
 8000dfe:	425b      	negs	r3, r3
 8000e00:	18cb      	adds	r3, r1, r3
 8000e02:	07dc      	lsls	r4, r3, #31
 8000e04:	0840      	lsrs	r0, r0, #1
 8000e06:	085b      	lsrs	r3, r3, #1
 8000e08:	469a      	mov	sl, r3
 8000e0a:	0016      	movs	r6, r2
 8000e0c:	4304      	orrs	r4, r0
 8000e0e:	e6c6      	b.n	8000b9e <__aeabi_dadd+0x24a>
 8000e10:	4642      	mov	r2, r8
 8000e12:	1ad4      	subs	r4, r2, r3
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	4180      	sbcs	r0, r0
 8000e18:	464b      	mov	r3, r9
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	1a0b      	subs	r3, r1, r0
 8000e20:	469a      	mov	sl, r3
 8000e22:	4665      	mov	r5, ip
 8000e24:	e5ea      	b.n	80009fc <__aeabi_dadd+0xa8>
 8000e26:	464b      	mov	r3, r9
 8000e28:	464a      	mov	r2, r9
 8000e2a:	08c0      	lsrs	r0, r0, #3
 8000e2c:	075b      	lsls	r3, r3, #29
 8000e2e:	4665      	mov	r5, ip
 8000e30:	4303      	orrs	r3, r0
 8000e32:	08d1      	lsrs	r1, r2, #3
 8000e34:	e6bd      	b.n	8000bb2 <__aeabi_dadd+0x25e>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dadd+0x4e8>
 8000e3a:	e08e      	b.n	8000f5a <__aeabi_dadd+0x606>
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	4303      	orrs	r3, r0
 8000e40:	d117      	bne.n	8000e72 <__aeabi_dadd+0x51e>
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	2500      	movs	r5, #0
 8000e46:	0309      	lsls	r1, r1, #12
 8000e48:	e6da      	b.n	8000c00 <__aeabi_dadd+0x2ac>
 8000e4a:	074a      	lsls	r2, r1, #29
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	08c9      	lsrs	r1, r1, #3
 8000e52:	e6d1      	b.n	8000bf8 <__aeabi_dadd+0x2a4>
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	464a      	mov	r2, r9
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	419b      	sbcs	r3, r3
 8000e5c:	1a89      	subs	r1, r1, r2
 8000e5e:	425b      	negs	r3, r3
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	469a      	mov	sl, r3
 8000e64:	2601      	movs	r6, #1
 8000e66:	e5c1      	b.n	80009ec <__aeabi_dadd+0x98>
 8000e68:	074a      	lsls	r2, r1, #29
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	08c9      	lsrs	r1, r1, #3
 8000e70:	e69f      	b.n	8000bb2 <__aeabi_dadd+0x25e>
 8000e72:	4643      	mov	r3, r8
 8000e74:	08d8      	lsrs	r0, r3, #3
 8000e76:	464b      	mov	r3, r9
 8000e78:	464a      	mov	r2, r9
 8000e7a:	075b      	lsls	r3, r3, #29
 8000e7c:	4665      	mov	r5, ip
 8000e7e:	4303      	orrs	r3, r0
 8000e80:	08d1      	lsrs	r1, r2, #3
 8000e82:	e6b9      	b.n	8000bf8 <__aeabi_dadd+0x2a4>
 8000e84:	4643      	mov	r3, r8
 8000e86:	08d8      	lsrs	r0, r3, #3
 8000e88:	464b      	mov	r3, r9
 8000e8a:	464a      	mov	r2, r9
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	4303      	orrs	r3, r0
 8000e90:	08d1      	lsrs	r1, r2, #3
 8000e92:	e6b1      	b.n	8000bf8 <__aeabi_dadd+0x2a4>
 8000e94:	4319      	orrs	r1, r3
 8000e96:	000c      	movs	r4, r1
 8000e98:	1e63      	subs	r3, r4, #1
 8000e9a:	419c      	sbcs	r4, r3
 8000e9c:	e6eb      	b.n	8000c76 <__aeabi_dadd+0x322>
 8000e9e:	003c      	movs	r4, r7
 8000ea0:	000d      	movs	r5, r1
 8000ea2:	3c20      	subs	r4, #32
 8000ea4:	40e5      	lsrs	r5, r4
 8000ea6:	2f20      	cmp	r7, #32
 8000ea8:	d003      	beq.n	8000eb2 <__aeabi_dadd+0x55e>
 8000eaa:	2440      	movs	r4, #64	; 0x40
 8000eac:	1be4      	subs	r4, r4, r7
 8000eae:	40a1      	lsls	r1, r4
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	001c      	movs	r4, r3
 8000eb4:	1e63      	subs	r3, r4, #1
 8000eb6:	419c      	sbcs	r4, r3
 8000eb8:	432c      	orrs	r4, r5
 8000eba:	e770      	b.n	8000d9e <__aeabi_dadd+0x44a>
 8000ebc:	2a00      	cmp	r2, #0
 8000ebe:	d0e1      	beq.n	8000e84 <__aeabi_dadd+0x530>
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	4302      	orrs	r2, r0
 8000ec4:	d0c1      	beq.n	8000e4a <__aeabi_dadd+0x4f6>
 8000ec6:	074a      	lsls	r2, r1, #29
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	08c9      	lsrs	r1, r1, #3
 8000ed0:	0312      	lsls	r2, r2, #12
 8000ed2:	4211      	tst	r1, r2
 8000ed4:	d008      	beq.n	8000ee8 <__aeabi_dadd+0x594>
 8000ed6:	4648      	mov	r0, r9
 8000ed8:	08c4      	lsrs	r4, r0, #3
 8000eda:	4214      	tst	r4, r2
 8000edc:	d104      	bne.n	8000ee8 <__aeabi_dadd+0x594>
 8000ede:	4643      	mov	r3, r8
 8000ee0:	0021      	movs	r1, r4
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	0742      	lsls	r2, r0, #29
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	0f5a      	lsrs	r2, r3, #29
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	0752      	lsls	r2, r2, #29
 8000eee:	08db      	lsrs	r3, r3, #3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	e681      	b.n	8000bf8 <__aeabi_dadd+0x2a4>
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dadd+0x5a8>
 8000efa:	e714      	b.n	8000d26 <__aeabi_dadd+0x3d2>
 8000efc:	464b      	mov	r3, r9
 8000efe:	464a      	mov	r2, r9
 8000f00:	08c0      	lsrs	r0, r0, #3
 8000f02:	075b      	lsls	r3, r3, #29
 8000f04:	4665      	mov	r5, ip
 8000f06:	4303      	orrs	r3, r0
 8000f08:	08d1      	lsrs	r1, r2, #3
 8000f0a:	e655      	b.n	8000bb8 <__aeabi_dadd+0x264>
 8000f0c:	1ac4      	subs	r4, r0, r3
 8000f0e:	45a0      	cmp	r8, r4
 8000f10:	4180      	sbcs	r0, r0
 8000f12:	464b      	mov	r3, r9
 8000f14:	4240      	negs	r0, r0
 8000f16:	1a59      	subs	r1, r3, r1
 8000f18:	1a0b      	subs	r3, r1, r0
 8000f1a:	469a      	mov	sl, r3
 8000f1c:	4665      	mov	r5, ip
 8000f1e:	2601      	movs	r6, #1
 8000f20:	e564      	b.n	80009ec <__aeabi_dadd+0x98>
 8000f22:	1a1c      	subs	r4, r3, r0
 8000f24:	464a      	mov	r2, r9
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	4180      	sbcs	r0, r0
 8000f2a:	1a8a      	subs	r2, r1, r2
 8000f2c:	4240      	negs	r0, r0
 8000f2e:	1a12      	subs	r2, r2, r0
 8000f30:	4692      	mov	sl, r2
 8000f32:	0212      	lsls	r2, r2, #8
 8000f34:	d549      	bpl.n	8000fca <__aeabi_dadd+0x676>
 8000f36:	4642      	mov	r2, r8
 8000f38:	1ad4      	subs	r4, r2, r3
 8000f3a:	45a0      	cmp	r8, r4
 8000f3c:	4180      	sbcs	r0, r0
 8000f3e:	464b      	mov	r3, r9
 8000f40:	4240      	negs	r0, r0
 8000f42:	1a59      	subs	r1, r3, r1
 8000f44:	1a0b      	subs	r3, r1, r0
 8000f46:	469a      	mov	sl, r3
 8000f48:	4665      	mov	r5, ip
 8000f4a:	e57f      	b.n	8000a4c <__aeabi_dadd+0xf8>
 8000f4c:	464b      	mov	r3, r9
 8000f4e:	464a      	mov	r2, r9
 8000f50:	08c0      	lsrs	r0, r0, #3
 8000f52:	075b      	lsls	r3, r3, #29
 8000f54:	4303      	orrs	r3, r0
 8000f56:	08d1      	lsrs	r1, r2, #3
 8000f58:	e62b      	b.n	8000bb2 <__aeabi_dadd+0x25e>
 8000f5a:	464a      	mov	r2, r9
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	4302      	orrs	r2, r0
 8000f60:	d138      	bne.n	8000fd4 <__aeabi_dadd+0x680>
 8000f62:	074a      	lsls	r2, r1, #29
 8000f64:	4313      	orrs	r3, r2
 8000f66:	08c9      	lsrs	r1, r1, #3
 8000f68:	e646      	b.n	8000bf8 <__aeabi_dadd+0x2a4>
 8000f6a:	464b      	mov	r3, r9
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	08c0      	lsrs	r0, r0, #3
 8000f70:	075b      	lsls	r3, r3, #29
 8000f72:	4303      	orrs	r3, r0
 8000f74:	08d1      	lsrs	r1, r2, #3
 8000f76:	e61f      	b.n	8000bb8 <__aeabi_dadd+0x264>
 8000f78:	181c      	adds	r4, r3, r0
 8000f7a:	429c      	cmp	r4, r3
 8000f7c:	419b      	sbcs	r3, r3
 8000f7e:	4449      	add	r1, r9
 8000f80:	468a      	mov	sl, r1
 8000f82:	425b      	negs	r3, r3
 8000f84:	449a      	add	sl, r3
 8000f86:	4653      	mov	r3, sl
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	d400      	bmi.n	8000f8e <__aeabi_dadd+0x63a>
 8000f8c:	e607      	b.n	8000b9e <__aeabi_dadd+0x24a>
 8000f8e:	4652      	mov	r2, sl
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <__aeabi_dadd+0x6bc>)
 8000f92:	2601      	movs	r6, #1
 8000f94:	401a      	ands	r2, r3
 8000f96:	4692      	mov	sl, r2
 8000f98:	e601      	b.n	8000b9e <__aeabi_dadd+0x24a>
 8000f9a:	003c      	movs	r4, r7
 8000f9c:	000e      	movs	r6, r1
 8000f9e:	3c20      	subs	r4, #32
 8000fa0:	40e6      	lsrs	r6, r4
 8000fa2:	2f20      	cmp	r7, #32
 8000fa4:	d003      	beq.n	8000fae <__aeabi_dadd+0x65a>
 8000fa6:	2440      	movs	r4, #64	; 0x40
 8000fa8:	1be4      	subs	r4, r4, r7
 8000faa:	40a1      	lsls	r1, r4
 8000fac:	430b      	orrs	r3, r1
 8000fae:	001c      	movs	r4, r3
 8000fb0:	1e63      	subs	r3, r4, #1
 8000fb2:	419c      	sbcs	r4, r3
 8000fb4:	4334      	orrs	r4, r6
 8000fb6:	e65e      	b.n	8000c76 <__aeabi_dadd+0x322>
 8000fb8:	4443      	add	r3, r8
 8000fba:	4283      	cmp	r3, r0
 8000fbc:	4180      	sbcs	r0, r0
 8000fbe:	4449      	add	r1, r9
 8000fc0:	468a      	mov	sl, r1
 8000fc2:	4240      	negs	r0, r0
 8000fc4:	001c      	movs	r4, r3
 8000fc6:	4482      	add	sl, r0
 8000fc8:	e6bc      	b.n	8000d44 <__aeabi_dadd+0x3f0>
 8000fca:	4653      	mov	r3, sl
 8000fcc:	4323      	orrs	r3, r4
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_dadd+0x67e>
 8000fd0:	e6a9      	b.n	8000d26 <__aeabi_dadd+0x3d2>
 8000fd2:	e5e4      	b.n	8000b9e <__aeabi_dadd+0x24a>
 8000fd4:	074a      	lsls	r2, r1, #29
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	08c9      	lsrs	r1, r1, #3
 8000fdc:	0312      	lsls	r2, r2, #12
 8000fde:	4211      	tst	r1, r2
 8000fe0:	d009      	beq.n	8000ff6 <__aeabi_dadd+0x6a2>
 8000fe2:	4648      	mov	r0, r9
 8000fe4:	08c4      	lsrs	r4, r0, #3
 8000fe6:	4214      	tst	r4, r2
 8000fe8:	d105      	bne.n	8000ff6 <__aeabi_dadd+0x6a2>
 8000fea:	4643      	mov	r3, r8
 8000fec:	4665      	mov	r5, ip
 8000fee:	0021      	movs	r1, r4
 8000ff0:	08db      	lsrs	r3, r3, #3
 8000ff2:	0742      	lsls	r2, r0, #29
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	0f5a      	lsrs	r2, r3, #29
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	0752      	lsls	r2, r2, #29
 8000ffe:	4313      	orrs	r3, r2
 8001000:	e5fa      	b.n	8000bf8 <__aeabi_dadd+0x2a4>
 8001002:	2300      	movs	r3, #0
 8001004:	4a01      	ldr	r2, [pc, #4]	; (800100c <__aeabi_dadd+0x6b8>)
 8001006:	001c      	movs	r4, r3
 8001008:	e540      	b.n	8000a8c <__aeabi_dadd+0x138>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	000007ff 	.word	0x000007ff
 8001010:	ff7fffff 	.word	0xff7fffff

08001014 <__aeabi_ddiv>:
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	4657      	mov	r7, sl
 8001018:	464e      	mov	r6, r9
 800101a:	4645      	mov	r5, r8
 800101c:	46de      	mov	lr, fp
 800101e:	b5e0      	push	{r5, r6, r7, lr}
 8001020:	030c      	lsls	r4, r1, #12
 8001022:	001f      	movs	r7, r3
 8001024:	004b      	lsls	r3, r1, #1
 8001026:	4681      	mov	r9, r0
 8001028:	4692      	mov	sl, r2
 800102a:	0005      	movs	r5, r0
 800102c:	b085      	sub	sp, #20
 800102e:	0b24      	lsrs	r4, r4, #12
 8001030:	0d5b      	lsrs	r3, r3, #21
 8001032:	0fce      	lsrs	r6, r1, #31
 8001034:	2b00      	cmp	r3, #0
 8001036:	d100      	bne.n	800103a <__aeabi_ddiv+0x26>
 8001038:	e152      	b.n	80012e0 <__aeabi_ddiv+0x2cc>
 800103a:	4ad2      	ldr	r2, [pc, #840]	; (8001384 <__aeabi_ddiv+0x370>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d100      	bne.n	8001042 <__aeabi_ddiv+0x2e>
 8001040:	e16e      	b.n	8001320 <__aeabi_ddiv+0x30c>
 8001042:	0f42      	lsrs	r2, r0, #29
 8001044:	00e4      	lsls	r4, r4, #3
 8001046:	4314      	orrs	r4, r2
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	0412      	lsls	r2, r2, #16
 800104c:	4322      	orrs	r2, r4
 800104e:	4690      	mov	r8, r2
 8001050:	4acd      	ldr	r2, [pc, #820]	; (8001388 <__aeabi_ddiv+0x374>)
 8001052:	00c5      	lsls	r5, r0, #3
 8001054:	4693      	mov	fp, r2
 8001056:	449b      	add	fp, r3
 8001058:	2300      	movs	r3, #0
 800105a:	4699      	mov	r9, r3
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	033c      	lsls	r4, r7, #12
 8001060:	007b      	lsls	r3, r7, #1
 8001062:	4650      	mov	r0, sl
 8001064:	0b24      	lsrs	r4, r4, #12
 8001066:	0d5b      	lsrs	r3, r3, #21
 8001068:	0fff      	lsrs	r7, r7, #31
 800106a:	2b00      	cmp	r3, #0
 800106c:	d100      	bne.n	8001070 <__aeabi_ddiv+0x5c>
 800106e:	e11a      	b.n	80012a6 <__aeabi_ddiv+0x292>
 8001070:	4ac4      	ldr	r2, [pc, #784]	; (8001384 <__aeabi_ddiv+0x370>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x64>
 8001076:	e15e      	b.n	8001336 <__aeabi_ddiv+0x322>
 8001078:	0f42      	lsrs	r2, r0, #29
 800107a:	00e4      	lsls	r4, r4, #3
 800107c:	4322      	orrs	r2, r4
 800107e:	2480      	movs	r4, #128	; 0x80
 8001080:	0424      	lsls	r4, r4, #16
 8001082:	4314      	orrs	r4, r2
 8001084:	4ac0      	ldr	r2, [pc, #768]	; (8001388 <__aeabi_ddiv+0x374>)
 8001086:	00c1      	lsls	r1, r0, #3
 8001088:	4694      	mov	ip, r2
 800108a:	465a      	mov	r2, fp
 800108c:	4463      	add	r3, ip
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	469b      	mov	fp, r3
 8001092:	2000      	movs	r0, #0
 8001094:	0033      	movs	r3, r6
 8001096:	407b      	eors	r3, r7
 8001098:	469a      	mov	sl, r3
 800109a:	464b      	mov	r3, r9
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d827      	bhi.n	80010f0 <__aeabi_ddiv+0xdc>
 80010a0:	4aba      	ldr	r2, [pc, #744]	; (800138c <__aeabi_ddiv+0x378>)
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	58d3      	ldr	r3, [r2, r3]
 80010a6:	469f      	mov	pc, r3
 80010a8:	46b2      	mov	sl, r6
 80010aa:	9b00      	ldr	r3, [sp, #0]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d016      	beq.n	80010de <__aeabi_ddiv+0xca>
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0xa2>
 80010b4:	e287      	b.n	80015c6 <__aeabi_ddiv+0x5b2>
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d000      	beq.n	80010bc <__aeabi_ddiv+0xa8>
 80010ba:	e0d5      	b.n	8001268 <__aeabi_ddiv+0x254>
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	2500      	movs	r5, #0
 80010c2:	051b      	lsls	r3, r3, #20
 80010c4:	4313      	orrs	r3, r2
 80010c6:	4652      	mov	r2, sl
 80010c8:	07d2      	lsls	r2, r2, #31
 80010ca:	4313      	orrs	r3, r2
 80010cc:	0028      	movs	r0, r5
 80010ce:	0019      	movs	r1, r3
 80010d0:	b005      	add	sp, #20
 80010d2:	bcf0      	pop	{r4, r5, r6, r7}
 80010d4:	46bb      	mov	fp, r7
 80010d6:	46b2      	mov	sl, r6
 80010d8:	46a9      	mov	r9, r5
 80010da:	46a0      	mov	r8, r4
 80010dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010de:	2200      	movs	r2, #0
 80010e0:	2500      	movs	r5, #0
 80010e2:	4ba8      	ldr	r3, [pc, #672]	; (8001384 <__aeabi_ddiv+0x370>)
 80010e4:	e7ed      	b.n	80010c2 <__aeabi_ddiv+0xae>
 80010e6:	46ba      	mov	sl, r7
 80010e8:	46a0      	mov	r8, r4
 80010ea:	000d      	movs	r5, r1
 80010ec:	9000      	str	r0, [sp, #0]
 80010ee:	e7dc      	b.n	80010aa <__aeabi_ddiv+0x96>
 80010f0:	4544      	cmp	r4, r8
 80010f2:	d200      	bcs.n	80010f6 <__aeabi_ddiv+0xe2>
 80010f4:	e1c4      	b.n	8001480 <__aeabi_ddiv+0x46c>
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0xe6>
 80010f8:	e1bf      	b.n	800147a <__aeabi_ddiv+0x466>
 80010fa:	2301      	movs	r3, #1
 80010fc:	425b      	negs	r3, r3
 80010fe:	469c      	mov	ip, r3
 8001100:	002e      	movs	r6, r5
 8001102:	4640      	mov	r0, r8
 8001104:	2500      	movs	r5, #0
 8001106:	44e3      	add	fp, ip
 8001108:	0223      	lsls	r3, r4, #8
 800110a:	0e0c      	lsrs	r4, r1, #24
 800110c:	431c      	orrs	r4, r3
 800110e:	0c1b      	lsrs	r3, r3, #16
 8001110:	4699      	mov	r9, r3
 8001112:	0423      	lsls	r3, r4, #16
 8001114:	020a      	lsls	r2, r1, #8
 8001116:	0c1f      	lsrs	r7, r3, #16
 8001118:	4649      	mov	r1, r9
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	9701      	str	r7, [sp, #4]
 800111e:	f7ff f893 	bl	8000248 <__aeabi_uidivmod>
 8001122:	0002      	movs	r2, r0
 8001124:	437a      	muls	r2, r7
 8001126:	040b      	lsls	r3, r1, #16
 8001128:	0c31      	lsrs	r1, r6, #16
 800112a:	4680      	mov	r8, r0
 800112c:	4319      	orrs	r1, r3
 800112e:	428a      	cmp	r2, r1
 8001130:	d907      	bls.n	8001142 <__aeabi_ddiv+0x12e>
 8001132:	2301      	movs	r3, #1
 8001134:	425b      	negs	r3, r3
 8001136:	469c      	mov	ip, r3
 8001138:	1909      	adds	r1, r1, r4
 800113a:	44e0      	add	r8, ip
 800113c:	428c      	cmp	r4, r1
 800113e:	d800      	bhi.n	8001142 <__aeabi_ddiv+0x12e>
 8001140:	e201      	b.n	8001546 <__aeabi_ddiv+0x532>
 8001142:	1a88      	subs	r0, r1, r2
 8001144:	4649      	mov	r1, r9
 8001146:	f7ff f87f 	bl	8000248 <__aeabi_uidivmod>
 800114a:	9a01      	ldr	r2, [sp, #4]
 800114c:	0436      	lsls	r6, r6, #16
 800114e:	4342      	muls	r2, r0
 8001150:	0409      	lsls	r1, r1, #16
 8001152:	0c36      	lsrs	r6, r6, #16
 8001154:	0003      	movs	r3, r0
 8001156:	430e      	orrs	r6, r1
 8001158:	42b2      	cmp	r2, r6
 800115a:	d904      	bls.n	8001166 <__aeabi_ddiv+0x152>
 800115c:	1936      	adds	r6, r6, r4
 800115e:	3b01      	subs	r3, #1
 8001160:	42b4      	cmp	r4, r6
 8001162:	d800      	bhi.n	8001166 <__aeabi_ddiv+0x152>
 8001164:	e1e9      	b.n	800153a <__aeabi_ddiv+0x526>
 8001166:	1ab0      	subs	r0, r6, r2
 8001168:	4642      	mov	r2, r8
 800116a:	9e00      	ldr	r6, [sp, #0]
 800116c:	0412      	lsls	r2, r2, #16
 800116e:	431a      	orrs	r2, r3
 8001170:	0c33      	lsrs	r3, r6, #16
 8001172:	001f      	movs	r7, r3
 8001174:	0c11      	lsrs	r1, r2, #16
 8001176:	4690      	mov	r8, r2
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	0413      	lsls	r3, r2, #16
 800117c:	0432      	lsls	r2, r6, #16
 800117e:	0c16      	lsrs	r6, r2, #16
 8001180:	0032      	movs	r2, r6
 8001182:	0c1b      	lsrs	r3, r3, #16
 8001184:	435a      	muls	r2, r3
 8001186:	9603      	str	r6, [sp, #12]
 8001188:	437b      	muls	r3, r7
 800118a:	434e      	muls	r6, r1
 800118c:	4379      	muls	r1, r7
 800118e:	0c17      	lsrs	r7, r2, #16
 8001190:	46bc      	mov	ip, r7
 8001192:	199b      	adds	r3, r3, r6
 8001194:	4463      	add	r3, ip
 8001196:	429e      	cmp	r6, r3
 8001198:	d903      	bls.n	80011a2 <__aeabi_ddiv+0x18e>
 800119a:	2680      	movs	r6, #128	; 0x80
 800119c:	0276      	lsls	r6, r6, #9
 800119e:	46b4      	mov	ip, r6
 80011a0:	4461      	add	r1, ip
 80011a2:	0c1e      	lsrs	r6, r3, #16
 80011a4:	1871      	adds	r1, r6, r1
 80011a6:	0416      	lsls	r6, r2, #16
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	0c36      	lsrs	r6, r6, #16
 80011ac:	199e      	adds	r6, r3, r6
 80011ae:	4288      	cmp	r0, r1
 80011b0:	d302      	bcc.n	80011b8 <__aeabi_ddiv+0x1a4>
 80011b2:	d112      	bne.n	80011da <__aeabi_ddiv+0x1c6>
 80011b4:	42b5      	cmp	r5, r6
 80011b6:	d210      	bcs.n	80011da <__aeabi_ddiv+0x1c6>
 80011b8:	4643      	mov	r3, r8
 80011ba:	1e5a      	subs	r2, r3, #1
 80011bc:	9b00      	ldr	r3, [sp, #0]
 80011be:	469c      	mov	ip, r3
 80011c0:	4465      	add	r5, ip
 80011c2:	001f      	movs	r7, r3
 80011c4:	429d      	cmp	r5, r3
 80011c6:	419b      	sbcs	r3, r3
 80011c8:	425b      	negs	r3, r3
 80011ca:	191b      	adds	r3, r3, r4
 80011cc:	18c0      	adds	r0, r0, r3
 80011ce:	4284      	cmp	r4, r0
 80011d0:	d200      	bcs.n	80011d4 <__aeabi_ddiv+0x1c0>
 80011d2:	e19e      	b.n	8001512 <__aeabi_ddiv+0x4fe>
 80011d4:	d100      	bne.n	80011d8 <__aeabi_ddiv+0x1c4>
 80011d6:	e199      	b.n	800150c <__aeabi_ddiv+0x4f8>
 80011d8:	4690      	mov	r8, r2
 80011da:	1bae      	subs	r6, r5, r6
 80011dc:	42b5      	cmp	r5, r6
 80011de:	41ad      	sbcs	r5, r5
 80011e0:	1a40      	subs	r0, r0, r1
 80011e2:	426d      	negs	r5, r5
 80011e4:	1b40      	subs	r0, r0, r5
 80011e6:	4284      	cmp	r4, r0
 80011e8:	d100      	bne.n	80011ec <__aeabi_ddiv+0x1d8>
 80011ea:	e1d2      	b.n	8001592 <__aeabi_ddiv+0x57e>
 80011ec:	4649      	mov	r1, r9
 80011ee:	f7ff f82b 	bl	8000248 <__aeabi_uidivmod>
 80011f2:	9a01      	ldr	r2, [sp, #4]
 80011f4:	040b      	lsls	r3, r1, #16
 80011f6:	4342      	muls	r2, r0
 80011f8:	0c31      	lsrs	r1, r6, #16
 80011fa:	0005      	movs	r5, r0
 80011fc:	4319      	orrs	r1, r3
 80011fe:	428a      	cmp	r2, r1
 8001200:	d900      	bls.n	8001204 <__aeabi_ddiv+0x1f0>
 8001202:	e16c      	b.n	80014de <__aeabi_ddiv+0x4ca>
 8001204:	1a88      	subs	r0, r1, r2
 8001206:	4649      	mov	r1, r9
 8001208:	f7ff f81e 	bl	8000248 <__aeabi_uidivmod>
 800120c:	9a01      	ldr	r2, [sp, #4]
 800120e:	0436      	lsls	r6, r6, #16
 8001210:	4342      	muls	r2, r0
 8001212:	0409      	lsls	r1, r1, #16
 8001214:	0c36      	lsrs	r6, r6, #16
 8001216:	0003      	movs	r3, r0
 8001218:	430e      	orrs	r6, r1
 800121a:	42b2      	cmp	r2, r6
 800121c:	d900      	bls.n	8001220 <__aeabi_ddiv+0x20c>
 800121e:	e153      	b.n	80014c8 <__aeabi_ddiv+0x4b4>
 8001220:	9803      	ldr	r0, [sp, #12]
 8001222:	1ab6      	subs	r6, r6, r2
 8001224:	0002      	movs	r2, r0
 8001226:	042d      	lsls	r5, r5, #16
 8001228:	431d      	orrs	r5, r3
 800122a:	9f02      	ldr	r7, [sp, #8]
 800122c:	042b      	lsls	r3, r5, #16
 800122e:	0c1b      	lsrs	r3, r3, #16
 8001230:	435a      	muls	r2, r3
 8001232:	437b      	muls	r3, r7
 8001234:	469c      	mov	ip, r3
 8001236:	0c29      	lsrs	r1, r5, #16
 8001238:	4348      	muls	r0, r1
 800123a:	0c13      	lsrs	r3, r2, #16
 800123c:	4484      	add	ip, r0
 800123e:	4463      	add	r3, ip
 8001240:	4379      	muls	r1, r7
 8001242:	4298      	cmp	r0, r3
 8001244:	d903      	bls.n	800124e <__aeabi_ddiv+0x23a>
 8001246:	2080      	movs	r0, #128	; 0x80
 8001248:	0240      	lsls	r0, r0, #9
 800124a:	4684      	mov	ip, r0
 800124c:	4461      	add	r1, ip
 800124e:	0c18      	lsrs	r0, r3, #16
 8001250:	0412      	lsls	r2, r2, #16
 8001252:	041b      	lsls	r3, r3, #16
 8001254:	0c12      	lsrs	r2, r2, #16
 8001256:	1840      	adds	r0, r0, r1
 8001258:	189b      	adds	r3, r3, r2
 800125a:	4286      	cmp	r6, r0
 800125c:	d200      	bcs.n	8001260 <__aeabi_ddiv+0x24c>
 800125e:	e100      	b.n	8001462 <__aeabi_ddiv+0x44e>
 8001260:	d100      	bne.n	8001264 <__aeabi_ddiv+0x250>
 8001262:	e0fb      	b.n	800145c <__aeabi_ddiv+0x448>
 8001264:	2301      	movs	r3, #1
 8001266:	431d      	orrs	r5, r3
 8001268:	4b49      	ldr	r3, [pc, #292]	; (8001390 <__aeabi_ddiv+0x37c>)
 800126a:	445b      	add	r3, fp
 800126c:	2b00      	cmp	r3, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_ddiv+0x25e>
 8001270:	e0aa      	b.n	80013c8 <__aeabi_ddiv+0x3b4>
 8001272:	076a      	lsls	r2, r5, #29
 8001274:	d000      	beq.n	8001278 <__aeabi_ddiv+0x264>
 8001276:	e13d      	b.n	80014f4 <__aeabi_ddiv+0x4e0>
 8001278:	08e9      	lsrs	r1, r5, #3
 800127a:	4642      	mov	r2, r8
 800127c:	01d2      	lsls	r2, r2, #7
 800127e:	d506      	bpl.n	800128e <__aeabi_ddiv+0x27a>
 8001280:	4642      	mov	r2, r8
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <__aeabi_ddiv+0x380>)
 8001284:	401a      	ands	r2, r3
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	4690      	mov	r8, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	445b      	add	r3, fp
 800128e:	4a42      	ldr	r2, [pc, #264]	; (8001398 <__aeabi_ddiv+0x384>)
 8001290:	4293      	cmp	r3, r2
 8001292:	dd00      	ble.n	8001296 <__aeabi_ddiv+0x282>
 8001294:	e723      	b.n	80010de <__aeabi_ddiv+0xca>
 8001296:	4642      	mov	r2, r8
 8001298:	055b      	lsls	r3, r3, #21
 800129a:	0755      	lsls	r5, r2, #29
 800129c:	0252      	lsls	r2, r2, #9
 800129e:	430d      	orrs	r5, r1
 80012a0:	0b12      	lsrs	r2, r2, #12
 80012a2:	0d5b      	lsrs	r3, r3, #21
 80012a4:	e70d      	b.n	80010c2 <__aeabi_ddiv+0xae>
 80012a6:	4651      	mov	r1, sl
 80012a8:	4321      	orrs	r1, r4
 80012aa:	d100      	bne.n	80012ae <__aeabi_ddiv+0x29a>
 80012ac:	e07c      	b.n	80013a8 <__aeabi_ddiv+0x394>
 80012ae:	2c00      	cmp	r4, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_ddiv+0x2a0>
 80012b2:	e0fb      	b.n	80014ac <__aeabi_ddiv+0x498>
 80012b4:	0020      	movs	r0, r4
 80012b6:	f001 fa63 	bl	8002780 <__clzsi2>
 80012ba:	0002      	movs	r2, r0
 80012bc:	3a0b      	subs	r2, #11
 80012be:	231d      	movs	r3, #29
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	4652      	mov	r2, sl
 80012c4:	0001      	movs	r1, r0
 80012c6:	40da      	lsrs	r2, r3
 80012c8:	4653      	mov	r3, sl
 80012ca:	3908      	subs	r1, #8
 80012cc:	408b      	lsls	r3, r1
 80012ce:	408c      	lsls	r4, r1
 80012d0:	0019      	movs	r1, r3
 80012d2:	4314      	orrs	r4, r2
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <__aeabi_ddiv+0x388>)
 80012d6:	4458      	add	r0, fp
 80012d8:	469b      	mov	fp, r3
 80012da:	4483      	add	fp, r0
 80012dc:	2000      	movs	r0, #0
 80012de:	e6d9      	b.n	8001094 <__aeabi_ddiv+0x80>
 80012e0:	0003      	movs	r3, r0
 80012e2:	4323      	orrs	r3, r4
 80012e4:	4698      	mov	r8, r3
 80012e6:	d044      	beq.n	8001372 <__aeabi_ddiv+0x35e>
 80012e8:	2c00      	cmp	r4, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_ddiv+0x2da>
 80012ec:	e0cf      	b.n	800148e <__aeabi_ddiv+0x47a>
 80012ee:	0020      	movs	r0, r4
 80012f0:	f001 fa46 	bl	8002780 <__clzsi2>
 80012f4:	0001      	movs	r1, r0
 80012f6:	0002      	movs	r2, r0
 80012f8:	390b      	subs	r1, #11
 80012fa:	231d      	movs	r3, #29
 80012fc:	1a5b      	subs	r3, r3, r1
 80012fe:	4649      	mov	r1, r9
 8001300:	0010      	movs	r0, r2
 8001302:	40d9      	lsrs	r1, r3
 8001304:	3808      	subs	r0, #8
 8001306:	4084      	lsls	r4, r0
 8001308:	000b      	movs	r3, r1
 800130a:	464d      	mov	r5, r9
 800130c:	4323      	orrs	r3, r4
 800130e:	4698      	mov	r8, r3
 8001310:	4085      	lsls	r5, r0
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <__aeabi_ddiv+0x38c>)
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	469b      	mov	fp, r3
 8001318:	2300      	movs	r3, #0
 800131a:	4699      	mov	r9, r3
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	e69e      	b.n	800105e <__aeabi_ddiv+0x4a>
 8001320:	0002      	movs	r2, r0
 8001322:	4322      	orrs	r2, r4
 8001324:	4690      	mov	r8, r2
 8001326:	d11d      	bne.n	8001364 <__aeabi_ddiv+0x350>
 8001328:	2208      	movs	r2, #8
 800132a:	469b      	mov	fp, r3
 800132c:	2302      	movs	r3, #2
 800132e:	2500      	movs	r5, #0
 8001330:	4691      	mov	r9, r2
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	e693      	b.n	800105e <__aeabi_ddiv+0x4a>
 8001336:	4651      	mov	r1, sl
 8001338:	4321      	orrs	r1, r4
 800133a:	d109      	bne.n	8001350 <__aeabi_ddiv+0x33c>
 800133c:	2302      	movs	r3, #2
 800133e:	464a      	mov	r2, r9
 8001340:	431a      	orrs	r2, r3
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <__aeabi_ddiv+0x390>)
 8001344:	4691      	mov	r9, r2
 8001346:	469c      	mov	ip, r3
 8001348:	2400      	movs	r4, #0
 800134a:	2002      	movs	r0, #2
 800134c:	44e3      	add	fp, ip
 800134e:	e6a1      	b.n	8001094 <__aeabi_ddiv+0x80>
 8001350:	2303      	movs	r3, #3
 8001352:	464a      	mov	r2, r9
 8001354:	431a      	orrs	r2, r3
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <__aeabi_ddiv+0x390>)
 8001358:	4691      	mov	r9, r2
 800135a:	469c      	mov	ip, r3
 800135c:	4651      	mov	r1, sl
 800135e:	2003      	movs	r0, #3
 8001360:	44e3      	add	fp, ip
 8001362:	e697      	b.n	8001094 <__aeabi_ddiv+0x80>
 8001364:	220c      	movs	r2, #12
 8001366:	469b      	mov	fp, r3
 8001368:	2303      	movs	r3, #3
 800136a:	46a0      	mov	r8, r4
 800136c:	4691      	mov	r9, r2
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	e675      	b.n	800105e <__aeabi_ddiv+0x4a>
 8001372:	2304      	movs	r3, #4
 8001374:	4699      	mov	r9, r3
 8001376:	2300      	movs	r3, #0
 8001378:	469b      	mov	fp, r3
 800137a:	3301      	adds	r3, #1
 800137c:	2500      	movs	r5, #0
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	e66d      	b.n	800105e <__aeabi_ddiv+0x4a>
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	000007ff 	.word	0x000007ff
 8001388:	fffffc01 	.word	0xfffffc01
 800138c:	0800aa78 	.word	0x0800aa78
 8001390:	000003ff 	.word	0x000003ff
 8001394:	feffffff 	.word	0xfeffffff
 8001398:	000007fe 	.word	0x000007fe
 800139c:	000003f3 	.word	0x000003f3
 80013a0:	fffffc0d 	.word	0xfffffc0d
 80013a4:	fffff801 	.word	0xfffff801
 80013a8:	464a      	mov	r2, r9
 80013aa:	2301      	movs	r3, #1
 80013ac:	431a      	orrs	r2, r3
 80013ae:	4691      	mov	r9, r2
 80013b0:	2400      	movs	r4, #0
 80013b2:	2001      	movs	r0, #1
 80013b4:	e66e      	b.n	8001094 <__aeabi_ddiv+0x80>
 80013b6:	2300      	movs	r3, #0
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	469a      	mov	sl, r3
 80013bc:	2500      	movs	r5, #0
 80013be:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <__aeabi_ddiv+0x5cc>)
 80013c0:	0312      	lsls	r2, r2, #12
 80013c2:	e67e      	b.n	80010c2 <__aeabi_ddiv+0xae>
 80013c4:	2501      	movs	r5, #1
 80013c6:	426d      	negs	r5, r5
 80013c8:	2201      	movs	r2, #1
 80013ca:	1ad2      	subs	r2, r2, r3
 80013cc:	2a38      	cmp	r2, #56	; 0x38
 80013ce:	dd00      	ble.n	80013d2 <__aeabi_ddiv+0x3be>
 80013d0:	e674      	b.n	80010bc <__aeabi_ddiv+0xa8>
 80013d2:	2a1f      	cmp	r2, #31
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_ddiv+0x3c4>
 80013d6:	e0bd      	b.n	8001554 <__aeabi_ddiv+0x540>
 80013d8:	211f      	movs	r1, #31
 80013da:	4249      	negs	r1, r1
 80013dc:	1acb      	subs	r3, r1, r3
 80013de:	4641      	mov	r1, r8
 80013e0:	40d9      	lsrs	r1, r3
 80013e2:	000b      	movs	r3, r1
 80013e4:	2a20      	cmp	r2, #32
 80013e6:	d004      	beq.n	80013f2 <__aeabi_ddiv+0x3de>
 80013e8:	4641      	mov	r1, r8
 80013ea:	4a7e      	ldr	r2, [pc, #504]	; (80015e4 <__aeabi_ddiv+0x5d0>)
 80013ec:	445a      	add	r2, fp
 80013ee:	4091      	lsls	r1, r2
 80013f0:	430d      	orrs	r5, r1
 80013f2:	0029      	movs	r1, r5
 80013f4:	1e4a      	subs	r2, r1, #1
 80013f6:	4191      	sbcs	r1, r2
 80013f8:	4319      	orrs	r1, r3
 80013fa:	2307      	movs	r3, #7
 80013fc:	001d      	movs	r5, r3
 80013fe:	2200      	movs	r2, #0
 8001400:	400d      	ands	r5, r1
 8001402:	420b      	tst	r3, r1
 8001404:	d100      	bne.n	8001408 <__aeabi_ddiv+0x3f4>
 8001406:	e0d0      	b.n	80015aa <__aeabi_ddiv+0x596>
 8001408:	220f      	movs	r2, #15
 800140a:	2300      	movs	r3, #0
 800140c:	400a      	ands	r2, r1
 800140e:	2a04      	cmp	r2, #4
 8001410:	d100      	bne.n	8001414 <__aeabi_ddiv+0x400>
 8001412:	e0c7      	b.n	80015a4 <__aeabi_ddiv+0x590>
 8001414:	1d0a      	adds	r2, r1, #4
 8001416:	428a      	cmp	r2, r1
 8001418:	4189      	sbcs	r1, r1
 800141a:	4249      	negs	r1, r1
 800141c:	185b      	adds	r3, r3, r1
 800141e:	0011      	movs	r1, r2
 8001420:	021a      	lsls	r2, r3, #8
 8001422:	d400      	bmi.n	8001426 <__aeabi_ddiv+0x412>
 8001424:	e0be      	b.n	80015a4 <__aeabi_ddiv+0x590>
 8001426:	2301      	movs	r3, #1
 8001428:	2200      	movs	r2, #0
 800142a:	2500      	movs	r5, #0
 800142c:	e649      	b.n	80010c2 <__aeabi_ddiv+0xae>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4213      	tst	r3, r2
 8001436:	d008      	beq.n	800144a <__aeabi_ddiv+0x436>
 8001438:	4214      	tst	r4, r2
 800143a:	d106      	bne.n	800144a <__aeabi_ddiv+0x436>
 800143c:	4322      	orrs	r2, r4
 800143e:	0312      	lsls	r2, r2, #12
 8001440:	46ba      	mov	sl, r7
 8001442:	000d      	movs	r5, r1
 8001444:	4b66      	ldr	r3, [pc, #408]	; (80015e0 <__aeabi_ddiv+0x5cc>)
 8001446:	0b12      	lsrs	r2, r2, #12
 8001448:	e63b      	b.n	80010c2 <__aeabi_ddiv+0xae>
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	4643      	mov	r3, r8
 800144e:	0312      	lsls	r2, r2, #12
 8001450:	431a      	orrs	r2, r3
 8001452:	0312      	lsls	r2, r2, #12
 8001454:	46b2      	mov	sl, r6
 8001456:	4b62      	ldr	r3, [pc, #392]	; (80015e0 <__aeabi_ddiv+0x5cc>)
 8001458:	0b12      	lsrs	r2, r2, #12
 800145a:	e632      	b.n	80010c2 <__aeabi_ddiv+0xae>
 800145c:	2b00      	cmp	r3, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_ddiv+0x44e>
 8001460:	e702      	b.n	8001268 <__aeabi_ddiv+0x254>
 8001462:	19a6      	adds	r6, r4, r6
 8001464:	1e6a      	subs	r2, r5, #1
 8001466:	42a6      	cmp	r6, r4
 8001468:	d200      	bcs.n	800146c <__aeabi_ddiv+0x458>
 800146a:	e089      	b.n	8001580 <__aeabi_ddiv+0x56c>
 800146c:	4286      	cmp	r6, r0
 800146e:	d200      	bcs.n	8001472 <__aeabi_ddiv+0x45e>
 8001470:	e09f      	b.n	80015b2 <__aeabi_ddiv+0x59e>
 8001472:	d100      	bne.n	8001476 <__aeabi_ddiv+0x462>
 8001474:	e0af      	b.n	80015d6 <__aeabi_ddiv+0x5c2>
 8001476:	0015      	movs	r5, r2
 8001478:	e6f4      	b.n	8001264 <__aeabi_ddiv+0x250>
 800147a:	42a9      	cmp	r1, r5
 800147c:	d900      	bls.n	8001480 <__aeabi_ddiv+0x46c>
 800147e:	e63c      	b.n	80010fa <__aeabi_ddiv+0xe6>
 8001480:	4643      	mov	r3, r8
 8001482:	07de      	lsls	r6, r3, #31
 8001484:	0858      	lsrs	r0, r3, #1
 8001486:	086b      	lsrs	r3, r5, #1
 8001488:	431e      	orrs	r6, r3
 800148a:	07ed      	lsls	r5, r5, #31
 800148c:	e63c      	b.n	8001108 <__aeabi_ddiv+0xf4>
 800148e:	f001 f977 	bl	8002780 <__clzsi2>
 8001492:	0001      	movs	r1, r0
 8001494:	0002      	movs	r2, r0
 8001496:	3115      	adds	r1, #21
 8001498:	3220      	adds	r2, #32
 800149a:	291c      	cmp	r1, #28
 800149c:	dc00      	bgt.n	80014a0 <__aeabi_ddiv+0x48c>
 800149e:	e72c      	b.n	80012fa <__aeabi_ddiv+0x2e6>
 80014a0:	464b      	mov	r3, r9
 80014a2:	3808      	subs	r0, #8
 80014a4:	4083      	lsls	r3, r0
 80014a6:	2500      	movs	r5, #0
 80014a8:	4698      	mov	r8, r3
 80014aa:	e732      	b.n	8001312 <__aeabi_ddiv+0x2fe>
 80014ac:	f001 f968 	bl	8002780 <__clzsi2>
 80014b0:	0003      	movs	r3, r0
 80014b2:	001a      	movs	r2, r3
 80014b4:	3215      	adds	r2, #21
 80014b6:	3020      	adds	r0, #32
 80014b8:	2a1c      	cmp	r2, #28
 80014ba:	dc00      	bgt.n	80014be <__aeabi_ddiv+0x4aa>
 80014bc:	e6ff      	b.n	80012be <__aeabi_ddiv+0x2aa>
 80014be:	4654      	mov	r4, sl
 80014c0:	3b08      	subs	r3, #8
 80014c2:	2100      	movs	r1, #0
 80014c4:	409c      	lsls	r4, r3
 80014c6:	e705      	b.n	80012d4 <__aeabi_ddiv+0x2c0>
 80014c8:	1936      	adds	r6, r6, r4
 80014ca:	3b01      	subs	r3, #1
 80014cc:	42b4      	cmp	r4, r6
 80014ce:	d900      	bls.n	80014d2 <__aeabi_ddiv+0x4be>
 80014d0:	e6a6      	b.n	8001220 <__aeabi_ddiv+0x20c>
 80014d2:	42b2      	cmp	r2, r6
 80014d4:	d800      	bhi.n	80014d8 <__aeabi_ddiv+0x4c4>
 80014d6:	e6a3      	b.n	8001220 <__aeabi_ddiv+0x20c>
 80014d8:	1e83      	subs	r3, r0, #2
 80014da:	1936      	adds	r6, r6, r4
 80014dc:	e6a0      	b.n	8001220 <__aeabi_ddiv+0x20c>
 80014de:	1909      	adds	r1, r1, r4
 80014e0:	3d01      	subs	r5, #1
 80014e2:	428c      	cmp	r4, r1
 80014e4:	d900      	bls.n	80014e8 <__aeabi_ddiv+0x4d4>
 80014e6:	e68d      	b.n	8001204 <__aeabi_ddiv+0x1f0>
 80014e8:	428a      	cmp	r2, r1
 80014ea:	d800      	bhi.n	80014ee <__aeabi_ddiv+0x4da>
 80014ec:	e68a      	b.n	8001204 <__aeabi_ddiv+0x1f0>
 80014ee:	1e85      	subs	r5, r0, #2
 80014f0:	1909      	adds	r1, r1, r4
 80014f2:	e687      	b.n	8001204 <__aeabi_ddiv+0x1f0>
 80014f4:	220f      	movs	r2, #15
 80014f6:	402a      	ands	r2, r5
 80014f8:	2a04      	cmp	r2, #4
 80014fa:	d100      	bne.n	80014fe <__aeabi_ddiv+0x4ea>
 80014fc:	e6bc      	b.n	8001278 <__aeabi_ddiv+0x264>
 80014fe:	1d29      	adds	r1, r5, #4
 8001500:	42a9      	cmp	r1, r5
 8001502:	41ad      	sbcs	r5, r5
 8001504:	426d      	negs	r5, r5
 8001506:	08c9      	lsrs	r1, r1, #3
 8001508:	44a8      	add	r8, r5
 800150a:	e6b6      	b.n	800127a <__aeabi_ddiv+0x266>
 800150c:	42af      	cmp	r7, r5
 800150e:	d900      	bls.n	8001512 <__aeabi_ddiv+0x4fe>
 8001510:	e662      	b.n	80011d8 <__aeabi_ddiv+0x1c4>
 8001512:	4281      	cmp	r1, r0
 8001514:	d804      	bhi.n	8001520 <__aeabi_ddiv+0x50c>
 8001516:	d000      	beq.n	800151a <__aeabi_ddiv+0x506>
 8001518:	e65e      	b.n	80011d8 <__aeabi_ddiv+0x1c4>
 800151a:	42ae      	cmp	r6, r5
 800151c:	d800      	bhi.n	8001520 <__aeabi_ddiv+0x50c>
 800151e:	e65b      	b.n	80011d8 <__aeabi_ddiv+0x1c4>
 8001520:	2302      	movs	r3, #2
 8001522:	425b      	negs	r3, r3
 8001524:	469c      	mov	ip, r3
 8001526:	9b00      	ldr	r3, [sp, #0]
 8001528:	44e0      	add	r8, ip
 800152a:	469c      	mov	ip, r3
 800152c:	4465      	add	r5, ip
 800152e:	429d      	cmp	r5, r3
 8001530:	419b      	sbcs	r3, r3
 8001532:	425b      	negs	r3, r3
 8001534:	191b      	adds	r3, r3, r4
 8001536:	18c0      	adds	r0, r0, r3
 8001538:	e64f      	b.n	80011da <__aeabi_ddiv+0x1c6>
 800153a:	42b2      	cmp	r2, r6
 800153c:	d800      	bhi.n	8001540 <__aeabi_ddiv+0x52c>
 800153e:	e612      	b.n	8001166 <__aeabi_ddiv+0x152>
 8001540:	1e83      	subs	r3, r0, #2
 8001542:	1936      	adds	r6, r6, r4
 8001544:	e60f      	b.n	8001166 <__aeabi_ddiv+0x152>
 8001546:	428a      	cmp	r2, r1
 8001548:	d800      	bhi.n	800154c <__aeabi_ddiv+0x538>
 800154a:	e5fa      	b.n	8001142 <__aeabi_ddiv+0x12e>
 800154c:	1e83      	subs	r3, r0, #2
 800154e:	4698      	mov	r8, r3
 8001550:	1909      	adds	r1, r1, r4
 8001552:	e5f6      	b.n	8001142 <__aeabi_ddiv+0x12e>
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <__aeabi_ddiv+0x5d4>)
 8001556:	0028      	movs	r0, r5
 8001558:	445b      	add	r3, fp
 800155a:	4641      	mov	r1, r8
 800155c:	409d      	lsls	r5, r3
 800155e:	4099      	lsls	r1, r3
 8001560:	40d0      	lsrs	r0, r2
 8001562:	1e6b      	subs	r3, r5, #1
 8001564:	419d      	sbcs	r5, r3
 8001566:	4643      	mov	r3, r8
 8001568:	4301      	orrs	r1, r0
 800156a:	4329      	orrs	r1, r5
 800156c:	40d3      	lsrs	r3, r2
 800156e:	074a      	lsls	r2, r1, #29
 8001570:	d100      	bne.n	8001574 <__aeabi_ddiv+0x560>
 8001572:	e755      	b.n	8001420 <__aeabi_ddiv+0x40c>
 8001574:	220f      	movs	r2, #15
 8001576:	400a      	ands	r2, r1
 8001578:	2a04      	cmp	r2, #4
 800157a:	d000      	beq.n	800157e <__aeabi_ddiv+0x56a>
 800157c:	e74a      	b.n	8001414 <__aeabi_ddiv+0x400>
 800157e:	e74f      	b.n	8001420 <__aeabi_ddiv+0x40c>
 8001580:	0015      	movs	r5, r2
 8001582:	4286      	cmp	r6, r0
 8001584:	d000      	beq.n	8001588 <__aeabi_ddiv+0x574>
 8001586:	e66d      	b.n	8001264 <__aeabi_ddiv+0x250>
 8001588:	9a00      	ldr	r2, [sp, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d000      	beq.n	8001590 <__aeabi_ddiv+0x57c>
 800158e:	e669      	b.n	8001264 <__aeabi_ddiv+0x250>
 8001590:	e66a      	b.n	8001268 <__aeabi_ddiv+0x254>
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <__aeabi_ddiv+0x5d8>)
 8001594:	445b      	add	r3, fp
 8001596:	2b00      	cmp	r3, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_ddiv+0x588>
 800159a:	e713      	b.n	80013c4 <__aeabi_ddiv+0x3b0>
 800159c:	2501      	movs	r5, #1
 800159e:	2100      	movs	r1, #0
 80015a0:	44a8      	add	r8, r5
 80015a2:	e66a      	b.n	800127a <__aeabi_ddiv+0x266>
 80015a4:	075d      	lsls	r5, r3, #29
 80015a6:	025b      	lsls	r3, r3, #9
 80015a8:	0b1a      	lsrs	r2, r3, #12
 80015aa:	08c9      	lsrs	r1, r1, #3
 80015ac:	2300      	movs	r3, #0
 80015ae:	430d      	orrs	r5, r1
 80015b0:	e587      	b.n	80010c2 <__aeabi_ddiv+0xae>
 80015b2:	9900      	ldr	r1, [sp, #0]
 80015b4:	3d02      	subs	r5, #2
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	428a      	cmp	r2, r1
 80015ba:	41bf      	sbcs	r7, r7
 80015bc:	427f      	negs	r7, r7
 80015be:	193f      	adds	r7, r7, r4
 80015c0:	19f6      	adds	r6, r6, r7
 80015c2:	9200      	str	r2, [sp, #0]
 80015c4:	e7dd      	b.n	8001582 <__aeabi_ddiv+0x56e>
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	4643      	mov	r3, r8
 80015ca:	0312      	lsls	r2, r2, #12
 80015cc:	431a      	orrs	r2, r3
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <__aeabi_ddiv+0x5cc>)
 80015d2:	0b12      	lsrs	r2, r2, #12
 80015d4:	e575      	b.n	80010c2 <__aeabi_ddiv+0xae>
 80015d6:	9900      	ldr	r1, [sp, #0]
 80015d8:	4299      	cmp	r1, r3
 80015da:	d3ea      	bcc.n	80015b2 <__aeabi_ddiv+0x59e>
 80015dc:	0015      	movs	r5, r2
 80015de:	e7d3      	b.n	8001588 <__aeabi_ddiv+0x574>
 80015e0:	000007ff 	.word	0x000007ff
 80015e4:	0000043e 	.word	0x0000043e
 80015e8:	0000041e 	.word	0x0000041e
 80015ec:	000003ff 	.word	0x000003ff

080015f0 <__eqdf2>:
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	464e      	mov	r6, r9
 80015f4:	4645      	mov	r5, r8
 80015f6:	46de      	mov	lr, fp
 80015f8:	4657      	mov	r7, sl
 80015fa:	4690      	mov	r8, r2
 80015fc:	b5e0      	push	{r5, r6, r7, lr}
 80015fe:	0017      	movs	r7, r2
 8001600:	031a      	lsls	r2, r3, #12
 8001602:	0b12      	lsrs	r2, r2, #12
 8001604:	0005      	movs	r5, r0
 8001606:	4684      	mov	ip, r0
 8001608:	4819      	ldr	r0, [pc, #100]	; (8001670 <__eqdf2+0x80>)
 800160a:	030e      	lsls	r6, r1, #12
 800160c:	004c      	lsls	r4, r1, #1
 800160e:	4691      	mov	r9, r2
 8001610:	005a      	lsls	r2, r3, #1
 8001612:	0fdb      	lsrs	r3, r3, #31
 8001614:	469b      	mov	fp, r3
 8001616:	0b36      	lsrs	r6, r6, #12
 8001618:	0d64      	lsrs	r4, r4, #21
 800161a:	0fc9      	lsrs	r1, r1, #31
 800161c:	0d52      	lsrs	r2, r2, #21
 800161e:	4284      	cmp	r4, r0
 8001620:	d019      	beq.n	8001656 <__eqdf2+0x66>
 8001622:	4282      	cmp	r2, r0
 8001624:	d010      	beq.n	8001648 <__eqdf2+0x58>
 8001626:	2001      	movs	r0, #1
 8001628:	4294      	cmp	r4, r2
 800162a:	d10e      	bne.n	800164a <__eqdf2+0x5a>
 800162c:	454e      	cmp	r6, r9
 800162e:	d10c      	bne.n	800164a <__eqdf2+0x5a>
 8001630:	2001      	movs	r0, #1
 8001632:	45c4      	cmp	ip, r8
 8001634:	d109      	bne.n	800164a <__eqdf2+0x5a>
 8001636:	4559      	cmp	r1, fp
 8001638:	d017      	beq.n	800166a <__eqdf2+0x7a>
 800163a:	2c00      	cmp	r4, #0
 800163c:	d105      	bne.n	800164a <__eqdf2+0x5a>
 800163e:	0030      	movs	r0, r6
 8001640:	4328      	orrs	r0, r5
 8001642:	1e43      	subs	r3, r0, #1
 8001644:	4198      	sbcs	r0, r3
 8001646:	e000      	b.n	800164a <__eqdf2+0x5a>
 8001648:	2001      	movs	r0, #1
 800164a:	bcf0      	pop	{r4, r5, r6, r7}
 800164c:	46bb      	mov	fp, r7
 800164e:	46b2      	mov	sl, r6
 8001650:	46a9      	mov	r9, r5
 8001652:	46a0      	mov	r8, r4
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001656:	0033      	movs	r3, r6
 8001658:	2001      	movs	r0, #1
 800165a:	432b      	orrs	r3, r5
 800165c:	d1f5      	bne.n	800164a <__eqdf2+0x5a>
 800165e:	42a2      	cmp	r2, r4
 8001660:	d1f3      	bne.n	800164a <__eqdf2+0x5a>
 8001662:	464b      	mov	r3, r9
 8001664:	433b      	orrs	r3, r7
 8001666:	d1f0      	bne.n	800164a <__eqdf2+0x5a>
 8001668:	e7e2      	b.n	8001630 <__eqdf2+0x40>
 800166a:	2000      	movs	r0, #0
 800166c:	e7ed      	b.n	800164a <__eqdf2+0x5a>
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	000007ff 	.word	0x000007ff

08001674 <__gedf2>:
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	4647      	mov	r7, r8
 8001678:	46ce      	mov	lr, r9
 800167a:	0004      	movs	r4, r0
 800167c:	0018      	movs	r0, r3
 800167e:	0016      	movs	r6, r2
 8001680:	031b      	lsls	r3, r3, #12
 8001682:	0b1b      	lsrs	r3, r3, #12
 8001684:	4d2d      	ldr	r5, [pc, #180]	; (800173c <__gedf2+0xc8>)
 8001686:	004a      	lsls	r2, r1, #1
 8001688:	4699      	mov	r9, r3
 800168a:	b580      	push	{r7, lr}
 800168c:	0043      	lsls	r3, r0, #1
 800168e:	030f      	lsls	r7, r1, #12
 8001690:	46a4      	mov	ip, r4
 8001692:	46b0      	mov	r8, r6
 8001694:	0b3f      	lsrs	r7, r7, #12
 8001696:	0d52      	lsrs	r2, r2, #21
 8001698:	0fc9      	lsrs	r1, r1, #31
 800169a:	0d5b      	lsrs	r3, r3, #21
 800169c:	0fc0      	lsrs	r0, r0, #31
 800169e:	42aa      	cmp	r2, r5
 80016a0:	d021      	beq.n	80016e6 <__gedf2+0x72>
 80016a2:	42ab      	cmp	r3, r5
 80016a4:	d013      	beq.n	80016ce <__gedf2+0x5a>
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d122      	bne.n	80016f0 <__gedf2+0x7c>
 80016aa:	433c      	orrs	r4, r7
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <__gedf2+0x42>
 80016b0:	464d      	mov	r5, r9
 80016b2:	432e      	orrs	r6, r5
 80016b4:	d022      	beq.n	80016fc <__gedf2+0x88>
 80016b6:	2c00      	cmp	r4, #0
 80016b8:	d010      	beq.n	80016dc <__gedf2+0x68>
 80016ba:	4281      	cmp	r1, r0
 80016bc:	d022      	beq.n	8001704 <__gedf2+0x90>
 80016be:	2002      	movs	r0, #2
 80016c0:	3901      	subs	r1, #1
 80016c2:	4008      	ands	r0, r1
 80016c4:	3801      	subs	r0, #1
 80016c6:	bcc0      	pop	{r6, r7}
 80016c8:	46b9      	mov	r9, r7
 80016ca:	46b0      	mov	r8, r6
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ce:	464d      	mov	r5, r9
 80016d0:	432e      	orrs	r6, r5
 80016d2:	d129      	bne.n	8001728 <__gedf2+0xb4>
 80016d4:	2a00      	cmp	r2, #0
 80016d6:	d1f0      	bne.n	80016ba <__gedf2+0x46>
 80016d8:	433c      	orrs	r4, r7
 80016da:	d1ee      	bne.n	80016ba <__gedf2+0x46>
 80016dc:	2800      	cmp	r0, #0
 80016de:	d1f2      	bne.n	80016c6 <__gedf2+0x52>
 80016e0:	2001      	movs	r0, #1
 80016e2:	4240      	negs	r0, r0
 80016e4:	e7ef      	b.n	80016c6 <__gedf2+0x52>
 80016e6:	003d      	movs	r5, r7
 80016e8:	4325      	orrs	r5, r4
 80016ea:	d11d      	bne.n	8001728 <__gedf2+0xb4>
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d0ee      	beq.n	80016ce <__gedf2+0x5a>
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e2      	bne.n	80016ba <__gedf2+0x46>
 80016f4:	464c      	mov	r4, r9
 80016f6:	4326      	orrs	r6, r4
 80016f8:	d1df      	bne.n	80016ba <__gedf2+0x46>
 80016fa:	e7e0      	b.n	80016be <__gedf2+0x4a>
 80016fc:	2000      	movs	r0, #0
 80016fe:	2c00      	cmp	r4, #0
 8001700:	d0e1      	beq.n	80016c6 <__gedf2+0x52>
 8001702:	e7dc      	b.n	80016be <__gedf2+0x4a>
 8001704:	429a      	cmp	r2, r3
 8001706:	dc0a      	bgt.n	800171e <__gedf2+0xaa>
 8001708:	dbe8      	blt.n	80016dc <__gedf2+0x68>
 800170a:	454f      	cmp	r7, r9
 800170c:	d8d7      	bhi.n	80016be <__gedf2+0x4a>
 800170e:	d00e      	beq.n	800172e <__gedf2+0xba>
 8001710:	2000      	movs	r0, #0
 8001712:	454f      	cmp	r7, r9
 8001714:	d2d7      	bcs.n	80016c6 <__gedf2+0x52>
 8001716:	2900      	cmp	r1, #0
 8001718:	d0e2      	beq.n	80016e0 <__gedf2+0x6c>
 800171a:	0008      	movs	r0, r1
 800171c:	e7d3      	b.n	80016c6 <__gedf2+0x52>
 800171e:	4243      	negs	r3, r0
 8001720:	4158      	adcs	r0, r3
 8001722:	0040      	lsls	r0, r0, #1
 8001724:	3801      	subs	r0, #1
 8001726:	e7ce      	b.n	80016c6 <__gedf2+0x52>
 8001728:	2002      	movs	r0, #2
 800172a:	4240      	negs	r0, r0
 800172c:	e7cb      	b.n	80016c6 <__gedf2+0x52>
 800172e:	45c4      	cmp	ip, r8
 8001730:	d8c5      	bhi.n	80016be <__gedf2+0x4a>
 8001732:	2000      	movs	r0, #0
 8001734:	45c4      	cmp	ip, r8
 8001736:	d2c6      	bcs.n	80016c6 <__gedf2+0x52>
 8001738:	e7ed      	b.n	8001716 <__gedf2+0xa2>
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	000007ff 	.word	0x000007ff

08001740 <__ledf2>:
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	4647      	mov	r7, r8
 8001744:	46ce      	mov	lr, r9
 8001746:	0004      	movs	r4, r0
 8001748:	0018      	movs	r0, r3
 800174a:	0016      	movs	r6, r2
 800174c:	031b      	lsls	r3, r3, #12
 800174e:	0b1b      	lsrs	r3, r3, #12
 8001750:	4d2c      	ldr	r5, [pc, #176]	; (8001804 <__ledf2+0xc4>)
 8001752:	004a      	lsls	r2, r1, #1
 8001754:	4699      	mov	r9, r3
 8001756:	b580      	push	{r7, lr}
 8001758:	0043      	lsls	r3, r0, #1
 800175a:	030f      	lsls	r7, r1, #12
 800175c:	46a4      	mov	ip, r4
 800175e:	46b0      	mov	r8, r6
 8001760:	0b3f      	lsrs	r7, r7, #12
 8001762:	0d52      	lsrs	r2, r2, #21
 8001764:	0fc9      	lsrs	r1, r1, #31
 8001766:	0d5b      	lsrs	r3, r3, #21
 8001768:	0fc0      	lsrs	r0, r0, #31
 800176a:	42aa      	cmp	r2, r5
 800176c:	d00d      	beq.n	800178a <__ledf2+0x4a>
 800176e:	42ab      	cmp	r3, r5
 8001770:	d010      	beq.n	8001794 <__ledf2+0x54>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d127      	bne.n	80017c6 <__ledf2+0x86>
 8001776:	433c      	orrs	r4, r7
 8001778:	2b00      	cmp	r3, #0
 800177a:	d111      	bne.n	80017a0 <__ledf2+0x60>
 800177c:	464d      	mov	r5, r9
 800177e:	432e      	orrs	r6, r5
 8001780:	d10e      	bne.n	80017a0 <__ledf2+0x60>
 8001782:	2000      	movs	r0, #0
 8001784:	2c00      	cmp	r4, #0
 8001786:	d015      	beq.n	80017b4 <__ledf2+0x74>
 8001788:	e00e      	b.n	80017a8 <__ledf2+0x68>
 800178a:	003d      	movs	r5, r7
 800178c:	4325      	orrs	r5, r4
 800178e:	d110      	bne.n	80017b2 <__ledf2+0x72>
 8001790:	4293      	cmp	r3, r2
 8001792:	d118      	bne.n	80017c6 <__ledf2+0x86>
 8001794:	464d      	mov	r5, r9
 8001796:	432e      	orrs	r6, r5
 8001798:	d10b      	bne.n	80017b2 <__ledf2+0x72>
 800179a:	2a00      	cmp	r2, #0
 800179c:	d102      	bne.n	80017a4 <__ledf2+0x64>
 800179e:	433c      	orrs	r4, r7
 80017a0:	2c00      	cmp	r4, #0
 80017a2:	d00b      	beq.n	80017bc <__ledf2+0x7c>
 80017a4:	4281      	cmp	r1, r0
 80017a6:	d014      	beq.n	80017d2 <__ledf2+0x92>
 80017a8:	2002      	movs	r0, #2
 80017aa:	3901      	subs	r1, #1
 80017ac:	4008      	ands	r0, r1
 80017ae:	3801      	subs	r0, #1
 80017b0:	e000      	b.n	80017b4 <__ledf2+0x74>
 80017b2:	2002      	movs	r0, #2
 80017b4:	bcc0      	pop	{r6, r7}
 80017b6:	46b9      	mov	r9, r7
 80017b8:	46b0      	mov	r8, r6
 80017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017bc:	2800      	cmp	r0, #0
 80017be:	d1f9      	bne.n	80017b4 <__ledf2+0x74>
 80017c0:	2001      	movs	r0, #1
 80017c2:	4240      	negs	r0, r0
 80017c4:	e7f6      	b.n	80017b4 <__ledf2+0x74>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ec      	bne.n	80017a4 <__ledf2+0x64>
 80017ca:	464c      	mov	r4, r9
 80017cc:	4326      	orrs	r6, r4
 80017ce:	d1e9      	bne.n	80017a4 <__ledf2+0x64>
 80017d0:	e7ea      	b.n	80017a8 <__ledf2+0x68>
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dd04      	ble.n	80017e0 <__ledf2+0xa0>
 80017d6:	4243      	negs	r3, r0
 80017d8:	4158      	adcs	r0, r3
 80017da:	0040      	lsls	r0, r0, #1
 80017dc:	3801      	subs	r0, #1
 80017de:	e7e9      	b.n	80017b4 <__ledf2+0x74>
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbeb      	blt.n	80017bc <__ledf2+0x7c>
 80017e4:	454f      	cmp	r7, r9
 80017e6:	d8df      	bhi.n	80017a8 <__ledf2+0x68>
 80017e8:	d006      	beq.n	80017f8 <__ledf2+0xb8>
 80017ea:	2000      	movs	r0, #0
 80017ec:	454f      	cmp	r7, r9
 80017ee:	d2e1      	bcs.n	80017b4 <__ledf2+0x74>
 80017f0:	2900      	cmp	r1, #0
 80017f2:	d0e5      	beq.n	80017c0 <__ledf2+0x80>
 80017f4:	0008      	movs	r0, r1
 80017f6:	e7dd      	b.n	80017b4 <__ledf2+0x74>
 80017f8:	45c4      	cmp	ip, r8
 80017fa:	d8d5      	bhi.n	80017a8 <__ledf2+0x68>
 80017fc:	2000      	movs	r0, #0
 80017fe:	45c4      	cmp	ip, r8
 8001800:	d2d8      	bcs.n	80017b4 <__ledf2+0x74>
 8001802:	e7f5      	b.n	80017f0 <__ledf2+0xb0>
 8001804:	000007ff 	.word	0x000007ff

08001808 <__aeabi_dmul>:
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	4645      	mov	r5, r8
 800180c:	46de      	mov	lr, fp
 800180e:	4657      	mov	r7, sl
 8001810:	464e      	mov	r6, r9
 8001812:	b5e0      	push	{r5, r6, r7, lr}
 8001814:	001f      	movs	r7, r3
 8001816:	030b      	lsls	r3, r1, #12
 8001818:	0b1b      	lsrs	r3, r3, #12
 800181a:	469b      	mov	fp, r3
 800181c:	004d      	lsls	r5, r1, #1
 800181e:	0fcb      	lsrs	r3, r1, #31
 8001820:	0004      	movs	r4, r0
 8001822:	4691      	mov	r9, r2
 8001824:	4698      	mov	r8, r3
 8001826:	b087      	sub	sp, #28
 8001828:	0d6d      	lsrs	r5, r5, #21
 800182a:	d100      	bne.n	800182e <__aeabi_dmul+0x26>
 800182c:	e1cd      	b.n	8001bca <__aeabi_dmul+0x3c2>
 800182e:	4bce      	ldr	r3, [pc, #824]	; (8001b68 <__aeabi_dmul+0x360>)
 8001830:	429d      	cmp	r5, r3
 8001832:	d100      	bne.n	8001836 <__aeabi_dmul+0x2e>
 8001834:	e1e9      	b.n	8001c0a <__aeabi_dmul+0x402>
 8001836:	465a      	mov	r2, fp
 8001838:	0f43      	lsrs	r3, r0, #29
 800183a:	00d2      	lsls	r2, r2, #3
 800183c:	4313      	orrs	r3, r2
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	0412      	lsls	r2, r2, #16
 8001842:	431a      	orrs	r2, r3
 8001844:	00c3      	lsls	r3, r0, #3
 8001846:	469a      	mov	sl, r3
 8001848:	4bc8      	ldr	r3, [pc, #800]	; (8001b6c <__aeabi_dmul+0x364>)
 800184a:	4693      	mov	fp, r2
 800184c:	469c      	mov	ip, r3
 800184e:	2300      	movs	r3, #0
 8001850:	2600      	movs	r6, #0
 8001852:	4465      	add	r5, ip
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	033c      	lsls	r4, r7, #12
 8001858:	007b      	lsls	r3, r7, #1
 800185a:	4648      	mov	r0, r9
 800185c:	0b24      	lsrs	r4, r4, #12
 800185e:	0d5b      	lsrs	r3, r3, #21
 8001860:	0fff      	lsrs	r7, r7, #31
 8001862:	2b00      	cmp	r3, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dmul+0x60>
 8001866:	e189      	b.n	8001b7c <__aeabi_dmul+0x374>
 8001868:	4abf      	ldr	r2, [pc, #764]	; (8001b68 <__aeabi_dmul+0x360>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d019      	beq.n	80018a2 <__aeabi_dmul+0x9a>
 800186e:	0f42      	lsrs	r2, r0, #29
 8001870:	00e4      	lsls	r4, r4, #3
 8001872:	4322      	orrs	r2, r4
 8001874:	2480      	movs	r4, #128	; 0x80
 8001876:	0424      	lsls	r4, r4, #16
 8001878:	4314      	orrs	r4, r2
 800187a:	4abc      	ldr	r2, [pc, #752]	; (8001b6c <__aeabi_dmul+0x364>)
 800187c:	2100      	movs	r1, #0
 800187e:	4694      	mov	ip, r2
 8001880:	4642      	mov	r2, r8
 8001882:	4463      	add	r3, ip
 8001884:	195b      	adds	r3, r3, r5
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	407a      	eors	r2, r7
 800188c:	3301      	adds	r3, #1
 800188e:	00c0      	lsls	r0, r0, #3
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	2e0a      	cmp	r6, #10
 8001896:	dd1c      	ble.n	80018d2 <__aeabi_dmul+0xca>
 8001898:	003a      	movs	r2, r7
 800189a:	2e0b      	cmp	r6, #11
 800189c:	d05e      	beq.n	800195c <__aeabi_dmul+0x154>
 800189e:	4647      	mov	r7, r8
 80018a0:	e056      	b.n	8001950 <__aeabi_dmul+0x148>
 80018a2:	4649      	mov	r1, r9
 80018a4:	4bb0      	ldr	r3, [pc, #704]	; (8001b68 <__aeabi_dmul+0x360>)
 80018a6:	4321      	orrs	r1, r4
 80018a8:	18eb      	adds	r3, r5, r3
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	2900      	cmp	r1, #0
 80018ae:	d12a      	bne.n	8001906 <__aeabi_dmul+0xfe>
 80018b0:	2080      	movs	r0, #128	; 0x80
 80018b2:	2202      	movs	r2, #2
 80018b4:	0100      	lsls	r0, r0, #4
 80018b6:	002b      	movs	r3, r5
 80018b8:	4684      	mov	ip, r0
 80018ba:	4316      	orrs	r6, r2
 80018bc:	4642      	mov	r2, r8
 80018be:	4463      	add	r3, ip
 80018c0:	407a      	eors	r2, r7
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	2e0a      	cmp	r6, #10
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dmul+0xc4>
 80018ca:	e231      	b.n	8001d30 <__aeabi_dmul+0x528>
 80018cc:	2000      	movs	r0, #0
 80018ce:	2400      	movs	r4, #0
 80018d0:	2102      	movs	r1, #2
 80018d2:	2e02      	cmp	r6, #2
 80018d4:	dc26      	bgt.n	8001924 <__aeabi_dmul+0x11c>
 80018d6:	3e01      	subs	r6, #1
 80018d8:	2e01      	cmp	r6, #1
 80018da:	d852      	bhi.n	8001982 <__aeabi_dmul+0x17a>
 80018dc:	2902      	cmp	r1, #2
 80018de:	d04c      	beq.n	800197a <__aeabi_dmul+0x172>
 80018e0:	2901      	cmp	r1, #1
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dmul+0xde>
 80018e4:	e118      	b.n	8001b18 <__aeabi_dmul+0x310>
 80018e6:	2300      	movs	r3, #0
 80018e8:	2400      	movs	r4, #0
 80018ea:	2500      	movs	r5, #0
 80018ec:	051b      	lsls	r3, r3, #20
 80018ee:	4323      	orrs	r3, r4
 80018f0:	07d2      	lsls	r2, r2, #31
 80018f2:	4313      	orrs	r3, r2
 80018f4:	0028      	movs	r0, r5
 80018f6:	0019      	movs	r1, r3
 80018f8:	b007      	add	sp, #28
 80018fa:	bcf0      	pop	{r4, r5, r6, r7}
 80018fc:	46bb      	mov	fp, r7
 80018fe:	46b2      	mov	sl, r6
 8001900:	46a9      	mov	r9, r5
 8001902:	46a0      	mov	r8, r4
 8001904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	2203      	movs	r2, #3
 800190a:	0109      	lsls	r1, r1, #4
 800190c:	002b      	movs	r3, r5
 800190e:	468c      	mov	ip, r1
 8001910:	4316      	orrs	r6, r2
 8001912:	4642      	mov	r2, r8
 8001914:	4463      	add	r3, ip
 8001916:	407a      	eors	r2, r7
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2e0a      	cmp	r6, #10
 800191e:	dd00      	ble.n	8001922 <__aeabi_dmul+0x11a>
 8001920:	e228      	b.n	8001d74 <__aeabi_dmul+0x56c>
 8001922:	2103      	movs	r1, #3
 8001924:	2501      	movs	r5, #1
 8001926:	40b5      	lsls	r5, r6
 8001928:	46ac      	mov	ip, r5
 800192a:	26a6      	movs	r6, #166	; 0xa6
 800192c:	4663      	mov	r3, ip
 800192e:	00f6      	lsls	r6, r6, #3
 8001930:	4035      	ands	r5, r6
 8001932:	4233      	tst	r3, r6
 8001934:	d10b      	bne.n	800194e <__aeabi_dmul+0x146>
 8001936:	2690      	movs	r6, #144	; 0x90
 8001938:	00b6      	lsls	r6, r6, #2
 800193a:	4233      	tst	r3, r6
 800193c:	d118      	bne.n	8001970 <__aeabi_dmul+0x168>
 800193e:	3eb9      	subs	r6, #185	; 0xb9
 8001940:	3eff      	subs	r6, #255	; 0xff
 8001942:	421e      	tst	r6, r3
 8001944:	d01d      	beq.n	8001982 <__aeabi_dmul+0x17a>
 8001946:	46a3      	mov	fp, r4
 8001948:	4682      	mov	sl, r0
 800194a:	9100      	str	r1, [sp, #0]
 800194c:	e000      	b.n	8001950 <__aeabi_dmul+0x148>
 800194e:	0017      	movs	r7, r2
 8001950:	9900      	ldr	r1, [sp, #0]
 8001952:	003a      	movs	r2, r7
 8001954:	2902      	cmp	r1, #2
 8001956:	d010      	beq.n	800197a <__aeabi_dmul+0x172>
 8001958:	465c      	mov	r4, fp
 800195a:	4650      	mov	r0, sl
 800195c:	2903      	cmp	r1, #3
 800195e:	d1bf      	bne.n	80018e0 <__aeabi_dmul+0xd8>
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	031b      	lsls	r3, r3, #12
 8001964:	431c      	orrs	r4, r3
 8001966:	0324      	lsls	r4, r4, #12
 8001968:	0005      	movs	r5, r0
 800196a:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <__aeabi_dmul+0x360>)
 800196c:	0b24      	lsrs	r4, r4, #12
 800196e:	e7bd      	b.n	80018ec <__aeabi_dmul+0xe4>
 8001970:	2480      	movs	r4, #128	; 0x80
 8001972:	2200      	movs	r2, #0
 8001974:	4b7c      	ldr	r3, [pc, #496]	; (8001b68 <__aeabi_dmul+0x360>)
 8001976:	0324      	lsls	r4, r4, #12
 8001978:	e7b8      	b.n	80018ec <__aeabi_dmul+0xe4>
 800197a:	2400      	movs	r4, #0
 800197c:	2500      	movs	r5, #0
 800197e:	4b7a      	ldr	r3, [pc, #488]	; (8001b68 <__aeabi_dmul+0x360>)
 8001980:	e7b4      	b.n	80018ec <__aeabi_dmul+0xe4>
 8001982:	4653      	mov	r3, sl
 8001984:	041e      	lsls	r6, r3, #16
 8001986:	0c36      	lsrs	r6, r6, #16
 8001988:	0c1f      	lsrs	r7, r3, #16
 800198a:	0033      	movs	r3, r6
 800198c:	0c01      	lsrs	r1, r0, #16
 800198e:	0400      	lsls	r0, r0, #16
 8001990:	0c00      	lsrs	r0, r0, #16
 8001992:	4343      	muls	r3, r0
 8001994:	4698      	mov	r8, r3
 8001996:	0003      	movs	r3, r0
 8001998:	437b      	muls	r3, r7
 800199a:	4699      	mov	r9, r3
 800199c:	0033      	movs	r3, r6
 800199e:	434b      	muls	r3, r1
 80019a0:	469c      	mov	ip, r3
 80019a2:	4643      	mov	r3, r8
 80019a4:	000d      	movs	r5, r1
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	469a      	mov	sl, r3
 80019aa:	437d      	muls	r5, r7
 80019ac:	44cc      	add	ip, r9
 80019ae:	44d4      	add	ip, sl
 80019b0:	9500      	str	r5, [sp, #0]
 80019b2:	45e1      	cmp	r9, ip
 80019b4:	d904      	bls.n	80019c0 <__aeabi_dmul+0x1b8>
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	4699      	mov	r9, r3
 80019bc:	444d      	add	r5, r9
 80019be:	9500      	str	r5, [sp, #0]
 80019c0:	4663      	mov	r3, ip
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	001d      	movs	r5, r3
 80019c6:	4663      	mov	r3, ip
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	469c      	mov	ip, r3
 80019cc:	4643      	mov	r3, r8
 80019ce:	041b      	lsls	r3, r3, #16
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	4698      	mov	r8, r3
 80019d4:	4663      	mov	r3, ip
 80019d6:	4443      	add	r3, r8
 80019d8:	9303      	str	r3, [sp, #12]
 80019da:	0c23      	lsrs	r3, r4, #16
 80019dc:	4698      	mov	r8, r3
 80019de:	0033      	movs	r3, r6
 80019e0:	0424      	lsls	r4, r4, #16
 80019e2:	0c24      	lsrs	r4, r4, #16
 80019e4:	4363      	muls	r3, r4
 80019e6:	469c      	mov	ip, r3
 80019e8:	0023      	movs	r3, r4
 80019ea:	437b      	muls	r3, r7
 80019ec:	4699      	mov	r9, r3
 80019ee:	4643      	mov	r3, r8
 80019f0:	435e      	muls	r6, r3
 80019f2:	435f      	muls	r7, r3
 80019f4:	444e      	add	r6, r9
 80019f6:	4663      	mov	r3, ip
 80019f8:	46b2      	mov	sl, r6
 80019fa:	0c1e      	lsrs	r6, r3, #16
 80019fc:	4456      	add	r6, sl
 80019fe:	45b1      	cmp	r9, r6
 8001a00:	d903      	bls.n	8001a0a <__aeabi_dmul+0x202>
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	025b      	lsls	r3, r3, #9
 8001a06:	4699      	mov	r9, r3
 8001a08:	444f      	add	r7, r9
 8001a0a:	0c33      	lsrs	r3, r6, #16
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	003b      	movs	r3, r7
 8001a10:	444b      	add	r3, r9
 8001a12:	9305      	str	r3, [sp, #20]
 8001a14:	4663      	mov	r3, ip
 8001a16:	46ac      	mov	ip, r5
 8001a18:	041f      	lsls	r7, r3, #16
 8001a1a:	0c3f      	lsrs	r7, r7, #16
 8001a1c:	0436      	lsls	r6, r6, #16
 8001a1e:	19f6      	adds	r6, r6, r7
 8001a20:	44b4      	add	ip, r6
 8001a22:	4663      	mov	r3, ip
 8001a24:	9304      	str	r3, [sp, #16]
 8001a26:	465b      	mov	r3, fp
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	469c      	mov	ip, r3
 8001a2c:	465b      	mov	r3, fp
 8001a2e:	041f      	lsls	r7, r3, #16
 8001a30:	0c3f      	lsrs	r7, r7, #16
 8001a32:	003b      	movs	r3, r7
 8001a34:	4343      	muls	r3, r0
 8001a36:	4699      	mov	r9, r3
 8001a38:	4663      	mov	r3, ip
 8001a3a:	4343      	muls	r3, r0
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	464b      	mov	r3, r9
 8001a40:	4660      	mov	r0, ip
 8001a42:	0c1b      	lsrs	r3, r3, #16
 8001a44:	469b      	mov	fp, r3
 8001a46:	4348      	muls	r0, r1
 8001a48:	4379      	muls	r1, r7
 8001a4a:	4451      	add	r1, sl
 8001a4c:	4459      	add	r1, fp
 8001a4e:	458a      	cmp	sl, r1
 8001a50:	d903      	bls.n	8001a5a <__aeabi_dmul+0x252>
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	025b      	lsls	r3, r3, #9
 8001a56:	469a      	mov	sl, r3
 8001a58:	4450      	add	r0, sl
 8001a5a:	0c0b      	lsrs	r3, r1, #16
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	464b      	mov	r3, r9
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	4699      	mov	r9, r3
 8001a66:	003b      	movs	r3, r7
 8001a68:	4363      	muls	r3, r4
 8001a6a:	0409      	lsls	r1, r1, #16
 8001a6c:	4645      	mov	r5, r8
 8001a6e:	4449      	add	r1, r9
 8001a70:	4699      	mov	r9, r3
 8001a72:	4663      	mov	r3, ip
 8001a74:	435c      	muls	r4, r3
 8001a76:	436b      	muls	r3, r5
 8001a78:	469c      	mov	ip, r3
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	4698      	mov	r8, r3
 8001a80:	436f      	muls	r7, r5
 8001a82:	193f      	adds	r7, r7, r4
 8001a84:	4447      	add	r7, r8
 8001a86:	4450      	add	r0, sl
 8001a88:	42bc      	cmp	r4, r7
 8001a8a:	d903      	bls.n	8001a94 <__aeabi_dmul+0x28c>
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	4698      	mov	r8, r3
 8001a92:	44c4      	add	ip, r8
 8001a94:	9b04      	ldr	r3, [sp, #16]
 8001a96:	9d00      	ldr	r5, [sp, #0]
 8001a98:	4698      	mov	r8, r3
 8001a9a:	4445      	add	r5, r8
 8001a9c:	42b5      	cmp	r5, r6
 8001a9e:	41b6      	sbcs	r6, r6
 8001aa0:	4273      	negs	r3, r6
 8001aa2:	4698      	mov	r8, r3
 8001aa4:	464b      	mov	r3, r9
 8001aa6:	041e      	lsls	r6, r3, #16
 8001aa8:	9b05      	ldr	r3, [sp, #20]
 8001aaa:	043c      	lsls	r4, r7, #16
 8001aac:	4699      	mov	r9, r3
 8001aae:	0c36      	lsrs	r6, r6, #16
 8001ab0:	19a4      	adds	r4, r4, r6
 8001ab2:	444c      	add	r4, r9
 8001ab4:	46a1      	mov	r9, r4
 8001ab6:	4683      	mov	fp, r0
 8001ab8:	186e      	adds	r6, r5, r1
 8001aba:	44c1      	add	r9, r8
 8001abc:	428e      	cmp	r6, r1
 8001abe:	4189      	sbcs	r1, r1
 8001ac0:	44cb      	add	fp, r9
 8001ac2:	465d      	mov	r5, fp
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	186d      	adds	r5, r5, r1
 8001ac8:	429c      	cmp	r4, r3
 8001aca:	41a4      	sbcs	r4, r4
 8001acc:	45c1      	cmp	r9, r8
 8001ace:	419b      	sbcs	r3, r3
 8001ad0:	4583      	cmp	fp, r0
 8001ad2:	4180      	sbcs	r0, r0
 8001ad4:	428d      	cmp	r5, r1
 8001ad6:	4189      	sbcs	r1, r1
 8001ad8:	425b      	negs	r3, r3
 8001ada:	4264      	negs	r4, r4
 8001adc:	431c      	orrs	r4, r3
 8001ade:	4240      	negs	r0, r0
 8001ae0:	9b03      	ldr	r3, [sp, #12]
 8001ae2:	4249      	negs	r1, r1
 8001ae4:	4301      	orrs	r1, r0
 8001ae6:	0270      	lsls	r0, r6, #9
 8001ae8:	0c3f      	lsrs	r7, r7, #16
 8001aea:	4318      	orrs	r0, r3
 8001aec:	19e4      	adds	r4, r4, r7
 8001aee:	1e47      	subs	r7, r0, #1
 8001af0:	41b8      	sbcs	r0, r7
 8001af2:	1864      	adds	r4, r4, r1
 8001af4:	4464      	add	r4, ip
 8001af6:	0df6      	lsrs	r6, r6, #23
 8001af8:	0261      	lsls	r1, r4, #9
 8001afa:	4330      	orrs	r0, r6
 8001afc:	0dec      	lsrs	r4, r5, #23
 8001afe:	026e      	lsls	r6, r5, #9
 8001b00:	430c      	orrs	r4, r1
 8001b02:	4330      	orrs	r0, r6
 8001b04:	01c9      	lsls	r1, r1, #7
 8001b06:	d400      	bmi.n	8001b0a <__aeabi_dmul+0x302>
 8001b08:	e0f1      	b.n	8001cee <__aeabi_dmul+0x4e6>
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	0843      	lsrs	r3, r0, #1
 8001b0e:	4001      	ands	r1, r0
 8001b10:	430b      	orrs	r3, r1
 8001b12:	07e0      	lsls	r0, r4, #31
 8001b14:	4318      	orrs	r0, r3
 8001b16:	0864      	lsrs	r4, r4, #1
 8001b18:	4915      	ldr	r1, [pc, #84]	; (8001b70 <__aeabi_dmul+0x368>)
 8001b1a:	9b02      	ldr	r3, [sp, #8]
 8001b1c:	468c      	mov	ip, r1
 8001b1e:	4463      	add	r3, ip
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	dc00      	bgt.n	8001b26 <__aeabi_dmul+0x31e>
 8001b24:	e097      	b.n	8001c56 <__aeabi_dmul+0x44e>
 8001b26:	0741      	lsls	r1, r0, #29
 8001b28:	d009      	beq.n	8001b3e <__aeabi_dmul+0x336>
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	4001      	ands	r1, r0
 8001b2e:	2904      	cmp	r1, #4
 8001b30:	d005      	beq.n	8001b3e <__aeabi_dmul+0x336>
 8001b32:	1d01      	adds	r1, r0, #4
 8001b34:	4281      	cmp	r1, r0
 8001b36:	4180      	sbcs	r0, r0
 8001b38:	4240      	negs	r0, r0
 8001b3a:	1824      	adds	r4, r4, r0
 8001b3c:	0008      	movs	r0, r1
 8001b3e:	01e1      	lsls	r1, r4, #7
 8001b40:	d506      	bpl.n	8001b50 <__aeabi_dmul+0x348>
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	00c9      	lsls	r1, r1, #3
 8001b46:	468c      	mov	ip, r1
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <__aeabi_dmul+0x36c>)
 8001b4a:	401c      	ands	r4, r3
 8001b4c:	9b02      	ldr	r3, [sp, #8]
 8001b4e:	4463      	add	r3, ip
 8001b50:	4909      	ldr	r1, [pc, #36]	; (8001b78 <__aeabi_dmul+0x370>)
 8001b52:	428b      	cmp	r3, r1
 8001b54:	dd00      	ble.n	8001b58 <__aeabi_dmul+0x350>
 8001b56:	e710      	b.n	800197a <__aeabi_dmul+0x172>
 8001b58:	0761      	lsls	r1, r4, #29
 8001b5a:	08c5      	lsrs	r5, r0, #3
 8001b5c:	0264      	lsls	r4, r4, #9
 8001b5e:	055b      	lsls	r3, r3, #21
 8001b60:	430d      	orrs	r5, r1
 8001b62:	0b24      	lsrs	r4, r4, #12
 8001b64:	0d5b      	lsrs	r3, r3, #21
 8001b66:	e6c1      	b.n	80018ec <__aeabi_dmul+0xe4>
 8001b68:	000007ff 	.word	0x000007ff
 8001b6c:	fffffc01 	.word	0xfffffc01
 8001b70:	000003ff 	.word	0x000003ff
 8001b74:	feffffff 	.word	0xfeffffff
 8001b78:	000007fe 	.word	0x000007fe
 8001b7c:	464b      	mov	r3, r9
 8001b7e:	4323      	orrs	r3, r4
 8001b80:	d059      	beq.n	8001c36 <__aeabi_dmul+0x42e>
 8001b82:	2c00      	cmp	r4, #0
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dmul+0x380>
 8001b86:	e0a3      	b.n	8001cd0 <__aeabi_dmul+0x4c8>
 8001b88:	0020      	movs	r0, r4
 8001b8a:	f000 fdf9 	bl	8002780 <__clzsi2>
 8001b8e:	0001      	movs	r1, r0
 8001b90:	0003      	movs	r3, r0
 8001b92:	390b      	subs	r1, #11
 8001b94:	221d      	movs	r2, #29
 8001b96:	1a52      	subs	r2, r2, r1
 8001b98:	4649      	mov	r1, r9
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	40d1      	lsrs	r1, r2
 8001b9e:	464a      	mov	r2, r9
 8001ba0:	3808      	subs	r0, #8
 8001ba2:	4082      	lsls	r2, r0
 8001ba4:	4084      	lsls	r4, r0
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	430c      	orrs	r4, r1
 8001baa:	4a74      	ldr	r2, [pc, #464]	; (8001d7c <__aeabi_dmul+0x574>)
 8001bac:	1aeb      	subs	r3, r5, r3
 8001bae:	4694      	mov	ip, r2
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	4463      	add	r3, ip
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	9b01      	ldr	r3, [sp, #4]
 8001bb8:	407a      	eors	r2, r7
 8001bba:	3301      	adds	r3, #1
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2e0a      	cmp	r6, #10
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dmul+0x3c0>
 8001bc6:	e667      	b.n	8001898 <__aeabi_dmul+0x90>
 8001bc8:	e683      	b.n	80018d2 <__aeabi_dmul+0xca>
 8001bca:	465b      	mov	r3, fp
 8001bcc:	4303      	orrs	r3, r0
 8001bce:	469a      	mov	sl, r3
 8001bd0:	d02a      	beq.n	8001c28 <__aeabi_dmul+0x420>
 8001bd2:	465b      	mov	r3, fp
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d06d      	beq.n	8001cb4 <__aeabi_dmul+0x4ac>
 8001bd8:	4658      	mov	r0, fp
 8001bda:	f000 fdd1 	bl	8002780 <__clzsi2>
 8001bde:	0001      	movs	r1, r0
 8001be0:	0003      	movs	r3, r0
 8001be2:	390b      	subs	r1, #11
 8001be4:	221d      	movs	r2, #29
 8001be6:	1a52      	subs	r2, r2, r1
 8001be8:	0021      	movs	r1, r4
 8001bea:	0018      	movs	r0, r3
 8001bec:	465d      	mov	r5, fp
 8001bee:	40d1      	lsrs	r1, r2
 8001bf0:	3808      	subs	r0, #8
 8001bf2:	4085      	lsls	r5, r0
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	4084      	lsls	r4, r0
 8001bf8:	432a      	orrs	r2, r5
 8001bfa:	4693      	mov	fp, r2
 8001bfc:	46a2      	mov	sl, r4
 8001bfe:	4d5f      	ldr	r5, [pc, #380]	; (8001d7c <__aeabi_dmul+0x574>)
 8001c00:	2600      	movs	r6, #0
 8001c02:	1aed      	subs	r5, r5, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	e625      	b.n	8001856 <__aeabi_dmul+0x4e>
 8001c0a:	465b      	mov	r3, fp
 8001c0c:	4303      	orrs	r3, r0
 8001c0e:	469a      	mov	sl, r3
 8001c10:	d105      	bne.n	8001c1e <__aeabi_dmul+0x416>
 8001c12:	2300      	movs	r3, #0
 8001c14:	469b      	mov	fp, r3
 8001c16:	3302      	adds	r3, #2
 8001c18:	2608      	movs	r6, #8
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	e61b      	b.n	8001856 <__aeabi_dmul+0x4e>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	4682      	mov	sl, r0
 8001c22:	260c      	movs	r6, #12
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	e616      	b.n	8001856 <__aeabi_dmul+0x4e>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	469b      	mov	fp, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	2604      	movs	r6, #4
 8001c30:	2500      	movs	r5, #0
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	e60f      	b.n	8001856 <__aeabi_dmul+0x4e>
 8001c36:	4642      	mov	r2, r8
 8001c38:	3301      	adds	r3, #1
 8001c3a:	9501      	str	r5, [sp, #4]
 8001c3c:	431e      	orrs	r6, r3
 8001c3e:	9b01      	ldr	r3, [sp, #4]
 8001c40:	407a      	eors	r2, r7
 8001c42:	3301      	adds	r3, #1
 8001c44:	2400      	movs	r4, #0
 8001c46:	2000      	movs	r0, #0
 8001c48:	2101      	movs	r1, #1
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2e0a      	cmp	r6, #10
 8001c50:	dd00      	ble.n	8001c54 <__aeabi_dmul+0x44c>
 8001c52:	e621      	b.n	8001898 <__aeabi_dmul+0x90>
 8001c54:	e63d      	b.n	80018d2 <__aeabi_dmul+0xca>
 8001c56:	2101      	movs	r1, #1
 8001c58:	1ac9      	subs	r1, r1, r3
 8001c5a:	2938      	cmp	r1, #56	; 0x38
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_dmul+0x458>
 8001c5e:	e642      	b.n	80018e6 <__aeabi_dmul+0xde>
 8001c60:	291f      	cmp	r1, #31
 8001c62:	dd47      	ble.n	8001cf4 <__aeabi_dmul+0x4ec>
 8001c64:	261f      	movs	r6, #31
 8001c66:	0025      	movs	r5, r4
 8001c68:	4276      	negs	r6, r6
 8001c6a:	1af3      	subs	r3, r6, r3
 8001c6c:	40dd      	lsrs	r5, r3
 8001c6e:	002b      	movs	r3, r5
 8001c70:	2920      	cmp	r1, #32
 8001c72:	d005      	beq.n	8001c80 <__aeabi_dmul+0x478>
 8001c74:	4942      	ldr	r1, [pc, #264]	; (8001d80 <__aeabi_dmul+0x578>)
 8001c76:	9d02      	ldr	r5, [sp, #8]
 8001c78:	468c      	mov	ip, r1
 8001c7a:	4465      	add	r5, ip
 8001c7c:	40ac      	lsls	r4, r5
 8001c7e:	4320      	orrs	r0, r4
 8001c80:	1e41      	subs	r1, r0, #1
 8001c82:	4188      	sbcs	r0, r1
 8001c84:	4318      	orrs	r0, r3
 8001c86:	2307      	movs	r3, #7
 8001c88:	001d      	movs	r5, r3
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	4005      	ands	r5, r0
 8001c8e:	4203      	tst	r3, r0
 8001c90:	d04a      	beq.n	8001d28 <__aeabi_dmul+0x520>
 8001c92:	230f      	movs	r3, #15
 8001c94:	2400      	movs	r4, #0
 8001c96:	4003      	ands	r3, r0
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d042      	beq.n	8001d22 <__aeabi_dmul+0x51a>
 8001c9c:	1d03      	adds	r3, r0, #4
 8001c9e:	4283      	cmp	r3, r0
 8001ca0:	4180      	sbcs	r0, r0
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	1824      	adds	r4, r4, r0
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	0223      	lsls	r3, r4, #8
 8001caa:	d53a      	bpl.n	8001d22 <__aeabi_dmul+0x51a>
 8001cac:	2301      	movs	r3, #1
 8001cae:	2400      	movs	r4, #0
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	e61b      	b.n	80018ec <__aeabi_dmul+0xe4>
 8001cb4:	f000 fd64 	bl	8002780 <__clzsi2>
 8001cb8:	0001      	movs	r1, r0
 8001cba:	0003      	movs	r3, r0
 8001cbc:	3115      	adds	r1, #21
 8001cbe:	3320      	adds	r3, #32
 8001cc0:	291c      	cmp	r1, #28
 8001cc2:	dd8f      	ble.n	8001be4 <__aeabi_dmul+0x3dc>
 8001cc4:	3808      	subs	r0, #8
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4084      	lsls	r4, r0
 8001cca:	4692      	mov	sl, r2
 8001ccc:	46a3      	mov	fp, r4
 8001cce:	e796      	b.n	8001bfe <__aeabi_dmul+0x3f6>
 8001cd0:	f000 fd56 	bl	8002780 <__clzsi2>
 8001cd4:	0001      	movs	r1, r0
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	3115      	adds	r1, #21
 8001cda:	3320      	adds	r3, #32
 8001cdc:	291c      	cmp	r1, #28
 8001cde:	dc00      	bgt.n	8001ce2 <__aeabi_dmul+0x4da>
 8001ce0:	e758      	b.n	8001b94 <__aeabi_dmul+0x38c>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	464c      	mov	r4, r9
 8001ce6:	3a08      	subs	r2, #8
 8001ce8:	2000      	movs	r0, #0
 8001cea:	4094      	lsls	r4, r2
 8001cec:	e75d      	b.n	8001baa <__aeabi_dmul+0x3a2>
 8001cee:	9b01      	ldr	r3, [sp, #4]
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	e711      	b.n	8001b18 <__aeabi_dmul+0x310>
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <__aeabi_dmul+0x57c>)
 8001cf6:	0026      	movs	r6, r4
 8001cf8:	469c      	mov	ip, r3
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	9d02      	ldr	r5, [sp, #8]
 8001cfe:	40cb      	lsrs	r3, r1
 8001d00:	4465      	add	r5, ip
 8001d02:	40ae      	lsls	r6, r5
 8001d04:	431e      	orrs	r6, r3
 8001d06:	0003      	movs	r3, r0
 8001d08:	40ab      	lsls	r3, r5
 8001d0a:	1e58      	subs	r0, r3, #1
 8001d0c:	4183      	sbcs	r3, r0
 8001d0e:	0030      	movs	r0, r6
 8001d10:	4318      	orrs	r0, r3
 8001d12:	40cc      	lsrs	r4, r1
 8001d14:	0743      	lsls	r3, r0, #29
 8001d16:	d0c7      	beq.n	8001ca8 <__aeabi_dmul+0x4a0>
 8001d18:	230f      	movs	r3, #15
 8001d1a:	4003      	ands	r3, r0
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d1bd      	bne.n	8001c9c <__aeabi_dmul+0x494>
 8001d20:	e7c2      	b.n	8001ca8 <__aeabi_dmul+0x4a0>
 8001d22:	0765      	lsls	r5, r4, #29
 8001d24:	0264      	lsls	r4, r4, #9
 8001d26:	0b24      	lsrs	r4, r4, #12
 8001d28:	08c0      	lsrs	r0, r0, #3
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4305      	orrs	r5, r0
 8001d2e:	e5dd      	b.n	80018ec <__aeabi_dmul+0xe4>
 8001d30:	2500      	movs	r5, #0
 8001d32:	2302      	movs	r3, #2
 8001d34:	2e0f      	cmp	r6, #15
 8001d36:	d10c      	bne.n	8001d52 <__aeabi_dmul+0x54a>
 8001d38:	2480      	movs	r4, #128	; 0x80
 8001d3a:	465b      	mov	r3, fp
 8001d3c:	0324      	lsls	r4, r4, #12
 8001d3e:	4223      	tst	r3, r4
 8001d40:	d00e      	beq.n	8001d60 <__aeabi_dmul+0x558>
 8001d42:	4221      	tst	r1, r4
 8001d44:	d10c      	bne.n	8001d60 <__aeabi_dmul+0x558>
 8001d46:	430c      	orrs	r4, r1
 8001d48:	0324      	lsls	r4, r4, #12
 8001d4a:	003a      	movs	r2, r7
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <__aeabi_dmul+0x580>)
 8001d4e:	0b24      	lsrs	r4, r4, #12
 8001d50:	e5cc      	b.n	80018ec <__aeabi_dmul+0xe4>
 8001d52:	2e0b      	cmp	r6, #11
 8001d54:	d000      	beq.n	8001d58 <__aeabi_dmul+0x550>
 8001d56:	e5a2      	b.n	800189e <__aeabi_dmul+0x96>
 8001d58:	468b      	mov	fp, r1
 8001d5a:	46aa      	mov	sl, r5
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	e5f7      	b.n	8001950 <__aeabi_dmul+0x148>
 8001d60:	2480      	movs	r4, #128	; 0x80
 8001d62:	465b      	mov	r3, fp
 8001d64:	0324      	lsls	r4, r4, #12
 8001d66:	431c      	orrs	r4, r3
 8001d68:	0324      	lsls	r4, r4, #12
 8001d6a:	4642      	mov	r2, r8
 8001d6c:	4655      	mov	r5, sl
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <__aeabi_dmul+0x580>)
 8001d70:	0b24      	lsrs	r4, r4, #12
 8001d72:	e5bb      	b.n	80018ec <__aeabi_dmul+0xe4>
 8001d74:	464d      	mov	r5, r9
 8001d76:	0021      	movs	r1, r4
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e7db      	b.n	8001d34 <__aeabi_dmul+0x52c>
 8001d7c:	fffffc0d 	.word	0xfffffc0d
 8001d80:	0000043e 	.word	0x0000043e
 8001d84:	0000041e 	.word	0x0000041e
 8001d88:	000007ff 	.word	0x000007ff

08001d8c <__aeabi_dsub>:
 8001d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8e:	4657      	mov	r7, sl
 8001d90:	464e      	mov	r6, r9
 8001d92:	4645      	mov	r5, r8
 8001d94:	46de      	mov	lr, fp
 8001d96:	b5e0      	push	{r5, r6, r7, lr}
 8001d98:	000d      	movs	r5, r1
 8001d9a:	0004      	movs	r4, r0
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0010      	movs	r0, r2
 8001da0:	032b      	lsls	r3, r5, #12
 8001da2:	0a5b      	lsrs	r3, r3, #9
 8001da4:	0f62      	lsrs	r2, r4, #29
 8001da6:	431a      	orrs	r2, r3
 8001da8:	00e3      	lsls	r3, r4, #3
 8001daa:	030c      	lsls	r4, r1, #12
 8001dac:	0a64      	lsrs	r4, r4, #9
 8001dae:	0f47      	lsrs	r7, r0, #29
 8001db0:	4327      	orrs	r7, r4
 8001db2:	4cd0      	ldr	r4, [pc, #832]	; (80020f4 <__aeabi_dsub+0x368>)
 8001db4:	006e      	lsls	r6, r5, #1
 8001db6:	4691      	mov	r9, r2
 8001db8:	b083      	sub	sp, #12
 8001dba:	004a      	lsls	r2, r1, #1
 8001dbc:	00c0      	lsls	r0, r0, #3
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	46a2      	mov	sl, r4
 8001dc2:	0d76      	lsrs	r6, r6, #21
 8001dc4:	0fed      	lsrs	r5, r5, #31
 8001dc6:	0d52      	lsrs	r2, r2, #21
 8001dc8:	0fc9      	lsrs	r1, r1, #31
 8001dca:	9001      	str	r0, [sp, #4]
 8001dcc:	42a2      	cmp	r2, r4
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x46>
 8001dd0:	e0b9      	b.n	8001f46 <__aeabi_dsub+0x1ba>
 8001dd2:	2401      	movs	r4, #1
 8001dd4:	4061      	eors	r1, r4
 8001dd6:	468b      	mov	fp, r1
 8001dd8:	428d      	cmp	r5, r1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x52>
 8001ddc:	e08d      	b.n	8001efa <__aeabi_dsub+0x16e>
 8001dde:	1ab4      	subs	r4, r6, r2
 8001de0:	46a4      	mov	ip, r4
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	dc00      	bgt.n	8001de8 <__aeabi_dsub+0x5c>
 8001de6:	e0b7      	b.n	8001f58 <__aeabi_dsub+0x1cc>
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x62>
 8001dec:	e0cb      	b.n	8001f86 <__aeabi_dsub+0x1fa>
 8001dee:	4ac1      	ldr	r2, [pc, #772]	; (80020f4 <__aeabi_dsub+0x368>)
 8001df0:	4296      	cmp	r6, r2
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x6a>
 8001df4:	e186      	b.n	8002104 <__aeabi_dsub+0x378>
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	0412      	lsls	r2, r2, #16
 8001dfa:	4317      	orrs	r7, r2
 8001dfc:	4662      	mov	r2, ip
 8001dfe:	2a38      	cmp	r2, #56	; 0x38
 8001e00:	dd00      	ble.n	8001e04 <__aeabi_dsub+0x78>
 8001e02:	e1a4      	b.n	800214e <__aeabi_dsub+0x3c2>
 8001e04:	2a1f      	cmp	r2, #31
 8001e06:	dd00      	ble.n	8001e0a <__aeabi_dsub+0x7e>
 8001e08:	e21d      	b.n	8002246 <__aeabi_dsub+0x4ba>
 8001e0a:	4661      	mov	r1, ip
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	003c      	movs	r4, r7
 8001e10:	1a52      	subs	r2, r2, r1
 8001e12:	0001      	movs	r1, r0
 8001e14:	4090      	lsls	r0, r2
 8001e16:	4094      	lsls	r4, r2
 8001e18:	1e42      	subs	r2, r0, #1
 8001e1a:	4190      	sbcs	r0, r2
 8001e1c:	4662      	mov	r2, ip
 8001e1e:	46a0      	mov	r8, r4
 8001e20:	4664      	mov	r4, ip
 8001e22:	40d7      	lsrs	r7, r2
 8001e24:	464a      	mov	r2, r9
 8001e26:	40e1      	lsrs	r1, r4
 8001e28:	4644      	mov	r4, r8
 8001e2a:	1bd2      	subs	r2, r2, r7
 8001e2c:	4691      	mov	r9, r2
 8001e2e:	430c      	orrs	r4, r1
 8001e30:	4304      	orrs	r4, r0
 8001e32:	1b1c      	subs	r4, r3, r4
 8001e34:	42a3      	cmp	r3, r4
 8001e36:	4192      	sbcs	r2, r2
 8001e38:	464b      	mov	r3, r9
 8001e3a:	4252      	negs	r2, r2
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	469a      	mov	sl, r3
 8001e40:	4653      	mov	r3, sl
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	d400      	bmi.n	8001e48 <__aeabi_dsub+0xbc>
 8001e46:	e12b      	b.n	80020a0 <__aeabi_dsub+0x314>
 8001e48:	4653      	mov	r3, sl
 8001e4a:	025a      	lsls	r2, r3, #9
 8001e4c:	0a53      	lsrs	r3, r2, #9
 8001e4e:	469a      	mov	sl, r3
 8001e50:	4653      	mov	r3, sl
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0xcc>
 8001e56:	e166      	b.n	8002126 <__aeabi_dsub+0x39a>
 8001e58:	4650      	mov	r0, sl
 8001e5a:	f000 fc91 	bl	8002780 <__clzsi2>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	3b08      	subs	r3, #8
 8001e62:	2220      	movs	r2, #32
 8001e64:	0020      	movs	r0, r4
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	4651      	mov	r1, sl
 8001e6a:	40d0      	lsrs	r0, r2
 8001e6c:	4099      	lsls	r1, r3
 8001e6e:	0002      	movs	r2, r0
 8001e70:	409c      	lsls	r4, r3
 8001e72:	430a      	orrs	r2, r1
 8001e74:	429e      	cmp	r6, r3
 8001e76:	dd00      	ble.n	8001e7a <__aeabi_dsub+0xee>
 8001e78:	e164      	b.n	8002144 <__aeabi_dsub+0x3b8>
 8001e7a:	1b9b      	subs	r3, r3, r6
 8001e7c:	1c59      	adds	r1, r3, #1
 8001e7e:	291f      	cmp	r1, #31
 8001e80:	dd00      	ble.n	8001e84 <__aeabi_dsub+0xf8>
 8001e82:	e0fe      	b.n	8002082 <__aeabi_dsub+0x2f6>
 8001e84:	2320      	movs	r3, #32
 8001e86:	0010      	movs	r0, r2
 8001e88:	0026      	movs	r6, r4
 8001e8a:	1a5b      	subs	r3, r3, r1
 8001e8c:	409c      	lsls	r4, r3
 8001e8e:	4098      	lsls	r0, r3
 8001e90:	40ce      	lsrs	r6, r1
 8001e92:	40ca      	lsrs	r2, r1
 8001e94:	1e63      	subs	r3, r4, #1
 8001e96:	419c      	sbcs	r4, r3
 8001e98:	4330      	orrs	r0, r6
 8001e9a:	4692      	mov	sl, r2
 8001e9c:	2600      	movs	r6, #0
 8001e9e:	4304      	orrs	r4, r0
 8001ea0:	0763      	lsls	r3, r4, #29
 8001ea2:	d009      	beq.n	8001eb8 <__aeabi_dsub+0x12c>
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	4023      	ands	r3, r4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d005      	beq.n	8001eb8 <__aeabi_dsub+0x12c>
 8001eac:	1d23      	adds	r3, r4, #4
 8001eae:	42a3      	cmp	r3, r4
 8001eb0:	41a4      	sbcs	r4, r4
 8001eb2:	4264      	negs	r4, r4
 8001eb4:	44a2      	add	sl, r4
 8001eb6:	001c      	movs	r4, r3
 8001eb8:	4653      	mov	r3, sl
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	d400      	bmi.n	8001ec0 <__aeabi_dsub+0x134>
 8001ebe:	e0f2      	b.n	80020a6 <__aeabi_dsub+0x31a>
 8001ec0:	4b8c      	ldr	r3, [pc, #560]	; (80020f4 <__aeabi_dsub+0x368>)
 8001ec2:	3601      	adds	r6, #1
 8001ec4:	429e      	cmp	r6, r3
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x13e>
 8001ec8:	e10f      	b.n	80020ea <__aeabi_dsub+0x35e>
 8001eca:	4653      	mov	r3, sl
 8001ecc:	498a      	ldr	r1, [pc, #552]	; (80020f8 <__aeabi_dsub+0x36c>)
 8001ece:	08e4      	lsrs	r4, r4, #3
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	075b      	lsls	r3, r3, #29
 8001ed6:	4323      	orrs	r3, r4
 8001ed8:	0572      	lsls	r2, r6, #21
 8001eda:	024c      	lsls	r4, r1, #9
 8001edc:	0b24      	lsrs	r4, r4, #12
 8001ede:	0d52      	lsrs	r2, r2, #21
 8001ee0:	0512      	lsls	r2, r2, #20
 8001ee2:	4322      	orrs	r2, r4
 8001ee4:	07ed      	lsls	r5, r5, #31
 8001ee6:	432a      	orrs	r2, r5
 8001ee8:	0018      	movs	r0, r3
 8001eea:	0011      	movs	r1, r2
 8001eec:	b003      	add	sp, #12
 8001eee:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef0:	46bb      	mov	fp, r7
 8001ef2:	46b2      	mov	sl, r6
 8001ef4:	46a9      	mov	r9, r5
 8001ef6:	46a0      	mov	r8, r4
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efa:	1ab4      	subs	r4, r6, r2
 8001efc:	46a4      	mov	ip, r4
 8001efe:	2c00      	cmp	r4, #0
 8001f00:	dd59      	ble.n	8001fb6 <__aeabi_dsub+0x22a>
 8001f02:	2a00      	cmp	r2, #0
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x17c>
 8001f06:	e0b0      	b.n	800206a <__aeabi_dsub+0x2de>
 8001f08:	4556      	cmp	r6, sl
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x182>
 8001f0c:	e0fa      	b.n	8002104 <__aeabi_dsub+0x378>
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	0412      	lsls	r2, r2, #16
 8001f12:	4317      	orrs	r7, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	2a38      	cmp	r2, #56	; 0x38
 8001f18:	dd00      	ble.n	8001f1c <__aeabi_dsub+0x190>
 8001f1a:	e0d4      	b.n	80020c6 <__aeabi_dsub+0x33a>
 8001f1c:	2a1f      	cmp	r2, #31
 8001f1e:	dc00      	bgt.n	8001f22 <__aeabi_dsub+0x196>
 8001f20:	e1c0      	b.n	80022a4 <__aeabi_dsub+0x518>
 8001f22:	0039      	movs	r1, r7
 8001f24:	3a20      	subs	r2, #32
 8001f26:	40d1      	lsrs	r1, r2
 8001f28:	4662      	mov	r2, ip
 8001f2a:	2a20      	cmp	r2, #32
 8001f2c:	d006      	beq.n	8001f3c <__aeabi_dsub+0x1b0>
 8001f2e:	4664      	mov	r4, ip
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	1b12      	subs	r2, r2, r4
 8001f34:	003c      	movs	r4, r7
 8001f36:	4094      	lsls	r4, r2
 8001f38:	4304      	orrs	r4, r0
 8001f3a:	9401      	str	r4, [sp, #4]
 8001f3c:	9c01      	ldr	r4, [sp, #4]
 8001f3e:	1e62      	subs	r2, r4, #1
 8001f40:	4194      	sbcs	r4, r2
 8001f42:	430c      	orrs	r4, r1
 8001f44:	e0c3      	b.n	80020ce <__aeabi_dsub+0x342>
 8001f46:	003c      	movs	r4, r7
 8001f48:	4304      	orrs	r4, r0
 8001f4a:	d02b      	beq.n	8001fa4 <__aeabi_dsub+0x218>
 8001f4c:	468b      	mov	fp, r1
 8001f4e:	428d      	cmp	r5, r1
 8001f50:	d02e      	beq.n	8001fb0 <__aeabi_dsub+0x224>
 8001f52:	4c6a      	ldr	r4, [pc, #424]	; (80020fc <__aeabi_dsub+0x370>)
 8001f54:	46a4      	mov	ip, r4
 8001f56:	44b4      	add	ip, r6
 8001f58:	4664      	mov	r4, ip
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	d05f      	beq.n	800201e <__aeabi_dsub+0x292>
 8001f5e:	1b94      	subs	r4, r2, r6
 8001f60:	46a4      	mov	ip, r4
 8001f62:	2e00      	cmp	r6, #0
 8001f64:	d000      	beq.n	8001f68 <__aeabi_dsub+0x1dc>
 8001f66:	e120      	b.n	80021aa <__aeabi_dsub+0x41e>
 8001f68:	464c      	mov	r4, r9
 8001f6a:	431c      	orrs	r4, r3
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x1e4>
 8001f6e:	e1c7      	b.n	8002300 <__aeabi_dsub+0x574>
 8001f70:	4661      	mov	r1, ip
 8001f72:	1e4c      	subs	r4, r1, #1
 8001f74:	2901      	cmp	r1, #1
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x1ee>
 8001f78:	e223      	b.n	80023c2 <__aeabi_dsub+0x636>
 8001f7a:	4d5e      	ldr	r5, [pc, #376]	; (80020f4 <__aeabi_dsub+0x368>)
 8001f7c:	45ac      	cmp	ip, r5
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dsub+0x1f6>
 8001f80:	e1d8      	b.n	8002334 <__aeabi_dsub+0x5a8>
 8001f82:	46a4      	mov	ip, r4
 8001f84:	e11a      	b.n	80021bc <__aeabi_dsub+0x430>
 8001f86:	003a      	movs	r2, r7
 8001f88:	4302      	orrs	r2, r0
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x202>
 8001f8c:	e0e4      	b.n	8002158 <__aeabi_dsub+0x3cc>
 8001f8e:	0022      	movs	r2, r4
 8001f90:	3a01      	subs	r2, #1
 8001f92:	2c01      	cmp	r4, #1
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x20c>
 8001f96:	e1c3      	b.n	8002320 <__aeabi_dsub+0x594>
 8001f98:	4956      	ldr	r1, [pc, #344]	; (80020f4 <__aeabi_dsub+0x368>)
 8001f9a:	428c      	cmp	r4, r1
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x214>
 8001f9e:	e0b1      	b.n	8002104 <__aeabi_dsub+0x378>
 8001fa0:	4694      	mov	ip, r2
 8001fa2:	e72b      	b.n	8001dfc <__aeabi_dsub+0x70>
 8001fa4:	2401      	movs	r4, #1
 8001fa6:	4061      	eors	r1, r4
 8001fa8:	468b      	mov	fp, r1
 8001faa:	428d      	cmp	r5, r1
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x224>
 8001fae:	e716      	b.n	8001dde <__aeabi_dsub+0x52>
 8001fb0:	4952      	ldr	r1, [pc, #328]	; (80020fc <__aeabi_dsub+0x370>)
 8001fb2:	468c      	mov	ip, r1
 8001fb4:	44b4      	add	ip, r6
 8001fb6:	4664      	mov	r4, ip
 8001fb8:	2c00      	cmp	r4, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dsub+0x232>
 8001fbc:	e0d3      	b.n	8002166 <__aeabi_dsub+0x3da>
 8001fbe:	1b91      	subs	r1, r2, r6
 8001fc0:	468c      	mov	ip, r1
 8001fc2:	2e00      	cmp	r6, #0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x23c>
 8001fc6:	e15e      	b.n	8002286 <__aeabi_dsub+0x4fa>
 8001fc8:	494a      	ldr	r1, [pc, #296]	; (80020f4 <__aeabi_dsub+0x368>)
 8001fca:	428a      	cmp	r2, r1
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dsub+0x244>
 8001fce:	e1be      	b.n	800234e <__aeabi_dsub+0x5c2>
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	464c      	mov	r4, r9
 8001fd4:	0409      	lsls	r1, r1, #16
 8001fd6:	430c      	orrs	r4, r1
 8001fd8:	46a1      	mov	r9, r4
 8001fda:	4661      	mov	r1, ip
 8001fdc:	2938      	cmp	r1, #56	; 0x38
 8001fde:	dd00      	ble.n	8001fe2 <__aeabi_dsub+0x256>
 8001fe0:	e1ba      	b.n	8002358 <__aeabi_dsub+0x5cc>
 8001fe2:	291f      	cmp	r1, #31
 8001fe4:	dd00      	ble.n	8001fe8 <__aeabi_dsub+0x25c>
 8001fe6:	e227      	b.n	8002438 <__aeabi_dsub+0x6ac>
 8001fe8:	2420      	movs	r4, #32
 8001fea:	1a64      	subs	r4, r4, r1
 8001fec:	4649      	mov	r1, r9
 8001fee:	40a1      	lsls	r1, r4
 8001ff0:	001e      	movs	r6, r3
 8001ff2:	4688      	mov	r8, r1
 8001ff4:	4661      	mov	r1, ip
 8001ff6:	40a3      	lsls	r3, r4
 8001ff8:	40ce      	lsrs	r6, r1
 8001ffa:	4641      	mov	r1, r8
 8001ffc:	1e5c      	subs	r4, r3, #1
 8001ffe:	41a3      	sbcs	r3, r4
 8002000:	4331      	orrs	r1, r6
 8002002:	4319      	orrs	r1, r3
 8002004:	000c      	movs	r4, r1
 8002006:	4663      	mov	r3, ip
 8002008:	4649      	mov	r1, r9
 800200a:	40d9      	lsrs	r1, r3
 800200c:	187f      	adds	r7, r7, r1
 800200e:	1824      	adds	r4, r4, r0
 8002010:	4284      	cmp	r4, r0
 8002012:	419b      	sbcs	r3, r3
 8002014:	425b      	negs	r3, r3
 8002016:	469a      	mov	sl, r3
 8002018:	0016      	movs	r6, r2
 800201a:	44ba      	add	sl, r7
 800201c:	e05d      	b.n	80020da <__aeabi_dsub+0x34e>
 800201e:	4c38      	ldr	r4, [pc, #224]	; (8002100 <__aeabi_dsub+0x374>)
 8002020:	1c72      	adds	r2, r6, #1
 8002022:	4222      	tst	r2, r4
 8002024:	d000      	beq.n	8002028 <__aeabi_dsub+0x29c>
 8002026:	e0df      	b.n	80021e8 <__aeabi_dsub+0x45c>
 8002028:	464a      	mov	r2, r9
 800202a:	431a      	orrs	r2, r3
 800202c:	2e00      	cmp	r6, #0
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x2a6>
 8002030:	e15c      	b.n	80022ec <__aeabi_dsub+0x560>
 8002032:	2a00      	cmp	r2, #0
 8002034:	d100      	bne.n	8002038 <__aeabi_dsub+0x2ac>
 8002036:	e1cf      	b.n	80023d8 <__aeabi_dsub+0x64c>
 8002038:	003a      	movs	r2, r7
 800203a:	4302      	orrs	r2, r0
 800203c:	d100      	bne.n	8002040 <__aeabi_dsub+0x2b4>
 800203e:	e17f      	b.n	8002340 <__aeabi_dsub+0x5b4>
 8002040:	1a1c      	subs	r4, r3, r0
 8002042:	464a      	mov	r2, r9
 8002044:	42a3      	cmp	r3, r4
 8002046:	4189      	sbcs	r1, r1
 8002048:	1bd2      	subs	r2, r2, r7
 800204a:	4249      	negs	r1, r1
 800204c:	1a52      	subs	r2, r2, r1
 800204e:	4692      	mov	sl, r2
 8002050:	0212      	lsls	r2, r2, #8
 8002052:	d400      	bmi.n	8002056 <__aeabi_dsub+0x2ca>
 8002054:	e20a      	b.n	800246c <__aeabi_dsub+0x6e0>
 8002056:	1ac4      	subs	r4, r0, r3
 8002058:	42a0      	cmp	r0, r4
 800205a:	4180      	sbcs	r0, r0
 800205c:	464b      	mov	r3, r9
 800205e:	4240      	negs	r0, r0
 8002060:	1aff      	subs	r7, r7, r3
 8002062:	1a3b      	subs	r3, r7, r0
 8002064:	469a      	mov	sl, r3
 8002066:	465d      	mov	r5, fp
 8002068:	e71a      	b.n	8001ea0 <__aeabi_dsub+0x114>
 800206a:	003a      	movs	r2, r7
 800206c:	4302      	orrs	r2, r0
 800206e:	d073      	beq.n	8002158 <__aeabi_dsub+0x3cc>
 8002070:	0022      	movs	r2, r4
 8002072:	3a01      	subs	r2, #1
 8002074:	2c01      	cmp	r4, #1
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x2ee>
 8002078:	e0cb      	b.n	8002212 <__aeabi_dsub+0x486>
 800207a:	4554      	cmp	r4, sl
 800207c:	d042      	beq.n	8002104 <__aeabi_dsub+0x378>
 800207e:	4694      	mov	ip, r2
 8002080:	e748      	b.n	8001f14 <__aeabi_dsub+0x188>
 8002082:	0010      	movs	r0, r2
 8002084:	3b1f      	subs	r3, #31
 8002086:	40d8      	lsrs	r0, r3
 8002088:	2920      	cmp	r1, #32
 800208a:	d003      	beq.n	8002094 <__aeabi_dsub+0x308>
 800208c:	2340      	movs	r3, #64	; 0x40
 800208e:	1a5b      	subs	r3, r3, r1
 8002090:	409a      	lsls	r2, r3
 8002092:	4314      	orrs	r4, r2
 8002094:	1e63      	subs	r3, r4, #1
 8002096:	419c      	sbcs	r4, r3
 8002098:	2300      	movs	r3, #0
 800209a:	2600      	movs	r6, #0
 800209c:	469a      	mov	sl, r3
 800209e:	4304      	orrs	r4, r0
 80020a0:	0763      	lsls	r3, r4, #29
 80020a2:	d000      	beq.n	80020a6 <__aeabi_dsub+0x31a>
 80020a4:	e6fe      	b.n	8001ea4 <__aeabi_dsub+0x118>
 80020a6:	4652      	mov	r2, sl
 80020a8:	08e3      	lsrs	r3, r4, #3
 80020aa:	0752      	lsls	r2, r2, #29
 80020ac:	4313      	orrs	r3, r2
 80020ae:	4652      	mov	r2, sl
 80020b0:	46b4      	mov	ip, r6
 80020b2:	08d2      	lsrs	r2, r2, #3
 80020b4:	490f      	ldr	r1, [pc, #60]	; (80020f4 <__aeabi_dsub+0x368>)
 80020b6:	458c      	cmp	ip, r1
 80020b8:	d02a      	beq.n	8002110 <__aeabi_dsub+0x384>
 80020ba:	0312      	lsls	r2, r2, #12
 80020bc:	0b14      	lsrs	r4, r2, #12
 80020be:	4662      	mov	r2, ip
 80020c0:	0552      	lsls	r2, r2, #21
 80020c2:	0d52      	lsrs	r2, r2, #21
 80020c4:	e70c      	b.n	8001ee0 <__aeabi_dsub+0x154>
 80020c6:	003c      	movs	r4, r7
 80020c8:	4304      	orrs	r4, r0
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	18e4      	adds	r4, r4, r3
 80020d0:	429c      	cmp	r4, r3
 80020d2:	4192      	sbcs	r2, r2
 80020d4:	4252      	negs	r2, r2
 80020d6:	444a      	add	r2, r9
 80020d8:	4692      	mov	sl, r2
 80020da:	4653      	mov	r3, sl
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	d5df      	bpl.n	80020a0 <__aeabi_dsub+0x314>
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__aeabi_dsub+0x368>)
 80020e2:	3601      	adds	r6, #1
 80020e4:	429e      	cmp	r6, r3
 80020e6:	d000      	beq.n	80020ea <__aeabi_dsub+0x35e>
 80020e8:	e0a0      	b.n	800222c <__aeabi_dsub+0x4a0>
 80020ea:	0032      	movs	r2, r6
 80020ec:	2400      	movs	r4, #0
 80020ee:	2300      	movs	r3, #0
 80020f0:	e6f6      	b.n	8001ee0 <__aeabi_dsub+0x154>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	000007ff 	.word	0x000007ff
 80020f8:	ff7fffff 	.word	0xff7fffff
 80020fc:	fffff801 	.word	0xfffff801
 8002100:	000007fe 	.word	0x000007fe
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	464a      	mov	r2, r9
 8002108:	0752      	lsls	r2, r2, #29
 800210a:	4313      	orrs	r3, r2
 800210c:	464a      	mov	r2, r9
 800210e:	08d2      	lsrs	r2, r2, #3
 8002110:	0019      	movs	r1, r3
 8002112:	4311      	orrs	r1, r2
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x38c>
 8002116:	e1b5      	b.n	8002484 <__aeabi_dsub+0x6f8>
 8002118:	2480      	movs	r4, #128	; 0x80
 800211a:	0324      	lsls	r4, r4, #12
 800211c:	4314      	orrs	r4, r2
 800211e:	0324      	lsls	r4, r4, #12
 8002120:	4ad5      	ldr	r2, [pc, #852]	; (8002478 <__aeabi_dsub+0x6ec>)
 8002122:	0b24      	lsrs	r4, r4, #12
 8002124:	e6dc      	b.n	8001ee0 <__aeabi_dsub+0x154>
 8002126:	0020      	movs	r0, r4
 8002128:	f000 fb2a 	bl	8002780 <__clzsi2>
 800212c:	0003      	movs	r3, r0
 800212e:	3318      	adds	r3, #24
 8002130:	2b1f      	cmp	r3, #31
 8002132:	dc00      	bgt.n	8002136 <__aeabi_dsub+0x3aa>
 8002134:	e695      	b.n	8001e62 <__aeabi_dsub+0xd6>
 8002136:	0022      	movs	r2, r4
 8002138:	3808      	subs	r0, #8
 800213a:	4082      	lsls	r2, r0
 800213c:	2400      	movs	r4, #0
 800213e:	429e      	cmp	r6, r3
 8002140:	dc00      	bgt.n	8002144 <__aeabi_dsub+0x3b8>
 8002142:	e69a      	b.n	8001e7a <__aeabi_dsub+0xee>
 8002144:	1af6      	subs	r6, r6, r3
 8002146:	4bcd      	ldr	r3, [pc, #820]	; (800247c <__aeabi_dsub+0x6f0>)
 8002148:	401a      	ands	r2, r3
 800214a:	4692      	mov	sl, r2
 800214c:	e6a8      	b.n	8001ea0 <__aeabi_dsub+0x114>
 800214e:	003c      	movs	r4, r7
 8002150:	4304      	orrs	r4, r0
 8002152:	1e62      	subs	r2, r4, #1
 8002154:	4194      	sbcs	r4, r2
 8002156:	e66c      	b.n	8001e32 <__aeabi_dsub+0xa6>
 8002158:	464a      	mov	r2, r9
 800215a:	08db      	lsrs	r3, r3, #3
 800215c:	0752      	lsls	r2, r2, #29
 800215e:	4313      	orrs	r3, r2
 8002160:	464a      	mov	r2, r9
 8002162:	08d2      	lsrs	r2, r2, #3
 8002164:	e7a6      	b.n	80020b4 <__aeabi_dsub+0x328>
 8002166:	4cc6      	ldr	r4, [pc, #792]	; (8002480 <__aeabi_dsub+0x6f4>)
 8002168:	1c72      	adds	r2, r6, #1
 800216a:	4222      	tst	r2, r4
 800216c:	d000      	beq.n	8002170 <__aeabi_dsub+0x3e4>
 800216e:	e0ac      	b.n	80022ca <__aeabi_dsub+0x53e>
 8002170:	464a      	mov	r2, r9
 8002172:	431a      	orrs	r2, r3
 8002174:	2e00      	cmp	r6, #0
 8002176:	d000      	beq.n	800217a <__aeabi_dsub+0x3ee>
 8002178:	e105      	b.n	8002386 <__aeabi_dsub+0x5fa>
 800217a:	2a00      	cmp	r2, #0
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x3f4>
 800217e:	e156      	b.n	800242e <__aeabi_dsub+0x6a2>
 8002180:	003a      	movs	r2, r7
 8002182:	4302      	orrs	r2, r0
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x3fc>
 8002186:	e0db      	b.n	8002340 <__aeabi_dsub+0x5b4>
 8002188:	181c      	adds	r4, r3, r0
 800218a:	429c      	cmp	r4, r3
 800218c:	419b      	sbcs	r3, r3
 800218e:	444f      	add	r7, r9
 8002190:	46ba      	mov	sl, r7
 8002192:	425b      	negs	r3, r3
 8002194:	449a      	add	sl, r3
 8002196:	4653      	mov	r3, sl
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	d400      	bmi.n	800219e <__aeabi_dsub+0x412>
 800219c:	e780      	b.n	80020a0 <__aeabi_dsub+0x314>
 800219e:	4652      	mov	r2, sl
 80021a0:	4bb6      	ldr	r3, [pc, #728]	; (800247c <__aeabi_dsub+0x6f0>)
 80021a2:	2601      	movs	r6, #1
 80021a4:	401a      	ands	r2, r3
 80021a6:	4692      	mov	sl, r2
 80021a8:	e77a      	b.n	80020a0 <__aeabi_dsub+0x314>
 80021aa:	4cb3      	ldr	r4, [pc, #716]	; (8002478 <__aeabi_dsub+0x6ec>)
 80021ac:	42a2      	cmp	r2, r4
 80021ae:	d100      	bne.n	80021b2 <__aeabi_dsub+0x426>
 80021b0:	e0c0      	b.n	8002334 <__aeabi_dsub+0x5a8>
 80021b2:	2480      	movs	r4, #128	; 0x80
 80021b4:	464d      	mov	r5, r9
 80021b6:	0424      	lsls	r4, r4, #16
 80021b8:	4325      	orrs	r5, r4
 80021ba:	46a9      	mov	r9, r5
 80021bc:	4664      	mov	r4, ip
 80021be:	2c38      	cmp	r4, #56	; 0x38
 80021c0:	dc53      	bgt.n	800226a <__aeabi_dsub+0x4de>
 80021c2:	4661      	mov	r1, ip
 80021c4:	2c1f      	cmp	r4, #31
 80021c6:	dd00      	ble.n	80021ca <__aeabi_dsub+0x43e>
 80021c8:	e0cd      	b.n	8002366 <__aeabi_dsub+0x5da>
 80021ca:	2520      	movs	r5, #32
 80021cc:	001e      	movs	r6, r3
 80021ce:	1b2d      	subs	r5, r5, r4
 80021d0:	464c      	mov	r4, r9
 80021d2:	40ab      	lsls	r3, r5
 80021d4:	40ac      	lsls	r4, r5
 80021d6:	40ce      	lsrs	r6, r1
 80021d8:	1e5d      	subs	r5, r3, #1
 80021da:	41ab      	sbcs	r3, r5
 80021dc:	4334      	orrs	r4, r6
 80021de:	4323      	orrs	r3, r4
 80021e0:	464c      	mov	r4, r9
 80021e2:	40cc      	lsrs	r4, r1
 80021e4:	1b3f      	subs	r7, r7, r4
 80021e6:	e045      	b.n	8002274 <__aeabi_dsub+0x4e8>
 80021e8:	464a      	mov	r2, r9
 80021ea:	1a1c      	subs	r4, r3, r0
 80021ec:	1bd1      	subs	r1, r2, r7
 80021ee:	42a3      	cmp	r3, r4
 80021f0:	4192      	sbcs	r2, r2
 80021f2:	4252      	negs	r2, r2
 80021f4:	4692      	mov	sl, r2
 80021f6:	000a      	movs	r2, r1
 80021f8:	4651      	mov	r1, sl
 80021fa:	1a52      	subs	r2, r2, r1
 80021fc:	4692      	mov	sl, r2
 80021fe:	0212      	lsls	r2, r2, #8
 8002200:	d500      	bpl.n	8002204 <__aeabi_dsub+0x478>
 8002202:	e083      	b.n	800230c <__aeabi_dsub+0x580>
 8002204:	4653      	mov	r3, sl
 8002206:	4323      	orrs	r3, r4
 8002208:	d000      	beq.n	800220c <__aeabi_dsub+0x480>
 800220a:	e621      	b.n	8001e50 <__aeabi_dsub+0xc4>
 800220c:	2200      	movs	r2, #0
 800220e:	2500      	movs	r5, #0
 8002210:	e753      	b.n	80020ba <__aeabi_dsub+0x32e>
 8002212:	181c      	adds	r4, r3, r0
 8002214:	429c      	cmp	r4, r3
 8002216:	419b      	sbcs	r3, r3
 8002218:	444f      	add	r7, r9
 800221a:	46ba      	mov	sl, r7
 800221c:	425b      	negs	r3, r3
 800221e:	449a      	add	sl, r3
 8002220:	4653      	mov	r3, sl
 8002222:	2601      	movs	r6, #1
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	d400      	bmi.n	800222a <__aeabi_dsub+0x49e>
 8002228:	e73a      	b.n	80020a0 <__aeabi_dsub+0x314>
 800222a:	2602      	movs	r6, #2
 800222c:	4652      	mov	r2, sl
 800222e:	4b93      	ldr	r3, [pc, #588]	; (800247c <__aeabi_dsub+0x6f0>)
 8002230:	2101      	movs	r1, #1
 8002232:	401a      	ands	r2, r3
 8002234:	0013      	movs	r3, r2
 8002236:	4021      	ands	r1, r4
 8002238:	0862      	lsrs	r2, r4, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	07dc      	lsls	r4, r3, #31
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	469a      	mov	sl, r3
 8002242:	4314      	orrs	r4, r2
 8002244:	e62c      	b.n	8001ea0 <__aeabi_dsub+0x114>
 8002246:	0039      	movs	r1, r7
 8002248:	3a20      	subs	r2, #32
 800224a:	40d1      	lsrs	r1, r2
 800224c:	4662      	mov	r2, ip
 800224e:	2a20      	cmp	r2, #32
 8002250:	d006      	beq.n	8002260 <__aeabi_dsub+0x4d4>
 8002252:	4664      	mov	r4, ip
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	1b12      	subs	r2, r2, r4
 8002258:	003c      	movs	r4, r7
 800225a:	4094      	lsls	r4, r2
 800225c:	4304      	orrs	r4, r0
 800225e:	9401      	str	r4, [sp, #4]
 8002260:	9c01      	ldr	r4, [sp, #4]
 8002262:	1e62      	subs	r2, r4, #1
 8002264:	4194      	sbcs	r4, r2
 8002266:	430c      	orrs	r4, r1
 8002268:	e5e3      	b.n	8001e32 <__aeabi_dsub+0xa6>
 800226a:	4649      	mov	r1, r9
 800226c:	4319      	orrs	r1, r3
 800226e:	000b      	movs	r3, r1
 8002270:	1e5c      	subs	r4, r3, #1
 8002272:	41a3      	sbcs	r3, r4
 8002274:	1ac4      	subs	r4, r0, r3
 8002276:	42a0      	cmp	r0, r4
 8002278:	419b      	sbcs	r3, r3
 800227a:	425b      	negs	r3, r3
 800227c:	1afb      	subs	r3, r7, r3
 800227e:	469a      	mov	sl, r3
 8002280:	465d      	mov	r5, fp
 8002282:	0016      	movs	r6, r2
 8002284:	e5dc      	b.n	8001e40 <__aeabi_dsub+0xb4>
 8002286:	4649      	mov	r1, r9
 8002288:	4319      	orrs	r1, r3
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x502>
 800228c:	e0ae      	b.n	80023ec <__aeabi_dsub+0x660>
 800228e:	4661      	mov	r1, ip
 8002290:	4664      	mov	r4, ip
 8002292:	3901      	subs	r1, #1
 8002294:	2c01      	cmp	r4, #1
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x50e>
 8002298:	e0e0      	b.n	800245c <__aeabi_dsub+0x6d0>
 800229a:	4c77      	ldr	r4, [pc, #476]	; (8002478 <__aeabi_dsub+0x6ec>)
 800229c:	45a4      	cmp	ip, r4
 800229e:	d056      	beq.n	800234e <__aeabi_dsub+0x5c2>
 80022a0:	468c      	mov	ip, r1
 80022a2:	e69a      	b.n	8001fda <__aeabi_dsub+0x24e>
 80022a4:	4661      	mov	r1, ip
 80022a6:	2220      	movs	r2, #32
 80022a8:	003c      	movs	r4, r7
 80022aa:	1a52      	subs	r2, r2, r1
 80022ac:	4094      	lsls	r4, r2
 80022ae:	0001      	movs	r1, r0
 80022b0:	4090      	lsls	r0, r2
 80022b2:	46a0      	mov	r8, r4
 80022b4:	4664      	mov	r4, ip
 80022b6:	1e42      	subs	r2, r0, #1
 80022b8:	4190      	sbcs	r0, r2
 80022ba:	4662      	mov	r2, ip
 80022bc:	40e1      	lsrs	r1, r4
 80022be:	4644      	mov	r4, r8
 80022c0:	40d7      	lsrs	r7, r2
 80022c2:	430c      	orrs	r4, r1
 80022c4:	4304      	orrs	r4, r0
 80022c6:	44b9      	add	r9, r7
 80022c8:	e701      	b.n	80020ce <__aeabi_dsub+0x342>
 80022ca:	496b      	ldr	r1, [pc, #428]	; (8002478 <__aeabi_dsub+0x6ec>)
 80022cc:	428a      	cmp	r2, r1
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x546>
 80022d0:	e70c      	b.n	80020ec <__aeabi_dsub+0x360>
 80022d2:	1818      	adds	r0, r3, r0
 80022d4:	4298      	cmp	r0, r3
 80022d6:	419b      	sbcs	r3, r3
 80022d8:	444f      	add	r7, r9
 80022da:	425b      	negs	r3, r3
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	07dc      	lsls	r4, r3, #31
 80022e0:	0840      	lsrs	r0, r0, #1
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	469a      	mov	sl, r3
 80022e6:	0016      	movs	r6, r2
 80022e8:	4304      	orrs	r4, r0
 80022ea:	e6d9      	b.n	80020a0 <__aeabi_dsub+0x314>
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d000      	beq.n	80022f2 <__aeabi_dsub+0x566>
 80022f0:	e081      	b.n	80023f6 <__aeabi_dsub+0x66a>
 80022f2:	003b      	movs	r3, r7
 80022f4:	4303      	orrs	r3, r0
 80022f6:	d11d      	bne.n	8002334 <__aeabi_dsub+0x5a8>
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	2500      	movs	r5, #0
 80022fc:	0312      	lsls	r2, r2, #12
 80022fe:	e70b      	b.n	8002118 <__aeabi_dsub+0x38c>
 8002300:	08c0      	lsrs	r0, r0, #3
 8002302:	077b      	lsls	r3, r7, #29
 8002304:	465d      	mov	r5, fp
 8002306:	4303      	orrs	r3, r0
 8002308:	08fa      	lsrs	r2, r7, #3
 800230a:	e6d3      	b.n	80020b4 <__aeabi_dsub+0x328>
 800230c:	1ac4      	subs	r4, r0, r3
 800230e:	42a0      	cmp	r0, r4
 8002310:	4180      	sbcs	r0, r0
 8002312:	464b      	mov	r3, r9
 8002314:	4240      	negs	r0, r0
 8002316:	1aff      	subs	r7, r7, r3
 8002318:	1a3b      	subs	r3, r7, r0
 800231a:	469a      	mov	sl, r3
 800231c:	465d      	mov	r5, fp
 800231e:	e597      	b.n	8001e50 <__aeabi_dsub+0xc4>
 8002320:	1a1c      	subs	r4, r3, r0
 8002322:	464a      	mov	r2, r9
 8002324:	42a3      	cmp	r3, r4
 8002326:	419b      	sbcs	r3, r3
 8002328:	1bd7      	subs	r7, r2, r7
 800232a:	425b      	negs	r3, r3
 800232c:	1afb      	subs	r3, r7, r3
 800232e:	469a      	mov	sl, r3
 8002330:	2601      	movs	r6, #1
 8002332:	e585      	b.n	8001e40 <__aeabi_dsub+0xb4>
 8002334:	08c0      	lsrs	r0, r0, #3
 8002336:	077b      	lsls	r3, r7, #29
 8002338:	465d      	mov	r5, fp
 800233a:	4303      	orrs	r3, r0
 800233c:	08fa      	lsrs	r2, r7, #3
 800233e:	e6e7      	b.n	8002110 <__aeabi_dsub+0x384>
 8002340:	464a      	mov	r2, r9
 8002342:	08db      	lsrs	r3, r3, #3
 8002344:	0752      	lsls	r2, r2, #29
 8002346:	4313      	orrs	r3, r2
 8002348:	464a      	mov	r2, r9
 800234a:	08d2      	lsrs	r2, r2, #3
 800234c:	e6b5      	b.n	80020ba <__aeabi_dsub+0x32e>
 800234e:	08c0      	lsrs	r0, r0, #3
 8002350:	077b      	lsls	r3, r7, #29
 8002352:	4303      	orrs	r3, r0
 8002354:	08fa      	lsrs	r2, r7, #3
 8002356:	e6db      	b.n	8002110 <__aeabi_dsub+0x384>
 8002358:	4649      	mov	r1, r9
 800235a:	4319      	orrs	r1, r3
 800235c:	000b      	movs	r3, r1
 800235e:	1e59      	subs	r1, r3, #1
 8002360:	418b      	sbcs	r3, r1
 8002362:	001c      	movs	r4, r3
 8002364:	e653      	b.n	800200e <__aeabi_dsub+0x282>
 8002366:	464d      	mov	r5, r9
 8002368:	3c20      	subs	r4, #32
 800236a:	40e5      	lsrs	r5, r4
 800236c:	2920      	cmp	r1, #32
 800236e:	d005      	beq.n	800237c <__aeabi_dsub+0x5f0>
 8002370:	2440      	movs	r4, #64	; 0x40
 8002372:	1a64      	subs	r4, r4, r1
 8002374:	4649      	mov	r1, r9
 8002376:	40a1      	lsls	r1, r4
 8002378:	430b      	orrs	r3, r1
 800237a:	4698      	mov	r8, r3
 800237c:	4643      	mov	r3, r8
 800237e:	1e5c      	subs	r4, r3, #1
 8002380:	41a3      	sbcs	r3, r4
 8002382:	432b      	orrs	r3, r5
 8002384:	e776      	b.n	8002274 <__aeabi_dsub+0x4e8>
 8002386:	2a00      	cmp	r2, #0
 8002388:	d0e1      	beq.n	800234e <__aeabi_dsub+0x5c2>
 800238a:	003a      	movs	r2, r7
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	4302      	orrs	r2, r0
 8002390:	d100      	bne.n	8002394 <__aeabi_dsub+0x608>
 8002392:	e6b8      	b.n	8002106 <__aeabi_dsub+0x37a>
 8002394:	464a      	mov	r2, r9
 8002396:	0752      	lsls	r2, r2, #29
 8002398:	2480      	movs	r4, #128	; 0x80
 800239a:	4313      	orrs	r3, r2
 800239c:	464a      	mov	r2, r9
 800239e:	0324      	lsls	r4, r4, #12
 80023a0:	08d2      	lsrs	r2, r2, #3
 80023a2:	4222      	tst	r2, r4
 80023a4:	d007      	beq.n	80023b6 <__aeabi_dsub+0x62a>
 80023a6:	08fe      	lsrs	r6, r7, #3
 80023a8:	4226      	tst	r6, r4
 80023aa:	d104      	bne.n	80023b6 <__aeabi_dsub+0x62a>
 80023ac:	465d      	mov	r5, fp
 80023ae:	0032      	movs	r2, r6
 80023b0:	08c3      	lsrs	r3, r0, #3
 80023b2:	077f      	lsls	r7, r7, #29
 80023b4:	433b      	orrs	r3, r7
 80023b6:	0f59      	lsrs	r1, r3, #29
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	0749      	lsls	r1, r1, #29
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	430b      	orrs	r3, r1
 80023c0:	e6a6      	b.n	8002110 <__aeabi_dsub+0x384>
 80023c2:	1ac4      	subs	r4, r0, r3
 80023c4:	42a0      	cmp	r0, r4
 80023c6:	4180      	sbcs	r0, r0
 80023c8:	464b      	mov	r3, r9
 80023ca:	4240      	negs	r0, r0
 80023cc:	1aff      	subs	r7, r7, r3
 80023ce:	1a3b      	subs	r3, r7, r0
 80023d0:	469a      	mov	sl, r3
 80023d2:	465d      	mov	r5, fp
 80023d4:	2601      	movs	r6, #1
 80023d6:	e533      	b.n	8001e40 <__aeabi_dsub+0xb4>
 80023d8:	003b      	movs	r3, r7
 80023da:	4303      	orrs	r3, r0
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x654>
 80023de:	e715      	b.n	800220c <__aeabi_dsub+0x480>
 80023e0:	08c0      	lsrs	r0, r0, #3
 80023e2:	077b      	lsls	r3, r7, #29
 80023e4:	465d      	mov	r5, fp
 80023e6:	4303      	orrs	r3, r0
 80023e8:	08fa      	lsrs	r2, r7, #3
 80023ea:	e666      	b.n	80020ba <__aeabi_dsub+0x32e>
 80023ec:	08c0      	lsrs	r0, r0, #3
 80023ee:	077b      	lsls	r3, r7, #29
 80023f0:	4303      	orrs	r3, r0
 80023f2:	08fa      	lsrs	r2, r7, #3
 80023f4:	e65e      	b.n	80020b4 <__aeabi_dsub+0x328>
 80023f6:	003a      	movs	r2, r7
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	4302      	orrs	r2, r0
 80023fc:	d100      	bne.n	8002400 <__aeabi_dsub+0x674>
 80023fe:	e682      	b.n	8002106 <__aeabi_dsub+0x37a>
 8002400:	464a      	mov	r2, r9
 8002402:	0752      	lsls	r2, r2, #29
 8002404:	2480      	movs	r4, #128	; 0x80
 8002406:	4313      	orrs	r3, r2
 8002408:	464a      	mov	r2, r9
 800240a:	0324      	lsls	r4, r4, #12
 800240c:	08d2      	lsrs	r2, r2, #3
 800240e:	4222      	tst	r2, r4
 8002410:	d007      	beq.n	8002422 <__aeabi_dsub+0x696>
 8002412:	08fe      	lsrs	r6, r7, #3
 8002414:	4226      	tst	r6, r4
 8002416:	d104      	bne.n	8002422 <__aeabi_dsub+0x696>
 8002418:	465d      	mov	r5, fp
 800241a:	0032      	movs	r2, r6
 800241c:	08c3      	lsrs	r3, r0, #3
 800241e:	077f      	lsls	r7, r7, #29
 8002420:	433b      	orrs	r3, r7
 8002422:	0f59      	lsrs	r1, r3, #29
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	08db      	lsrs	r3, r3, #3
 8002428:	0749      	lsls	r1, r1, #29
 800242a:	430b      	orrs	r3, r1
 800242c:	e670      	b.n	8002110 <__aeabi_dsub+0x384>
 800242e:	08c0      	lsrs	r0, r0, #3
 8002430:	077b      	lsls	r3, r7, #29
 8002432:	4303      	orrs	r3, r0
 8002434:	08fa      	lsrs	r2, r7, #3
 8002436:	e640      	b.n	80020ba <__aeabi_dsub+0x32e>
 8002438:	464c      	mov	r4, r9
 800243a:	3920      	subs	r1, #32
 800243c:	40cc      	lsrs	r4, r1
 800243e:	4661      	mov	r1, ip
 8002440:	2920      	cmp	r1, #32
 8002442:	d006      	beq.n	8002452 <__aeabi_dsub+0x6c6>
 8002444:	4666      	mov	r6, ip
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	1b89      	subs	r1, r1, r6
 800244a:	464e      	mov	r6, r9
 800244c:	408e      	lsls	r6, r1
 800244e:	4333      	orrs	r3, r6
 8002450:	4698      	mov	r8, r3
 8002452:	4643      	mov	r3, r8
 8002454:	1e59      	subs	r1, r3, #1
 8002456:	418b      	sbcs	r3, r1
 8002458:	431c      	orrs	r4, r3
 800245a:	e5d8      	b.n	800200e <__aeabi_dsub+0x282>
 800245c:	181c      	adds	r4, r3, r0
 800245e:	4284      	cmp	r4, r0
 8002460:	4180      	sbcs	r0, r0
 8002462:	444f      	add	r7, r9
 8002464:	46ba      	mov	sl, r7
 8002466:	4240      	negs	r0, r0
 8002468:	4482      	add	sl, r0
 800246a:	e6d9      	b.n	8002220 <__aeabi_dsub+0x494>
 800246c:	4653      	mov	r3, sl
 800246e:	4323      	orrs	r3, r4
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x6e8>
 8002472:	e6cb      	b.n	800220c <__aeabi_dsub+0x480>
 8002474:	e614      	b.n	80020a0 <__aeabi_dsub+0x314>
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	000007ff 	.word	0x000007ff
 800247c:	ff7fffff 	.word	0xff7fffff
 8002480:	000007fe 	.word	0x000007fe
 8002484:	2300      	movs	r3, #0
 8002486:	4a01      	ldr	r2, [pc, #4]	; (800248c <__aeabi_dsub+0x700>)
 8002488:	001c      	movs	r4, r3
 800248a:	e529      	b.n	8001ee0 <__aeabi_dsub+0x154>
 800248c:	000007ff 	.word	0x000007ff

08002490 <__aeabi_dcmpun>:
 8002490:	b570      	push	{r4, r5, r6, lr}
 8002492:	0005      	movs	r5, r0
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <__aeabi_dcmpun+0x38>)
 8002496:	031c      	lsls	r4, r3, #12
 8002498:	0016      	movs	r6, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	030a      	lsls	r2, r1, #12
 800249e:	0049      	lsls	r1, r1, #1
 80024a0:	0b12      	lsrs	r2, r2, #12
 80024a2:	0d49      	lsrs	r1, r1, #21
 80024a4:	0b24      	lsrs	r4, r4, #12
 80024a6:	0d5b      	lsrs	r3, r3, #21
 80024a8:	4281      	cmp	r1, r0
 80024aa:	d008      	beq.n	80024be <__aeabi_dcmpun+0x2e>
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <__aeabi_dcmpun+0x38>)
 80024ae:	2000      	movs	r0, #0
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d103      	bne.n	80024bc <__aeabi_dcmpun+0x2c>
 80024b4:	0020      	movs	r0, r4
 80024b6:	4330      	orrs	r0, r6
 80024b8:	1e43      	subs	r3, r0, #1
 80024ba:	4198      	sbcs	r0, r3
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
 80024be:	2001      	movs	r0, #1
 80024c0:	432a      	orrs	r2, r5
 80024c2:	d1fb      	bne.n	80024bc <__aeabi_dcmpun+0x2c>
 80024c4:	e7f2      	b.n	80024ac <__aeabi_dcmpun+0x1c>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	000007ff 	.word	0x000007ff

080024cc <__aeabi_d2iz>:
 80024cc:	000a      	movs	r2, r1
 80024ce:	b530      	push	{r4, r5, lr}
 80024d0:	4c13      	ldr	r4, [pc, #76]	; (8002520 <__aeabi_d2iz+0x54>)
 80024d2:	0053      	lsls	r3, r2, #1
 80024d4:	0309      	lsls	r1, r1, #12
 80024d6:	0005      	movs	r5, r0
 80024d8:	0b09      	lsrs	r1, r1, #12
 80024da:	2000      	movs	r0, #0
 80024dc:	0d5b      	lsrs	r3, r3, #21
 80024de:	0fd2      	lsrs	r2, r2, #31
 80024e0:	42a3      	cmp	r3, r4
 80024e2:	dd04      	ble.n	80024ee <__aeabi_d2iz+0x22>
 80024e4:	480f      	ldr	r0, [pc, #60]	; (8002524 <__aeabi_d2iz+0x58>)
 80024e6:	4283      	cmp	r3, r0
 80024e8:	dd02      	ble.n	80024f0 <__aeabi_d2iz+0x24>
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <__aeabi_d2iz+0x5c>)
 80024ec:	18d0      	adds	r0, r2, r3
 80024ee:	bd30      	pop	{r4, r5, pc}
 80024f0:	2080      	movs	r0, #128	; 0x80
 80024f2:	0340      	lsls	r0, r0, #13
 80024f4:	4301      	orrs	r1, r0
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <__aeabi_d2iz+0x60>)
 80024f8:	1ac0      	subs	r0, r0, r3
 80024fa:	281f      	cmp	r0, #31
 80024fc:	dd08      	ble.n	8002510 <__aeabi_d2iz+0x44>
 80024fe:	480c      	ldr	r0, [pc, #48]	; (8002530 <__aeabi_d2iz+0x64>)
 8002500:	1ac3      	subs	r3, r0, r3
 8002502:	40d9      	lsrs	r1, r3
 8002504:	000b      	movs	r3, r1
 8002506:	4258      	negs	r0, r3
 8002508:	2a00      	cmp	r2, #0
 800250a:	d1f0      	bne.n	80024ee <__aeabi_d2iz+0x22>
 800250c:	0018      	movs	r0, r3
 800250e:	e7ee      	b.n	80024ee <__aeabi_d2iz+0x22>
 8002510:	4c08      	ldr	r4, [pc, #32]	; (8002534 <__aeabi_d2iz+0x68>)
 8002512:	40c5      	lsrs	r5, r0
 8002514:	46a4      	mov	ip, r4
 8002516:	4463      	add	r3, ip
 8002518:	4099      	lsls	r1, r3
 800251a:	000b      	movs	r3, r1
 800251c:	432b      	orrs	r3, r5
 800251e:	e7f2      	b.n	8002506 <__aeabi_d2iz+0x3a>
 8002520:	000003fe 	.word	0x000003fe
 8002524:	0000041d 	.word	0x0000041d
 8002528:	7fffffff 	.word	0x7fffffff
 800252c:	00000433 	.word	0x00000433
 8002530:	00000413 	.word	0x00000413
 8002534:	fffffbed 	.word	0xfffffbed

08002538 <__aeabi_i2d>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	2800      	cmp	r0, #0
 800253c:	d016      	beq.n	800256c <__aeabi_i2d+0x34>
 800253e:	17c3      	asrs	r3, r0, #31
 8002540:	18c5      	adds	r5, r0, r3
 8002542:	405d      	eors	r5, r3
 8002544:	0fc4      	lsrs	r4, r0, #31
 8002546:	0028      	movs	r0, r5
 8002548:	f000 f91a 	bl	8002780 <__clzsi2>
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <__aeabi_i2d+0x5c>)
 800254e:	1a1b      	subs	r3, r3, r0
 8002550:	280a      	cmp	r0, #10
 8002552:	dc16      	bgt.n	8002582 <__aeabi_i2d+0x4a>
 8002554:	0002      	movs	r2, r0
 8002556:	002e      	movs	r6, r5
 8002558:	3215      	adds	r2, #21
 800255a:	4096      	lsls	r6, r2
 800255c:	220b      	movs	r2, #11
 800255e:	1a12      	subs	r2, r2, r0
 8002560:	40d5      	lsrs	r5, r2
 8002562:	055b      	lsls	r3, r3, #21
 8002564:	032d      	lsls	r5, r5, #12
 8002566:	0b2d      	lsrs	r5, r5, #12
 8002568:	0d5b      	lsrs	r3, r3, #21
 800256a:	e003      	b.n	8002574 <__aeabi_i2d+0x3c>
 800256c:	2400      	movs	r4, #0
 800256e:	2300      	movs	r3, #0
 8002570:	2500      	movs	r5, #0
 8002572:	2600      	movs	r6, #0
 8002574:	051b      	lsls	r3, r3, #20
 8002576:	432b      	orrs	r3, r5
 8002578:	07e4      	lsls	r4, r4, #31
 800257a:	4323      	orrs	r3, r4
 800257c:	0030      	movs	r0, r6
 800257e:	0019      	movs	r1, r3
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	380b      	subs	r0, #11
 8002584:	4085      	lsls	r5, r0
 8002586:	055b      	lsls	r3, r3, #21
 8002588:	032d      	lsls	r5, r5, #12
 800258a:	2600      	movs	r6, #0
 800258c:	0b2d      	lsrs	r5, r5, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	e7f0      	b.n	8002574 <__aeabi_i2d+0x3c>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	0000041e 	.word	0x0000041e

08002598 <__aeabi_ui2d>:
 8002598:	b510      	push	{r4, lr}
 800259a:	1e04      	subs	r4, r0, #0
 800259c:	d010      	beq.n	80025c0 <__aeabi_ui2d+0x28>
 800259e:	f000 f8ef 	bl	8002780 <__clzsi2>
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <__aeabi_ui2d+0x48>)
 80025a4:	1a1b      	subs	r3, r3, r0
 80025a6:	280a      	cmp	r0, #10
 80025a8:	dc11      	bgt.n	80025ce <__aeabi_ui2d+0x36>
 80025aa:	220b      	movs	r2, #11
 80025ac:	0021      	movs	r1, r4
 80025ae:	1a12      	subs	r2, r2, r0
 80025b0:	40d1      	lsrs	r1, r2
 80025b2:	3015      	adds	r0, #21
 80025b4:	030a      	lsls	r2, r1, #12
 80025b6:	055b      	lsls	r3, r3, #21
 80025b8:	4084      	lsls	r4, r0
 80025ba:	0b12      	lsrs	r2, r2, #12
 80025bc:	0d5b      	lsrs	r3, r3, #21
 80025be:	e001      	b.n	80025c4 <__aeabi_ui2d+0x2c>
 80025c0:	2300      	movs	r3, #0
 80025c2:	2200      	movs	r2, #0
 80025c4:	051b      	lsls	r3, r3, #20
 80025c6:	4313      	orrs	r3, r2
 80025c8:	0020      	movs	r0, r4
 80025ca:	0019      	movs	r1, r3
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	0022      	movs	r2, r4
 80025d0:	380b      	subs	r0, #11
 80025d2:	4082      	lsls	r2, r0
 80025d4:	055b      	lsls	r3, r3, #21
 80025d6:	0312      	lsls	r2, r2, #12
 80025d8:	2400      	movs	r4, #0
 80025da:	0b12      	lsrs	r2, r2, #12
 80025dc:	0d5b      	lsrs	r3, r3, #21
 80025de:	e7f1      	b.n	80025c4 <__aeabi_ui2d+0x2c>
 80025e0:	0000041e 	.word	0x0000041e

080025e4 <__aeabi_f2d>:
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	0242      	lsls	r2, r0, #9
 80025e8:	0043      	lsls	r3, r0, #1
 80025ea:	0fc4      	lsrs	r4, r0, #31
 80025ec:	20fe      	movs	r0, #254	; 0xfe
 80025ee:	0e1b      	lsrs	r3, r3, #24
 80025f0:	1c59      	adds	r1, r3, #1
 80025f2:	0a55      	lsrs	r5, r2, #9
 80025f4:	4208      	tst	r0, r1
 80025f6:	d00c      	beq.n	8002612 <__aeabi_f2d+0x2e>
 80025f8:	21e0      	movs	r1, #224	; 0xe0
 80025fa:	0089      	lsls	r1, r1, #2
 80025fc:	468c      	mov	ip, r1
 80025fe:	076d      	lsls	r5, r5, #29
 8002600:	0b12      	lsrs	r2, r2, #12
 8002602:	4463      	add	r3, ip
 8002604:	051b      	lsls	r3, r3, #20
 8002606:	4313      	orrs	r3, r2
 8002608:	07e4      	lsls	r4, r4, #31
 800260a:	4323      	orrs	r3, r4
 800260c:	0028      	movs	r0, r5
 800260e:	0019      	movs	r1, r3
 8002610:	bd70      	pop	{r4, r5, r6, pc}
 8002612:	2b00      	cmp	r3, #0
 8002614:	d114      	bne.n	8002640 <__aeabi_f2d+0x5c>
 8002616:	2d00      	cmp	r5, #0
 8002618:	d01b      	beq.n	8002652 <__aeabi_f2d+0x6e>
 800261a:	0028      	movs	r0, r5
 800261c:	f000 f8b0 	bl	8002780 <__clzsi2>
 8002620:	280a      	cmp	r0, #10
 8002622:	dc1c      	bgt.n	800265e <__aeabi_f2d+0x7a>
 8002624:	230b      	movs	r3, #11
 8002626:	002a      	movs	r2, r5
 8002628:	1a1b      	subs	r3, r3, r0
 800262a:	40da      	lsrs	r2, r3
 800262c:	0003      	movs	r3, r0
 800262e:	3315      	adds	r3, #21
 8002630:	409d      	lsls	r5, r3
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <__aeabi_f2d+0x88>)
 8002634:	0312      	lsls	r2, r2, #12
 8002636:	1a1b      	subs	r3, r3, r0
 8002638:	055b      	lsls	r3, r3, #21
 800263a:	0b12      	lsrs	r2, r2, #12
 800263c:	0d5b      	lsrs	r3, r3, #21
 800263e:	e7e1      	b.n	8002604 <__aeabi_f2d+0x20>
 8002640:	2d00      	cmp	r5, #0
 8002642:	d009      	beq.n	8002658 <__aeabi_f2d+0x74>
 8002644:	0b13      	lsrs	r3, r2, #12
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	0312      	lsls	r2, r2, #12
 800264a:	431a      	orrs	r2, r3
 800264c:	076d      	lsls	r5, r5, #29
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <__aeabi_f2d+0x8c>)
 8002650:	e7d8      	b.n	8002604 <__aeabi_f2d+0x20>
 8002652:	2300      	movs	r3, #0
 8002654:	2200      	movs	r2, #0
 8002656:	e7d5      	b.n	8002604 <__aeabi_f2d+0x20>
 8002658:	2200      	movs	r2, #0
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <__aeabi_f2d+0x8c>)
 800265c:	e7d2      	b.n	8002604 <__aeabi_f2d+0x20>
 800265e:	0003      	movs	r3, r0
 8002660:	002a      	movs	r2, r5
 8002662:	3b0b      	subs	r3, #11
 8002664:	409a      	lsls	r2, r3
 8002666:	2500      	movs	r5, #0
 8002668:	e7e3      	b.n	8002632 <__aeabi_f2d+0x4e>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	00000389 	.word	0x00000389
 8002670:	000007ff 	.word	0x000007ff

08002674 <__aeabi_d2f>:
 8002674:	0002      	movs	r2, r0
 8002676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002678:	004b      	lsls	r3, r1, #1
 800267a:	030d      	lsls	r5, r1, #12
 800267c:	0f40      	lsrs	r0, r0, #29
 800267e:	0d5b      	lsrs	r3, r3, #21
 8002680:	0fcc      	lsrs	r4, r1, #31
 8002682:	0a6d      	lsrs	r5, r5, #9
 8002684:	493a      	ldr	r1, [pc, #232]	; (8002770 <__aeabi_d2f+0xfc>)
 8002686:	4305      	orrs	r5, r0
 8002688:	1c58      	adds	r0, r3, #1
 800268a:	00d7      	lsls	r7, r2, #3
 800268c:	4208      	tst	r0, r1
 800268e:	d00a      	beq.n	80026a6 <__aeabi_d2f+0x32>
 8002690:	4938      	ldr	r1, [pc, #224]	; (8002774 <__aeabi_d2f+0x100>)
 8002692:	1859      	adds	r1, r3, r1
 8002694:	29fe      	cmp	r1, #254	; 0xfe
 8002696:	dd16      	ble.n	80026c6 <__aeabi_d2f+0x52>
 8002698:	20ff      	movs	r0, #255	; 0xff
 800269a:	2200      	movs	r2, #0
 800269c:	05c0      	lsls	r0, r0, #23
 800269e:	4310      	orrs	r0, r2
 80026a0:	07e4      	lsls	r4, r4, #31
 80026a2:	4320      	orrs	r0, r4
 80026a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <__aeabi_d2f+0x44>
 80026aa:	433d      	orrs	r5, r7
 80026ac:	d026      	beq.n	80026fc <__aeabi_d2f+0x88>
 80026ae:	2205      	movs	r2, #5
 80026b0:	0192      	lsls	r2, r2, #6
 80026b2:	0a52      	lsrs	r2, r2, #9
 80026b4:	b2d8      	uxtb	r0, r3
 80026b6:	e7f1      	b.n	800269c <__aeabi_d2f+0x28>
 80026b8:	432f      	orrs	r7, r5
 80026ba:	d0ed      	beq.n	8002698 <__aeabi_d2f+0x24>
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	03d2      	lsls	r2, r2, #15
 80026c0:	20ff      	movs	r0, #255	; 0xff
 80026c2:	432a      	orrs	r2, r5
 80026c4:	e7ea      	b.n	800269c <__aeabi_d2f+0x28>
 80026c6:	2900      	cmp	r1, #0
 80026c8:	dd1b      	ble.n	8002702 <__aeabi_d2f+0x8e>
 80026ca:	0192      	lsls	r2, r2, #6
 80026cc:	1e50      	subs	r0, r2, #1
 80026ce:	4182      	sbcs	r2, r0
 80026d0:	00ed      	lsls	r5, r5, #3
 80026d2:	0f7f      	lsrs	r7, r7, #29
 80026d4:	432a      	orrs	r2, r5
 80026d6:	433a      	orrs	r2, r7
 80026d8:	0753      	lsls	r3, r2, #29
 80026da:	d047      	beq.n	800276c <__aeabi_d2f+0xf8>
 80026dc:	230f      	movs	r3, #15
 80026de:	4013      	ands	r3, r2
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d000      	beq.n	80026e6 <__aeabi_d2f+0x72>
 80026e4:	3204      	adds	r2, #4
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	04db      	lsls	r3, r3, #19
 80026ea:	4013      	ands	r3, r2
 80026ec:	d03e      	beq.n	800276c <__aeabi_d2f+0xf8>
 80026ee:	1c48      	adds	r0, r1, #1
 80026f0:	29fe      	cmp	r1, #254	; 0xfe
 80026f2:	d0d1      	beq.n	8002698 <__aeabi_d2f+0x24>
 80026f4:	0192      	lsls	r2, r2, #6
 80026f6:	0a52      	lsrs	r2, r2, #9
 80026f8:	b2c0      	uxtb	r0, r0
 80026fa:	e7cf      	b.n	800269c <__aeabi_d2f+0x28>
 80026fc:	2000      	movs	r0, #0
 80026fe:	2200      	movs	r2, #0
 8002700:	e7cc      	b.n	800269c <__aeabi_d2f+0x28>
 8002702:	000a      	movs	r2, r1
 8002704:	3217      	adds	r2, #23
 8002706:	db2f      	blt.n	8002768 <__aeabi_d2f+0xf4>
 8002708:	2680      	movs	r6, #128	; 0x80
 800270a:	0436      	lsls	r6, r6, #16
 800270c:	432e      	orrs	r6, r5
 800270e:	251e      	movs	r5, #30
 8002710:	1a6d      	subs	r5, r5, r1
 8002712:	2d1f      	cmp	r5, #31
 8002714:	dd11      	ble.n	800273a <__aeabi_d2f+0xc6>
 8002716:	2202      	movs	r2, #2
 8002718:	4252      	negs	r2, r2
 800271a:	1a52      	subs	r2, r2, r1
 800271c:	0031      	movs	r1, r6
 800271e:	40d1      	lsrs	r1, r2
 8002720:	2d20      	cmp	r5, #32
 8002722:	d004      	beq.n	800272e <__aeabi_d2f+0xba>
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <__aeabi_d2f+0x104>)
 8002726:	4694      	mov	ip, r2
 8002728:	4463      	add	r3, ip
 800272a:	409e      	lsls	r6, r3
 800272c:	4337      	orrs	r7, r6
 800272e:	003a      	movs	r2, r7
 8002730:	1e53      	subs	r3, r2, #1
 8002732:	419a      	sbcs	r2, r3
 8002734:	430a      	orrs	r2, r1
 8002736:	2100      	movs	r1, #0
 8002738:	e7ce      	b.n	80026d8 <__aeabi_d2f+0x64>
 800273a:	4a10      	ldr	r2, [pc, #64]	; (800277c <__aeabi_d2f+0x108>)
 800273c:	0038      	movs	r0, r7
 800273e:	4694      	mov	ip, r2
 8002740:	4463      	add	r3, ip
 8002742:	4098      	lsls	r0, r3
 8002744:	003a      	movs	r2, r7
 8002746:	1e41      	subs	r1, r0, #1
 8002748:	4188      	sbcs	r0, r1
 800274a:	409e      	lsls	r6, r3
 800274c:	40ea      	lsrs	r2, r5
 800274e:	4330      	orrs	r0, r6
 8002750:	4302      	orrs	r2, r0
 8002752:	2100      	movs	r1, #0
 8002754:	0753      	lsls	r3, r2, #29
 8002756:	d1c1      	bne.n	80026dc <__aeabi_d2f+0x68>
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	0013      	movs	r3, r2
 800275c:	04c9      	lsls	r1, r1, #19
 800275e:	2001      	movs	r0, #1
 8002760:	400b      	ands	r3, r1
 8002762:	420a      	tst	r2, r1
 8002764:	d1c6      	bne.n	80026f4 <__aeabi_d2f+0x80>
 8002766:	e7a3      	b.n	80026b0 <__aeabi_d2f+0x3c>
 8002768:	2300      	movs	r3, #0
 800276a:	e7a0      	b.n	80026ae <__aeabi_d2f+0x3a>
 800276c:	000b      	movs	r3, r1
 800276e:	e79f      	b.n	80026b0 <__aeabi_d2f+0x3c>
 8002770:	000007fe 	.word	0x000007fe
 8002774:	fffffc80 	.word	0xfffffc80
 8002778:	fffffca2 	.word	0xfffffca2
 800277c:	fffffc82 	.word	0xfffffc82

08002780 <__clzsi2>:
 8002780:	211c      	movs	r1, #28
 8002782:	2301      	movs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	4298      	cmp	r0, r3
 8002788:	d301      	bcc.n	800278e <__clzsi2+0xe>
 800278a:	0c00      	lsrs	r0, r0, #16
 800278c:	3910      	subs	r1, #16
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	4298      	cmp	r0, r3
 8002792:	d301      	bcc.n	8002798 <__clzsi2+0x18>
 8002794:	0a00      	lsrs	r0, r0, #8
 8002796:	3908      	subs	r1, #8
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	4298      	cmp	r0, r3
 800279c:	d301      	bcc.n	80027a2 <__clzsi2+0x22>
 800279e:	0900      	lsrs	r0, r0, #4
 80027a0:	3904      	subs	r1, #4
 80027a2:	a202      	add	r2, pc, #8	; (adr r2, 80027ac <__clzsi2+0x2c>)
 80027a4:	5c10      	ldrb	r0, [r2, r0]
 80027a6:	1840      	adds	r0, r0, r1
 80027a8:	4770      	bx	lr
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	02020304 	.word	0x02020304
 80027b0:	01010101 	.word	0x01010101
	...

080027bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b08b      	sub	sp, #44	; 0x2c
 80027c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c2:	2414      	movs	r4, #20
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	0018      	movs	r0, r3
 80027c8:	2314      	movs	r3, #20
 80027ca:	001a      	movs	r2, r3
 80027cc:	2100      	movs	r1, #0
 80027ce:	f004 fc51 	bl	8007074 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <MX_GPIO_Init+0xec>)
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <MX_GPIO_Init+0xec>)
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0309      	lsls	r1, r1, #12
 80027dc:	430a      	orrs	r2, r1
 80027de:	615a      	str	r2, [r3, #20]
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <MX_GPIO_Init+0xec>)
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	031b      	lsls	r3, r3, #12
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <MX_GPIO_Init+0xec>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <MX_GPIO_Init+0xec>)
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	03c9      	lsls	r1, r1, #15
 80027f8:	430a      	orrs	r2, r1
 80027fa:	615a      	str	r2, [r3, #20]
 80027fc:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <MX_GPIO_Init+0xec>)
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	03db      	lsls	r3, r3, #15
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <MX_GPIO_Init+0xec>)
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <MX_GPIO_Init+0xec>)
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	0289      	lsls	r1, r1, #10
 8002814:	430a      	orrs	r2, r1
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <MX_GPIO_Init+0xec>)
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <MX_GPIO_Init+0xec>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <MX_GPIO_Init+0xec>)
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	02c9      	lsls	r1, r1, #11
 8002830:	430a      	orrs	r2, r1
 8002832:	615a      	str	r2, [r3, #20]
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <MX_GPIO_Init+0xec>)
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	02db      	lsls	r3, r3, #11
 800283c:	4013      	ands	r3, r2
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002842:	2390      	movs	r3, #144	; 0x90
 8002844:	0059      	lsls	r1, r3, #1
 8002846:	2390      	movs	r3, #144	; 0x90
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	2200      	movs	r2, #0
 800284c:	0018      	movs	r0, r3
 800284e:	f001 f926 	bl	8003a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002852:	193b      	adds	r3, r7, r4
 8002854:	2280      	movs	r2, #128	; 0x80
 8002856:	0192      	lsls	r2, r2, #6
 8002858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800285a:	193b      	adds	r3, r7, r4
 800285c:	2284      	movs	r2, #132	; 0x84
 800285e:	0392      	lsls	r2, r2, #14
 8002860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	193b      	adds	r3, r7, r4
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002868:	193b      	adds	r3, r7, r4
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <MX_GPIO_Init+0xf0>)
 800286c:	0019      	movs	r1, r3
 800286e:	0010      	movs	r0, r2
 8002870:	f000 ff80 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8002874:	0021      	movs	r1, r4
 8002876:	193b      	adds	r3, r7, r4
 8002878:	2290      	movs	r2, #144	; 0x90
 800287a:	0052      	lsls	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	187b      	adds	r3, r7, r1
 8002880:	2201      	movs	r2, #1
 8002882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2200      	movs	r2, #0
 800288e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	187a      	adds	r2, r7, r1
 8002892:	2390      	movs	r3, #144	; 0x90
 8002894:	05db      	lsls	r3, r3, #23
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f000 ff6b 	bl	8003774 <HAL_GPIO_Init>

}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b00b      	add	sp, #44	; 0x2c
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000
 80028ac:	48000800 	.word	0x48000800

080028b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <MX_I2C1_Init+0x74>)
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <MX_I2C1_Init+0x78>)
 80028b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <MX_I2C1_Init+0x74>)
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <MX_I2C1_Init+0x7c>)
 80028be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <MX_I2C1_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <MX_I2C1_Init+0x74>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <MX_I2C1_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <MX_I2C1_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <MX_I2C1_Init+0x74>)
 80028da:	2200      	movs	r2, #0
 80028dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <MX_I2C1_Init+0x74>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <MX_I2C1_Init+0x74>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <MX_I2C1_Init+0x74>)
 80028ec:	0018      	movs	r0, r3
 80028ee:	f001 f8f3 	bl	8003ad8 <HAL_I2C_Init>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028f6:	f000 fbe8 	bl	80030ca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <MX_I2C1_Init+0x74>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	0018      	movs	r0, r3
 8002900:	f001 fdd6 	bl	80044b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d001      	beq.n	800290c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002908:	f000 fbdf 	bl	80030ca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <MX_I2C1_Init+0x74>)
 800290e:	2100      	movs	r1, #0
 8002910:	0018      	movs	r0, r3
 8002912:	f001 fe19 	bl	8004548 <HAL_I2CEx_ConfigDigitalFilter>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d001      	beq.n	800291e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800291a:	f000 fbd6 	bl	80030ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200001f0 	.word	0x200001f0
 8002928:	40005400 	.word	0x40005400
 800292c:	2000090e 	.word	0x2000090e

08002930 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b08b      	sub	sp, #44	; 0x2c
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	2414      	movs	r4, #20
 800293a:	193b      	adds	r3, r7, r4
 800293c:	0018      	movs	r0, r3
 800293e:	2314      	movs	r3, #20
 8002940:	001a      	movs	r2, r3
 8002942:	2100      	movs	r1, #0
 8002944:	f004 fb96 	bl	8007074 <memset>
  if(i2cHandle->Instance==I2C1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1c      	ldr	r2, [pc, #112]	; (80029c0 <HAL_I2C_MspInit+0x90>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d132      	bne.n	80029b8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_I2C_MspInit+0x94>)
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_I2C_MspInit+0x94>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	02c9      	lsls	r1, r1, #11
 800295c:	430a      	orrs	r2, r1
 800295e:	615a      	str	r2, [r3, #20]
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_I2C_MspInit+0x94>)
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	02db      	lsls	r3, r3, #11
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800296e:	193b      	adds	r3, r7, r4
 8002970:	22c0      	movs	r2, #192	; 0xc0
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002976:	0021      	movs	r1, r4
 8002978:	187b      	adds	r3, r7, r1
 800297a:	2212      	movs	r2, #18
 800297c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	187b      	adds	r3, r7, r1
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002984:	187b      	adds	r3, r7, r1
 8002986:	2203      	movs	r2, #3
 8002988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2201      	movs	r2, #1
 800298e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	187b      	adds	r3, r7, r1
 8002992:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <HAL_I2C_MspInit+0x98>)
 8002994:	0019      	movs	r1, r3
 8002996:	0010      	movs	r0, r2
 8002998:	f000 feec 	bl	8003774 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_I2C_MspInit+0x94>)
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_I2C_MspInit+0x94>)
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	0389      	lsls	r1, r1, #14
 80029a6:	430a      	orrs	r2, r1
 80029a8:	61da      	str	r2, [r3, #28]
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_I2C_MspInit+0x94>)
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	039b      	lsls	r3, r3, #14
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b00b      	add	sp, #44	; 0x2c
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	40005400 	.word	0x40005400
 80029c4:	40021000 	.word	0x40021000
 80029c8:	48000400 	.word	0x48000400

080029cc <lcd_init>:
//I2C_HandleTypeDef hi2c3;

//UART_HandleTypeDef huart2;

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	220c      	movs	r2, #12
 80029e0:	4313      	orrs	r3, r2
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80029e8:	2418      	movs	r4, #24
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	701a      	strb	r2, [r3, #0]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2220      	movs	r2, #32
 80029f6:	4313      	orrs	r3, r2
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	705a      	strb	r2, [r3, #1]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80029fe:	1939      	adds	r1, r7, r4
 8002a00:	4871      	ldr	r0, [pc, #452]	; (8002bc8 <lcd_init+0x1fc>)
 8002a02:	230a      	movs	r3, #10
 8002a04:	2202      	movs	r2, #2
 8002a06:	f002 fecd 	bl	80057a4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8002a0a:	2114      	movs	r1, #20
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	4a6f      	ldr	r2, [pc, #444]	; (8002bcc <lcd_init+0x200>)
 8002a10:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8002a12:	1879      	adds	r1, r7, r1
 8002a14:	486c      	ldr	r0, [pc, #432]	; (8002bc8 <lcd_init+0x1fc>)
 8002a16:	230a      	movs	r3, #10
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f002 fec3 	bl	80057a4 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8002a1e:	69f8      	ldr	r0, [r7, #28]
 8002a20:	2364      	movs	r3, #100	; 0x64
 8002a22:	2205      	movs	r2, #5
 8002a24:	217c      	movs	r1, #124	; 0x7c
 8002a26:	f001 f9f5 	bl	8003e14 <HAL_I2C_IsDeviceReady>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	001a      	movs	r2, r3
 8002a2e:	2113      	movs	r1, #19
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8002a34:	1879      	adds	r1, r7, r1
 8002a36:	4864      	ldr	r0, [pc, #400]	; (8002bc8 <lcd_init+0x1fc>)
 8002a38:	230a      	movs	r3, #10
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f002 feb2 	bl	80057a4 <HAL_UART_Transmit>
	HAL_Delay(50);
 8002a40:	2032      	movs	r0, #50	; 0x32
 8002a42:	f000 fdbf 	bl	80035c4 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8002a46:	193a      	adds	r2, r7, r4
 8002a48:	69f8      	ldr	r0, [r7, #28]
 8002a4a:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <lcd_init+0x204>)
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2302      	movs	r3, #2
 8002a50:	217c      	movs	r1, #124	; 0x7c
 8002a52:	f001 f8d7 	bl	8003c04 <HAL_I2C_Master_Transmit>
 8002a56:	0003      	movs	r3, r0
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2112      	movs	r1, #18
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8002a60:	1879      	adds	r1, r7, r1
 8002a62:	4859      	ldr	r0, [pc, #356]	; (8002bc8 <lcd_init+0x1fc>)
 8002a64:	230a      	movs	r3, #10
 8002a66:	2201      	movs	r2, #1
 8002a68:	f002 fe9c 	bl	80057a4 <HAL_UART_Transmit>
	HAL_Delay(50);
 8002a6c:	2032      	movs	r0, #50	; 0x32
 8002a6e:	f000 fda9 	bl	80035c4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8002a72:	193a      	adds	r2, r7, r4
 8002a74:	69f8      	ldr	r0, [r7, #28]
 8002a76:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <lcd_init+0x204>)
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	217c      	movs	r1, #124	; 0x7c
 8002a7e:	f001 f8c1 	bl	8003c04 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8002a82:	2005      	movs	r0, #5
 8002a84:	f000 fd9e 	bl	80035c4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8002a88:	193a      	adds	r2, r7, r4
 8002a8a:	69f8      	ldr	r0, [r7, #28]
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <lcd_init+0x204>)
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2302      	movs	r3, #2
 8002a92:	217c      	movs	r1, #124	; 0x7c
 8002a94:	f001 f8b6 	bl	8003c04 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8002aac:	193a      	adds	r2, r7, r4
 8002aae:	69f8      	ldr	r0, [r7, #28]
 8002ab0:	23fa      	movs	r3, #250	; 0xfa
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	217c      	movs	r1, #124	; 0x7c
 8002aba:	f001 f8a3 	bl	8003c04 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002ac4:	193a      	adds	r2, r7, r4
 8002ac6:	69f8      	ldr	r0, [r7, #28]
 8002ac8:	23fa      	movs	r3, #250	; 0xfa
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	2302      	movs	r3, #2
 8002ad0:	217c      	movs	r1, #124	; 0x7c
 8002ad2:	f001 f897 	bl	8003c04 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f000 fd74 	bl	80035c4 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	789b      	ldrb	r3, [r3, #2]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002af0:	193a      	adds	r2, r7, r4
 8002af2:	69f8      	ldr	r0, [r7, #28]
 8002af4:	23fa      	movs	r3, #250	; 0xfa
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2302      	movs	r3, #2
 8002afc:	217c      	movs	r1, #124	; 0x7c
 8002afe:	f001 f881 	bl	8003c04 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8002b02:	2410      	movs	r4, #16
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
		data_backlight[1] = 0;
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002b10:	193a      	adds	r2, r7, r4
 8002b12:	69f8      	ldr	r0, [r7, #28]
 8002b14:	23fa      	movs	r3, #250	; 0xfa
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	21c4      	movs	r1, #196	; 0xc4
 8002b1e:	f001 f871 	bl	8003c04 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	2208      	movs	r2, #8
 8002b26:	701a      	strb	r2, [r3, #0]
		data_backlight[1] = 0xFF;
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	22ff      	movs	r2, #255	; 0xff
 8002b2c:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002b2e:	193a      	adds	r2, r7, r4
 8002b30:	69f8      	ldr	r0, [r7, #28]
 8002b32:	23fa      	movs	r3, #250	; 0xfa
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2302      	movs	r3, #2
 8002b3a:	21c4      	movs	r1, #196	; 0xc4
 8002b3c:	f001 f862 	bl	8003c04 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8002b40:	0021      	movs	r1, r4
 8002b42:	187b      	adds	r3, r7, r1
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
		data_backlight[1] = 0x20;
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002b4e:	187a      	adds	r2, r7, r1
 8002b50:	69f8      	ldr	r0, [r7, #28]
 8002b52:	23fa      	movs	r3, #250	; 0xfa
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2302      	movs	r3, #2
 8002b5a:	21c4      	movs	r1, #196	; 0xc4
 8002b5c:	f001 f852 	bl	8003c04 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8002b60:	240c      	movs	r4, #12
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	2204      	movs	r2, #4
 8002b66:	701a      	strb	r2, [r3, #0]
		data_rgb[1] = 255;
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002b6e:	193a      	adds	r2, r7, r4
 8002b70:	69f8      	ldr	r0, [r7, #28]
 8002b72:	23fa      	movs	r3, #250	; 0xfa
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2302      	movs	r3, #2
 8002b7a:	21c4      	movs	r1, #196	; 0xc4
 8002b7c:	f001 f842 	bl	8003c04 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	2203      	movs	r2, #3
 8002b84:	701a      	strb	r2, [r3, #0]
		data_rgb[1] = 255;
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	22ff      	movs	r2, #255	; 0xff
 8002b8a:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002b8c:	193a      	adds	r2, r7, r4
 8002b8e:	69f8      	ldr	r0, [r7, #28]
 8002b90:	23fa      	movs	r3, #250	; 0xfa
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	2302      	movs	r3, #2
 8002b98:	21c4      	movs	r1, #196	; 0xc4
 8002b9a:	f001 f833 	bl	8003c04 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8002b9e:	0021      	movs	r1, r4
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
		data_rgb[1] = 255;
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002bac:	187a      	adds	r2, r7, r1
 8002bae:	69f8      	ldr	r0, [r7, #28]
 8002bb0:	23fa      	movs	r3, #250	; 0xfa
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	21c4      	movs	r1, #196	; 0xc4
 8002bba:	f001 f823 	bl	8003c04 <HAL_I2C_Master_Transmit>


}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b009      	add	sp, #36	; 0x24
 8002bc4:	bd90      	pop	{r4, r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	200002fc 	.word	0x200002fc
 8002bcc:	00000a0d 	.word	0x00000a0d
 8002bd0:	00001388 	.word	0x00001388

08002bd4 <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <clearlcd+0x3c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 f846 	bl	8002c70 <lcd_position>
	lcd_print(&hi2c1,"                ");
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <clearlcd+0x40>)
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <clearlcd+0x3c>)
 8002be8:	0011      	movs	r1, r2
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 f814 	bl	8002c18 <lcd_print>
	lcd_position(&hi2c1,0,1);
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <clearlcd+0x3c>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 f83a 	bl	8002c70 <lcd_position>
	lcd_print(&hi2c1,"                ");
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <clearlcd+0x40>)
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <clearlcd+0x3c>)
 8002c00:	0011      	movs	r1, r2
 8002c02:	0018      	movs	r0, r3
 8002c04:	f000 f808 	bl	8002c18 <lcd_print>
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	200001f0 	.word	0x200001f0
 8002c14:	0800aa48 	.word	0x0800aa48

08002c18 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8002c26:	230c      	movs	r3, #12
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	701a      	strb	r2, [r3, #0]
    int i=0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8002c32:	e012      	b.n	8002c5a <lcd_print+0x42>
    {
            data[1] = str[i];
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	18d3      	adds	r3, r2, r3
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	210c      	movs	r1, #12
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	705a      	strb	r2, [r3, #1]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002c42:	187a      	adds	r2, r7, r1
 8002c44:	6938      	ldr	r0, [r7, #16]
 8002c46:	23fa      	movs	r3, #250	; 0xfa
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	217c      	movs	r1, #124	; 0x7c
 8002c50:	f000 ffd8 	bl	8003c04 <HAL_I2C_Master_Transmit>
            i++;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	18d3      	adds	r3, r2, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e6      	bne.n	8002c34 <lcd_print+0x1c>
   }
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b006      	add	sp, #24
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	0008      	movs	r0, r1
 8002c7a:	0011      	movs	r1, r2
 8002c7c:	1cfb      	adds	r3, r7, #3
 8002c7e:	1c02      	adds	r2, r0, #0
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	1cbb      	adds	r3, r7, #2
 8002c84:	1c0a      	adds	r2, r1, #0
 8002c86:	701a      	strb	r2, [r3, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8002c8c:	1cbb      	adds	r3, r7, #2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <lcd_position+0x34>
    {
        col = col | 0x80;
 8002c94:	1cfb      	adds	r3, r7, #3
 8002c96:	1cfa      	adds	r2, r7, #3
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	4249      	negs	r1, r1
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e006      	b.n	8002cb2 <lcd_position+0x42>
    }
    else
    {
        col = col | 0xc0;
 8002ca4:	1cfb      	adds	r3, r7, #3
 8002ca6:	1cfa      	adds	r2, r7, #3
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	4249      	negs	r1, r1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	701a      	strb	r2, [r3, #0]
    }

    char data[2];
    data[0] = 0x80;
 8002cb2:	2108      	movs	r1, #8
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	701a      	strb	r2, [r3, #0]
    data[1] = col;
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	1cfa      	adds	r2, r7, #3
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002cc2:	187a      	adds	r2, r7, r1
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	23fa      	movs	r3, #250	; 0xfa
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2302      	movs	r3, #2
 8002cce:	217c      	movs	r1, #124	; 0x7c
 8002cd0:	f000 ff98 	bl	8003c04 <HAL_I2C_Master_Transmit>
}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b004      	add	sp, #16
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	0004      	movs	r4, r0
 8002ce4:	0008      	movs	r0, r1
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	1c22      	adds	r2, r4, #0
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	1dbb      	adds	r3, r7, #6
 8002cf0:	1c02      	adds	r2, r0, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	1d7b      	adds	r3, r7, #5
 8002cf6:	1c0a      	adds	r2, r1, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8002cfa:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <reglagecouleur+0x90>)
 8002cfc:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8002cfe:	2110      	movs	r1, #16
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2204      	movs	r2, #4
 8002d04:	701a      	strb	r2, [r3, #0]
	data_r[1] = R;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	1dfa      	adds	r2, r7, #7
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8002d0e:	187a      	adds	r2, r7, r1
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	23fa      	movs	r3, #250	; 0xfa
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2302      	movs	r3, #2
 8002d1a:	21c4      	movs	r1, #196	; 0xc4
 8002d1c:	f000 ff72 	bl	8003c04 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8002d20:	210c      	movs	r1, #12
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2203      	movs	r2, #3
 8002d26:	701a      	strb	r2, [r3, #0]
	data_g[1] = G;
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	1dba      	adds	r2, r7, #6
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8002d30:	187a      	adds	r2, r7, r1
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	23fa      	movs	r3, #250	; 0xfa
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	21c4      	movs	r1, #196	; 0xc4
 8002d3e:	f000 ff61 	bl	8003c04 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8002d42:	2108      	movs	r1, #8
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	2202      	movs	r2, #2
 8002d48:	701a      	strb	r2, [r3, #0]
	data_b[1] = B;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	1d7a      	adds	r2, r7, #5
 8002d4e:	7812      	ldrb	r2, [r2, #0]
 8002d50:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8002d52:	187a      	adds	r2, r7, r1
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	23fa      	movs	r3, #250	; 0xfa
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	21c4      	movs	r1, #196	; 0xc4
 8002d60:	f000 ff50 	bl	8003c04 <HAL_I2C_Master_Transmit>
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b007      	add	sp, #28
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	200001f0 	.word	0x200001f0

08002d70 <configureInputSIGPin>:
float distance; // variable ou stocker la distance

char uartBuf[100]; // buffer qui permet de transmettre au pc la distance calcul
char uartBuf1[100];
void configureInputSIGPin()
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	0018      	movs	r0, r3
 8002d7a:	2314      	movs	r3, #20
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f004 f978 	bl	8007074 <memset>
    GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	2290      	movs	r2, #144	; 0x90
 8002d88:	0052      	lsls	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Entrée
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	2200      	movs	r2, #0
 8002d90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d98:	1d3a      	adds	r2, r7, #4
 8002d9a:	2390      	movs	r3, #144	; 0x90
 8002d9c:	05db      	lsls	r3, r3, #23
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 fce7 	bl	8003774 <HAL_GPIO_Init>
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b006      	add	sp, #24
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t numTicks = 0;  // variable utilise  pour calculer  le delai
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dba:	f000 fb9f 	bl	80034fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dbe:	f000 f8e9 	bl	8002f94 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

	MX_USART2_UART_Init();
 8002dc2:	f000 faf5 	bl	80033b0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002dc6:	f7ff fd73 	bl	80028b0 <MX_I2C1_Init>
	MX_TIM2_Init();
 8002dca:	f000 fa81 	bl	80032d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

    //DWT_Delay_Init();
    lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8002dce:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <main+0x1ac>)
 8002dd0:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <main+0x1b0>)
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff fdf9 	bl	80029cc <lcd_init>
    lcd_position(&hi2c1,0,0);
 8002dda:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <main+0x1b0>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2100      	movs	r1, #0
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff ff45 	bl	8002c70 <lcd_position>
    lcd_print(&hi2c1,"Bilna");
 8002de6:	4a5f      	ldr	r2, [pc, #380]	; (8002f64 <main+0x1b4>)
 8002de8:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <main+0x1b0>)
 8002dea:	0011      	movs	r1, r2
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7ff ff13 	bl	8002c18 <lcd_print>
    reglagecouleur(0,0,255);
 8002df2:	22ff      	movs	r2, #255	; 0xff
 8002df4:	2100      	movs	r1, #0
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7ff ff70 	bl	8002cdc <reglagecouleur>
    HAL_Delay(3000);
 8002dfc:	4b5a      	ldr	r3, [pc, #360]	; (8002f68 <main+0x1b8>)
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 fbe0 	bl	80035c4 <HAL_Delay>
    clearlcd();
 8002e04:	f7ff fee6 	bl	8002bd4 <clearlcd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8002e08:	23fa      	movs	r3, #250	; 0xfa
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fbd9 	bl	80035c4 <HAL_Delay>

	  	  //mettre le Trig a l' tat bas pendant 3us
	  	 	  		//HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
	  	 	  		//usDelay(3);
	  	          MX_GPIO_Init();
 8002e12:	f7ff fcd3 	bl	80027bc <MX_GPIO_Init>
	  	          HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	0059      	lsls	r1, r3, #1
 8002e1a:	2390      	movs	r3, #144	; 0x90
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	2200      	movs	r2, #0
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fe3c 	bl	8003a9e <HAL_GPIO_WritePin>
	  	          usDelay(3);
 8002e26:	2003      	movs	r0, #3
 8002e28:	f000 f919 	bl	800305e <usDelay>
	  	 	  		//*** commencer la mesure ***//
	  	 	  		//1. on maintien Trig   l' tat haut pendant 10us pour commencer le calcul
	  	 	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	0059      	lsls	r1, r3, #1
 8002e30:	2390      	movs	r3, #144	; 0x90
 8002e32:	05db      	lsls	r3, r3, #23
 8002e34:	2201      	movs	r2, #1
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fe31 	bl	8003a9e <HAL_GPIO_WritePin>
	  	 	  		usDelay(10);
 8002e3c:	200a      	movs	r0, #10
 8002e3e:	f000 f90e 	bl	800305e <usDelay>
	  	 	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	0059      	lsls	r1, r3, #1
 8002e46:	2390      	movs	r3, #144	; 0x90
 8002e48:	05db      	lsls	r3, r3, #23
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 fe26 	bl	8003a9e <HAL_GPIO_WritePin>

	  	 	  	    configureInputSIGPin();
 8002e52:	f7ff ff8d 	bl	8002d70 <configureInputSIGPin>
	  	 	  	  //2. Attendre le front montant du pin Echo
	  	 	  	  	 	  		while(HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin) == GPIO_PIN_RESET);
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	005a      	lsls	r2, r3, #1
 8002e5c:	2390      	movs	r3, #144	; 0x90
 8002e5e:	05db      	lsls	r3, r3, #23
 8002e60:	0011      	movs	r1, r2
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 fdfe 	bl	8003a64 <HAL_GPIO_ReadPin>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d0f5      	beq.n	8002e58 <main+0xa8>

	  	 	  	  	 	  		//3. Commencer   mesurer la largeur d'impulsion Echo en usec
	  	 	  	  	 	  		numTicks = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	607b      	str	r3, [r7, #4]
	  	 	  	  	 	  		while(HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin) == GPIO_PIN_SET)
 8002e70:	e005      	b.n	8002e7e <main+0xce>
	  	 	  	  	 	  		{
	  	 	  	  	 	  			numTicks++;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3301      	adds	r3, #1
 8002e76:	607b      	str	r3, [r7, #4]
	  	 	  	  	 	  			usDelay(2); //2.8us en vrai car la fonction utilis  ne donne pas exactement 2us
 8002e78:	2002      	movs	r0, #2
 8002e7a:	f000 f8f0 	bl	800305e <usDelay>
	  	 	  	  	 	  		while(HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin) == GPIO_PIN_SET)
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	005a      	lsls	r2, r3, #1
 8002e82:	2390      	movs	r3, #144	; 0x90
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	0011      	movs	r1, r2
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 fdeb 	bl	8003a64 <HAL_GPIO_ReadPin>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d0ee      	beq.n	8002e72 <main+0xc2>
	  	 	  	  	 	  		};

	  	 	  	  	 	  		//4. calcule de la distance en cm
	  	 	  	  	 	  		distance = (numTicks + 0.0f)*2.8*speedOfSound+0.4;
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fd fd15 	bl	80008c4 <__aeabi_ui2f>
 8002e9a:	1c03      	adds	r3, r0, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	1c18      	adds	r0, r3, #0
 8002ea0:	f7fd fb70 	bl	8000584 <__aeabi_fadd>
 8002ea4:	1c03      	adds	r3, r0, #0
 8002ea6:	1c18      	adds	r0, r3, #0
 8002ea8:	f7ff fb9c 	bl	80025e4 <__aeabi_f2d>
 8002eac:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <main+0x1bc>)
 8002eae:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <main+0x1c0>)
 8002eb0:	f7fe fcaa 	bl	8001808 <__aeabi_dmul>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	000b      	movs	r3, r1
 8002eb8:	0014      	movs	r4, r2
 8002eba:	001d      	movs	r5, r3
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <main+0x1c4>)
 8002ebe:	1c18      	adds	r0, r3, #0
 8002ec0:	f7ff fb90 	bl	80025e4 <__aeabi_f2d>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	000b      	movs	r3, r1
 8002ec8:	0020      	movs	r0, r4
 8002eca:	0029      	movs	r1, r5
 8002ecc:	f7fe fc9c 	bl	8001808 <__aeabi_dmul>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	0010      	movs	r0, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <main+0x1c8>)
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <main+0x1cc>)
 8002edc:	f7fd fd3a 	bl	8000954 <__aeabi_dadd>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	000b      	movs	r3, r1
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	f7ff fbc4 	bl	8002674 <__aeabi_d2f>
 8002eec:	1c02      	adds	r2, r0, #0
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <main+0x1d0>)
 8002ef0:	601a      	str	r2, [r3, #0]

	  	 	  	  	 	  		//5. transmettre la distance vers le pc pour l'afficher
	  	 	  	  	 	  		sprintf(uartBuf, "Dis  = %.1f ",  distance);
 8002ef2:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <main+0x1d0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	1c18      	adds	r0, r3, #0
 8002ef8:	f7ff fb74 	bl	80025e4 <__aeabi_f2d>
 8002efc:	0002      	movs	r2, r0
 8002efe:	000b      	movs	r3, r1
 8002f00:	4920      	ldr	r1, [pc, #128]	; (8002f84 <main+0x1d4>)
 8002f02:	4821      	ldr	r0, [pc, #132]	; (8002f88 <main+0x1d8>)
 8002f04:	f004 f84a 	bl	8006f9c <siprintf>
	  	 	  	  	 	        lcd_position(&hi2c1,0,0);
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <main+0x1b0>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff feae 	bl	8002c70 <lcd_position>
	  	 	  	  	 	   	    lcd_print(&hi2c1,uartBuf);
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <main+0x1d8>)
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <main+0x1b0>)
 8002f18:	0011      	movs	r1, r2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff fe7c 	bl	8002c18 <lcd_print>

	  	 	  	          	   lcd_position(&hi2c1,14,0);
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <main+0x1b0>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	210e      	movs	r1, #14
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7ff fea2 	bl	8002c70 <lcd_position>
	  	 	  	          	   lcd_print(&hi2c1, "cm");
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <main+0x1dc>)
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <main+0x1b0>)
 8002f30:	0011      	movs	r1, r2
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff fe70 	bl	8002c18 <lcd_print>
	  	 	  	  	           lcd_print(&hi2c1,uartBuf);
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <main+0x1d8>)
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <main+0x1b0>)
 8002f3c:	0011      	movs	r1, r2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7ff fe6a 	bl	8002c18 <lcd_print>

	  	 	  	  	 	  		HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <main+0x1d8>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7fd f8dc 	bl	8000104 <strlen>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	490d      	ldr	r1, [pc, #52]	; (8002f88 <main+0x1d8>)
 8002f52:	480f      	ldr	r0, [pc, #60]	; (8002f90 <main+0x1e0>)
 8002f54:	2364      	movs	r3, #100	; 0x64
 8002f56:	f002 fc25 	bl	80057a4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002f5a:	e755      	b.n	8002e08 <main+0x58>
 8002f5c:	20000244 	.word	0x20000244
 8002f60:	200001f0 	.word	0x200001f0
 8002f64:	0800aa5c 	.word	0x0800aa5c
 8002f68:	00000bb8 	.word	0x00000bb8
 8002f6c:	66666666 	.word	0x66666666
 8002f70:	40066666 	.word	0x40066666
 8002f74:	3c8b4396 	.word	0x3c8b4396
 8002f78:	9999999a 	.word	0x9999999a
 8002f7c:	3fd99999 	.word	0x3fd99999
 8002f80:	20000248 	.word	0x20000248
 8002f84:	0800aa64 	.word	0x0800aa64
 8002f88:	2000024c 	.word	0x2000024c
 8002f8c:	0800aa74 	.word	0x0800aa74
 8002f90:	200002fc 	.word	0x200002fc

08002f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b099      	sub	sp, #100	; 0x64
 8002f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f9a:	242c      	movs	r4, #44	; 0x2c
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	2334      	movs	r3, #52	; 0x34
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	f004 f865 	bl	8007074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002faa:	231c      	movs	r3, #28
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	0018      	movs	r0, r3
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f004 f85d 	bl	8007074 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fba:	003b      	movs	r3, r7
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	231c      	movs	r3, #28
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	f004 f856 	bl	8007074 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fc8:	0021      	movs	r1, r4
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	2202      	movs	r2, #2
 8002fce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fd6:	187b      	adds	r3, r7, r1
 8002fd8:	2210      	movs	r2, #16
 8002fda:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2202      	movs	r2, #2
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2280      	movs	r2, #128	; 0x80
 8002fe6:	0212      	lsls	r2, r2, #8
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	22a0      	movs	r2, #160	; 0xa0
 8002fee:	0392      	lsls	r2, r2, #14
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f001 faf0 	bl	80045e0 <HAL_RCC_OscConfig>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003004:	f000 f861 	bl	80030ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003008:	211c      	movs	r1, #28
 800300a:	187b      	adds	r3, r7, r1
 800300c:	2207      	movs	r2, #7
 800300e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003010:	187b      	adds	r3, r7, r1
 8003012:	2202      	movs	r2, #2
 8003014:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800301c:	187b      	adds	r3, r7, r1
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003022:	187b      	adds	r3, r7, r1
 8003024:	2101      	movs	r1, #1
 8003026:	0018      	movs	r0, r3
 8003028:	f001 fe60 	bl	8004cec <HAL_RCC_ClockConfig>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003030:	f000 f84b 	bl	80030ca <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003034:	003b      	movs	r3, r7
 8003036:	2222      	movs	r2, #34	; 0x22
 8003038:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800303a:	003b      	movs	r3, r7
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003040:	003b      	movs	r3, r7
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003046:	003b      	movs	r3, r7
 8003048:	0018      	movs	r0, r3
 800304a:	f001 ffbb 	bl	8004fc4 <HAL_RCCEx_PeriphCLKConfig>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003052:	f000 f83a 	bl	80030ca <Error_Handler>
  }
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b019      	add	sp, #100	; 0x64
 800305c:	bd90      	pop	{r4, r7, pc}

0800305e <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec) // fonction qui nous sert a cr er un d lai en us
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d801      	bhi.n	8003070 <usDelay+0x12>
 800306c:	2302      	movs	r3, #2
 800306e:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	05db      	lsls	r3, r3, #23
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	3a01      	subs	r2, #1
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	2201      	movs	r2, #1
 8003080:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	05db      	lsls	r3, r3, #23
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	05db      	lsls	r3, r3, #23
 800308c:	2101      	movs	r1, #1
 800308e:	438a      	bics	r2, r1
 8003090:	611a      	str	r2, [r3, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	05db      	lsls	r3, r3, #23
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	05db      	lsls	r3, r3, #23
 800309c:	2101      	movs	r1, #1
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
	while((usTIM->SR&0x0001) != 1);
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	05db      	lsls	r3, r3, #23
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d1f8      	bne.n	80030a4 <usDelay+0x46>
	usTIM->SR &= ~(0x0001);
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	05db      	lsls	r3, r3, #23
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	05db      	lsls	r3, r3, #23
 80030bc:	2101      	movs	r1, #1
 80030be:	438a      	bics	r2, r1
 80030c0:	611a      	str	r2, [r3, #16]
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b002      	add	sp, #8
 80030c8:	bd80      	pop	{r7, pc}

080030ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030ce:	b672      	cpsid	i
}
 80030d0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <Error_Handler+0x8>

080030d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_MspInit+0x44>)
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_MspInit+0x44>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	619a      	str	r2, [r3, #24]
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <HAL_MspInit+0x44>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2201      	movs	r2, #1
 80030ec:	4013      	ands	r3, r2
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_MspInit+0x44>)
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_MspInit+0x44>)
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	0549      	lsls	r1, r1, #21
 80030fc:	430a      	orrs	r2, r1
 80030fe:	61da      	str	r2, [r3, #28]
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_MspInit+0x44>)
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	055b      	lsls	r3, r3, #21
 8003108:	4013      	ands	r3, r2
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b002      	add	sp, #8
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	40021000 	.word	0x40021000

0800311c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003120:	e7fe      	b.n	8003120 <NMI_Handler+0x4>

08003122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003126:	e7fe      	b.n	8003126 <HardFault_Handler+0x4>

08003128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003140:	f000 fa24 	bl	800358c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	af00      	add	r7, sp, #0
  return 1;
 800314e:	2301      	movs	r3, #1
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_kill>:

int _kill(int pid, int sig)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003160:	f003 ffe2 	bl	8007128 <__errno>
 8003164:	0003      	movs	r3, r0
 8003166:	2216      	movs	r2, #22
 8003168:	601a      	str	r2, [r3, #0]
  return -1;
 800316a:	2301      	movs	r3, #1
 800316c:	425b      	negs	r3, r3
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b002      	add	sp, #8
 8003174:	bd80      	pop	{r7, pc}

08003176 <_exit>:

void _exit (int status)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800317e:	2301      	movs	r3, #1
 8003180:	425a      	negs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	0011      	movs	r1, r2
 8003186:	0018      	movs	r0, r3
 8003188:	f7ff ffe5 	bl	8003156 <_kill>
  while (1) {}    /* Make sure we hang here */
 800318c:	e7fe      	b.n	800318c <_exit+0x16>

0800318e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e00a      	b.n	80031b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031a0:	e000      	b.n	80031a4 <_read+0x16>
 80031a2:	bf00      	nop
 80031a4:	0001      	movs	r1, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	60ba      	str	r2, [r7, #8]
 80031ac:	b2ca      	uxtb	r2, r1
 80031ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3301      	adds	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	dbf0      	blt.n	80031a0 <_read+0x12>
  }

  return len;
 80031be:	687b      	ldr	r3, [r7, #4]
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b006      	add	sp, #24
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e009      	b.n	80031ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	60ba      	str	r2, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	0018      	movs	r0, r3
 80031e4:	e000      	b.n	80031e8 <_write+0x20>
 80031e6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3301      	adds	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	dbf1      	blt.n	80031da <_write+0x12>
  }
  return len;
 80031f6:	687b      	ldr	r3, [r7, #4]
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b006      	add	sp, #24
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_close>:

int _close(int file)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003208:	2301      	movs	r3, #1
 800320a:	425b      	negs	r3, r3
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	0192      	lsls	r2, r2, #6
 8003224:	605a      	str	r2, [r3, #4]
  return 0;
 8003226:	2300      	movs	r3, #0
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}

08003230 <_isatty>:

int _isatty(int file)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003238:	2301      	movs	r3, #1
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bd80      	pop	{r7, pc}

08003242 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800324e:	2300      	movs	r3, #0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}

08003258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003260:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <_sbrk+0x5c>)
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <_sbrk+0x60>)
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <_sbrk+0x64>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <_sbrk+0x64>)
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <_sbrk+0x68>)
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <_sbrk+0x64>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	18d3      	adds	r3, r2, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	429a      	cmp	r2, r3
 8003286:	d207      	bcs.n	8003298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003288:	f003 ff4e 	bl	8007128 <__errno>
 800328c:	0003      	movs	r3, r0
 800328e:	220c      	movs	r2, #12
 8003290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003292:	2301      	movs	r3, #1
 8003294:	425b      	negs	r3, r3
 8003296:	e009      	b.n	80032ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <_sbrk+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <_sbrk+0x64>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	18d2      	adds	r2, r2, r3
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <_sbrk+0x64>)
 80032a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80032aa:	68fb      	ldr	r3, [r7, #12]
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b006      	add	sp, #24
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20008000 	.word	0x20008000
 80032b8:	00000400 	.word	0x00000400
 80032bc:	200002b0 	.word	0x200002b0
 80032c0:	200004d8 	.word	0x200004d8

080032c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032d6:	2308      	movs	r3, #8
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	0018      	movs	r0, r3
 80032dc:	2310      	movs	r3, #16
 80032de:	001a      	movs	r2, r3
 80032e0:	2100      	movs	r1, #0
 80032e2:	f003 fec7 	bl	8007074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e6:	003b      	movs	r3, r7
 80032e8:	0018      	movs	r0, r3
 80032ea:	2308      	movs	r3, #8
 80032ec:	001a      	movs	r2, r3
 80032ee:	2100      	movs	r1, #0
 80032f0:	f003 fec0 	bl	8007074 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <MX_TIM2_Init+0xa4>)
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	05d2      	lsls	r2, r2, #23
 80032fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <MX_TIM2_Init+0xa4>)
 80032fe:	222f      	movs	r2, #47	; 0x2f
 8003300:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <MX_TIM2_Init+0xa4>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <MX_TIM2_Init+0xa4>)
 800330a:	2201      	movs	r2, #1
 800330c:	4252      	negs	r2, r2
 800330e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <MX_TIM2_Init+0xa4>)
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003316:	4b17      	ldr	r3, [pc, #92]	; (8003374 <MX_TIM2_Init+0xa4>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <MX_TIM2_Init+0xa4>)
 800331e:	0018      	movs	r0, r3
 8003320:	f001 ff50 	bl	80051c4 <HAL_TIM_Base_Init>
 8003324:	1e03      	subs	r3, r0, #0
 8003326:	d001      	beq.n	800332c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003328:	f7ff fecf 	bl	80030ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800332c:	2108      	movs	r1, #8
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	0152      	lsls	r2, r2, #5
 8003334:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003336:	187a      	adds	r2, r7, r1
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <MX_TIM2_Init+0xa4>)
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f001 ff91 	bl	8005264 <HAL_TIM_ConfigClockSource>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d001      	beq.n	800334a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003346:	f7ff fec0 	bl	80030ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334a:	003b      	movs	r3, r7
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003350:	003b      	movs	r3, r7
 8003352:	2200      	movs	r2, #0
 8003354:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003356:	003a      	movs	r2, r7
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <MX_TIM2_Init+0xa4>)
 800335a:	0011      	movs	r1, r2
 800335c:	0018      	movs	r0, r3
 800335e:	f002 f96f 	bl	8005640 <HAL_TIMEx_MasterConfigSynchronization>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d001      	beq.n	800336a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003366:	f7ff feb0 	bl	80030ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	b006      	add	sp, #24
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	200002b4 	.word	0x200002b4

08003378 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	429a      	cmp	r2, r3
 800338a:	d10b      	bne.n	80033a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_TIM_Base_MspInit+0x34>)
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_TIM_Base_MspInit+0x34>)
 8003392:	2101      	movs	r1, #1
 8003394:	430a      	orrs	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <HAL_TIM_Base_MspInit+0x34>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	2201      	movs	r2, #1
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b004      	add	sp, #16
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000

080033b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033b4:	4b14      	ldr	r3, [pc, #80]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033b6:	4a15      	ldr	r2, [pc, #84]	; (800340c <MX_USART2_UART_Init+0x5c>)
 80033b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033bc:	22e1      	movs	r2, #225	; 0xe1
 80033be:	0252      	lsls	r2, r2, #9
 80033c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <MX_USART2_UART_Init+0x58>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f002 f981 	bl	80056fc <HAL_UART_Init>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d001      	beq.n	8003402 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80033fe:	f7ff fe64 	bl	80030ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	200002fc 	.word	0x200002fc
 800340c:	40004400 	.word	0x40004400

08003410 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b08b      	sub	sp, #44	; 0x2c
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003418:	2414      	movs	r4, #20
 800341a:	193b      	adds	r3, r7, r4
 800341c:	0018      	movs	r0, r3
 800341e:	2314      	movs	r3, #20
 8003420:	001a      	movs	r2, r3
 8003422:	2100      	movs	r1, #0
 8003424:	f003 fe26 	bl	8007074 <memset>
  if(uartHandle->Instance==USART2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_UART_MspInit+0x90>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d132      	bne.n	8003498 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <HAL_UART_MspInit+0x94>)
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <HAL_UART_MspInit+0x94>)
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	0289      	lsls	r1, r1, #10
 800343c:	430a      	orrs	r2, r1
 800343e:	61da      	str	r2, [r3, #28]
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_UART_MspInit+0x94>)
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	029b      	lsls	r3, r3, #10
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_UART_MspInit+0x94>)
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <HAL_UART_MspInit+0x94>)
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	0289      	lsls	r1, r1, #10
 8003458:	430a      	orrs	r2, r1
 800345a:	615a      	str	r2, [r3, #20]
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <HAL_UART_MspInit+0x94>)
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	029b      	lsls	r3, r3, #10
 8003464:	4013      	ands	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800346a:	0021      	movs	r1, r4
 800346c:	187b      	adds	r3, r7, r1
 800346e:	220c      	movs	r2, #12
 8003470:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	187b      	adds	r3, r7, r1
 8003474:	2202      	movs	r2, #2
 8003476:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	187b      	adds	r3, r7, r1
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2200      	movs	r2, #0
 8003482:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2201      	movs	r2, #1
 8003488:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	187a      	adds	r2, r7, r1
 800348c:	2390      	movs	r3, #144	; 0x90
 800348e:	05db      	lsls	r3, r3, #23
 8003490:	0011      	movs	r1, r2
 8003492:	0018      	movs	r0, r3
 8003494:	f000 f96e 	bl	8003774 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b00b      	add	sp, #44	; 0x2c
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	40004400 	.word	0x40004400
 80034a4:	40021000 	.word	0x40021000

080034a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034a8:	480d      	ldr	r0, [pc, #52]	; (80034e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034ac:	f7ff ff0a 	bl	80032c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034b0:	480c      	ldr	r0, [pc, #48]	; (80034e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80034b2:	490d      	ldr	r1, [pc, #52]	; (80034e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034b4:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <LoopForever+0xe>)
  movs r3, #0
 80034b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034b8:	e002      	b.n	80034c0 <LoopCopyDataInit>

080034ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034be:	3304      	adds	r3, #4

080034c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034c4:	d3f9      	bcc.n	80034ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034c8:	4c0a      	ldr	r4, [pc, #40]	; (80034f4 <LoopForever+0x16>)
  movs r3, #0
 80034ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034cc:	e001      	b.n	80034d2 <LoopFillZerobss>

080034ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034d0:	3204      	adds	r2, #4

080034d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034d4:	d3fb      	bcc.n	80034ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034d6:	f003 fe2d 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034da:	f7ff fc69 	bl	8002db0 <main>

080034de <LoopForever>:

LoopForever:
    b LoopForever
 80034de:	e7fe      	b.n	80034de <LoopForever>
  ldr   r0, =_estack
 80034e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80034e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034e8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80034ec:	0800af20 	.word	0x0800af20
  ldr r2, =_sbss
 80034f0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80034f4:	200004d4 	.word	0x200004d4

080034f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034f8:	e7fe      	b.n	80034f8 <ADC1_COMP_IRQHandler>
	...

080034fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_Init+0x24>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_Init+0x24>)
 8003506:	2110      	movs	r1, #16
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800350c:	2000      	movs	r0, #0
 800350e:	f000 f809 	bl	8003524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003512:	f7ff fddf 	bl	80030d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	40022000 	.word	0x40022000

08003524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_InitTick+0x5c>)
 800352e:	681c      	ldr	r4, [r3, #0]
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_InitTick+0x60>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	0019      	movs	r1, r3
 8003536:	23fa      	movs	r3, #250	; 0xfa
 8003538:	0098      	lsls	r0, r3, #2
 800353a:	f7fc fdff 	bl	800013c <__udivsi3>
 800353e:	0003      	movs	r3, r0
 8003540:	0019      	movs	r1, r3
 8003542:	0020      	movs	r0, r4
 8003544:	f7fc fdfa 	bl	800013c <__udivsi3>
 8003548:	0003      	movs	r3, r0
 800354a:	0018      	movs	r0, r3
 800354c:	f000 f905 	bl	800375a <HAL_SYSTICK_Config>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e00f      	b.n	8003578 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d80b      	bhi.n	8003576 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	2301      	movs	r3, #1
 8003562:	425b      	negs	r3, r3
 8003564:	2200      	movs	r2, #0
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f8e2 	bl	8003730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_InitTick+0x64>)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b003      	add	sp, #12
 800357e:	bd90      	pop	{r4, r7, pc}
 8003580:	20000000 	.word	0x20000000
 8003584:	20000008 	.word	0x20000008
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_IncTick+0x1c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	001a      	movs	r2, r3
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_IncTick+0x20>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	18d2      	adds	r2, r2, r3
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_IncTick+0x20>)
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	20000008 	.word	0x20000008
 80035ac:	20000384 	.word	0x20000384

080035b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  return uwTick;
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <HAL_GetTick+0x10>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000384 	.word	0x20000384

080035c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7ff fff0 	bl	80035b0 <HAL_GetTick>
 80035d0:	0003      	movs	r3, r0
 80035d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	d005      	beq.n	80035ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_Delay+0x44>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	001a      	movs	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	f7ff ffe0 	bl	80035b0 <HAL_GetTick>
 80035f0:	0002      	movs	r2, r0
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d8f7      	bhi.n	80035ec <HAL_Delay+0x28>
  {
  }
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	20000008 	.word	0x20000008

0800360c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	0002      	movs	r2, r0
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b7f      	cmp	r3, #127	; 0x7f
 8003620:	d828      	bhi.n	8003674 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003622:	4a2f      	ldr	r2, [pc, #188]	; (80036e0 <__NVIC_SetPriority+0xd4>)
 8003624:	1dfb      	adds	r3, r7, #7
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b25b      	sxtb	r3, r3
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	33c0      	adds	r3, #192	; 0xc0
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	589b      	ldr	r3, [r3, r2]
 8003632:	1dfa      	adds	r2, r7, #7
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	0011      	movs	r1, r2
 8003638:	2203      	movs	r2, #3
 800363a:	400a      	ands	r2, r1
 800363c:	00d2      	lsls	r2, r2, #3
 800363e:	21ff      	movs	r1, #255	; 0xff
 8003640:	4091      	lsls	r1, r2
 8003642:	000a      	movs	r2, r1
 8003644:	43d2      	mvns	r2, r2
 8003646:	401a      	ands	r2, r3
 8003648:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	019b      	lsls	r3, r3, #6
 800364e:	22ff      	movs	r2, #255	; 0xff
 8003650:	401a      	ands	r2, r3
 8003652:	1dfb      	adds	r3, r7, #7
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	0018      	movs	r0, r3
 8003658:	2303      	movs	r3, #3
 800365a:	4003      	ands	r3, r0
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003660:	481f      	ldr	r0, [pc, #124]	; (80036e0 <__NVIC_SetPriority+0xd4>)
 8003662:	1dfb      	adds	r3, r7, #7
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b25b      	sxtb	r3, r3
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	430a      	orrs	r2, r1
 800366c:	33c0      	adds	r3, #192	; 0xc0
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003672:	e031      	b.n	80036d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <__NVIC_SetPriority+0xd8>)
 8003676:	1dfb      	adds	r3, r7, #7
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	0019      	movs	r1, r3
 800367c:	230f      	movs	r3, #15
 800367e:	400b      	ands	r3, r1
 8003680:	3b08      	subs	r3, #8
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	3306      	adds	r3, #6
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	18d3      	adds	r3, r2, r3
 800368a:	3304      	adds	r3, #4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1dfa      	adds	r2, r7, #7
 8003690:	7812      	ldrb	r2, [r2, #0]
 8003692:	0011      	movs	r1, r2
 8003694:	2203      	movs	r2, #3
 8003696:	400a      	ands	r2, r1
 8003698:	00d2      	lsls	r2, r2, #3
 800369a:	21ff      	movs	r1, #255	; 0xff
 800369c:	4091      	lsls	r1, r2
 800369e:	000a      	movs	r2, r1
 80036a0:	43d2      	mvns	r2, r2
 80036a2:	401a      	ands	r2, r3
 80036a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	22ff      	movs	r2, #255	; 0xff
 80036ac:	401a      	ands	r2, r3
 80036ae:	1dfb      	adds	r3, r7, #7
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	0018      	movs	r0, r3
 80036b4:	2303      	movs	r3, #3
 80036b6:	4003      	ands	r3, r0
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036bc:	4809      	ldr	r0, [pc, #36]	; (80036e4 <__NVIC_SetPriority+0xd8>)
 80036be:	1dfb      	adds	r3, r7, #7
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	001c      	movs	r4, r3
 80036c4:	230f      	movs	r3, #15
 80036c6:	4023      	ands	r3, r4
 80036c8:	3b08      	subs	r3, #8
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	430a      	orrs	r2, r1
 80036ce:	3306      	adds	r3, #6
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	18c3      	adds	r3, r0, r3
 80036d4:	3304      	adds	r3, #4
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b003      	add	sp, #12
 80036de:	bd90      	pop	{r4, r7, pc}
 80036e0:	e000e100 	.word	0xe000e100
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	045b      	lsls	r3, r3, #17
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d301      	bcc.n	8003700 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036fc:	2301      	movs	r3, #1
 80036fe:	e010      	b.n	8003722 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <SysTick_Config+0x44>)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	3a01      	subs	r2, #1
 8003706:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003708:	2301      	movs	r3, #1
 800370a:	425b      	negs	r3, r3
 800370c:	2103      	movs	r1, #3
 800370e:	0018      	movs	r0, r3
 8003710:	f7ff ff7c 	bl	800360c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <SysTick_Config+0x44>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <SysTick_Config+0x44>)
 800371c:	2207      	movs	r2, #7
 800371e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003720:	2300      	movs	r3, #0
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	e000e010 	.word	0xe000e010

08003730 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	210f      	movs	r1, #15
 800373c:	187b      	adds	r3, r7, r1
 800373e:	1c02      	adds	r2, r0, #0
 8003740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	187b      	adds	r3, r7, r1
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b25b      	sxtb	r3, r3
 800374a:	0011      	movs	r1, r2
 800374c:	0018      	movs	r0, r3
 800374e:	f7ff ff5d 	bl	800360c <__NVIC_SetPriority>
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b004      	add	sp, #16
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff ffbf 	bl	80036e8 <SysTick_Config>
 800376a:	0003      	movs	r3, r0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003782:	e155      	b.n	8003a30 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4091      	lsls	r1, r2
 800378e:	000a      	movs	r2, r1
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d100      	bne.n	800379c <HAL_GPIO_Init+0x28>
 800379a:	e146      	b.n	8003a2a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2203      	movs	r2, #3
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d005      	beq.n	80037b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2203      	movs	r2, #3
 80037ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d130      	bne.n	8003816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	409a      	lsls	r2, r3
 80037c2:	0013      	movs	r3, r2
 80037c4:	43da      	mvns	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	0013      	movs	r3, r2
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037ea:	2201      	movs	r2, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
 80037f0:	0013      	movs	r3, r2
 80037f2:	43da      	mvns	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	2201      	movs	r2, #1
 8003802:	401a      	ands	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	409a      	lsls	r2, r3
 8003808:	0013      	movs	r3, r2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2203      	movs	r2, #3
 800381c:	4013      	ands	r3, r2
 800381e:	2b03      	cmp	r3, #3
 8003820:	d017      	beq.n	8003852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	409a      	lsls	r2, r3
 8003830:	0013      	movs	r3, r2
 8003832:	43da      	mvns	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	0013      	movs	r3, r2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2203      	movs	r2, #3
 8003858:	4013      	ands	r3, r2
 800385a:	2b02      	cmp	r3, #2
 800385c:	d123      	bne.n	80038a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	08da      	lsrs	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3208      	adds	r2, #8
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	58d3      	ldr	r3, [r2, r3]
 800386a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2207      	movs	r2, #7
 8003870:	4013      	ands	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	409a      	lsls	r2, r3
 8003878:	0013      	movs	r3, r2
 800387a:	43da      	mvns	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2107      	movs	r1, #7
 800388a:	400b      	ands	r3, r1
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	409a      	lsls	r2, r3
 8003890:	0013      	movs	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	08da      	lsrs	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3208      	adds	r2, #8
 80038a0:	0092      	lsls	r2, r2, #2
 80038a2:	6939      	ldr	r1, [r7, #16]
 80038a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	409a      	lsls	r2, r3
 80038b4:	0013      	movs	r3, r2
 80038b6:	43da      	mvns	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2203      	movs	r2, #3
 80038c4:	401a      	ands	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	409a      	lsls	r2, r3
 80038cc:	0013      	movs	r3, r2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	23c0      	movs	r3, #192	; 0xc0
 80038e0:	029b      	lsls	r3, r3, #10
 80038e2:	4013      	ands	r3, r2
 80038e4:	d100      	bne.n	80038e8 <HAL_GPIO_Init+0x174>
 80038e6:	e0a0      	b.n	8003a2a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e8:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HAL_GPIO_Init+0x2d4>)
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <HAL_GPIO_Init+0x2d4>)
 80038ee:	2101      	movs	r1, #1
 80038f0:	430a      	orrs	r2, r1
 80038f2:	619a      	str	r2, [r3, #24]
 80038f4:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <HAL_GPIO_Init+0x2d4>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003900:	4a52      	ldr	r2, [pc, #328]	; (8003a4c <HAL_GPIO_Init+0x2d8>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	589b      	ldr	r3, [r3, r2]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2203      	movs	r2, #3
 8003912:	4013      	ands	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	220f      	movs	r2, #15
 8003918:	409a      	lsls	r2, r3
 800391a:	0013      	movs	r3, r2
 800391c:	43da      	mvns	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	2390      	movs	r3, #144	; 0x90
 8003928:	05db      	lsls	r3, r3, #23
 800392a:	429a      	cmp	r2, r3
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x1ee>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a47      	ldr	r2, [pc, #284]	; (8003a50 <HAL_GPIO_Init+0x2dc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x1ea>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a46      	ldr	r2, [pc, #280]	; (8003a54 <HAL_GPIO_Init+0x2e0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x1e6>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a45      	ldr	r2, [pc, #276]	; (8003a58 <HAL_GPIO_Init+0x2e4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x1e2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a44      	ldr	r2, [pc, #272]	; (8003a5c <HAL_GPIO_Init+0x2e8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x1de>
 800394e:	2304      	movs	r3, #4
 8003950:	e008      	b.n	8003964 <HAL_GPIO_Init+0x1f0>
 8003952:	2305      	movs	r3, #5
 8003954:	e006      	b.n	8003964 <HAL_GPIO_Init+0x1f0>
 8003956:	2303      	movs	r3, #3
 8003958:	e004      	b.n	8003964 <HAL_GPIO_Init+0x1f0>
 800395a:	2302      	movs	r3, #2
 800395c:	e002      	b.n	8003964 <HAL_GPIO_Init+0x1f0>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_GPIO_Init+0x1f0>
 8003962:	2300      	movs	r3, #0
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	2103      	movs	r1, #3
 8003968:	400a      	ands	r2, r1
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	4093      	lsls	r3, r2
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003974:	4935      	ldr	r1, [pc, #212]	; (8003a4c <HAL_GPIO_Init+0x2d8>)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	089b      	lsrs	r3, r3, #2
 800397a:	3302      	adds	r3, #2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43da      	mvns	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	035b      	lsls	r3, r3, #13
 800399a:	4013      	ands	r3, r2
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039a6:	4b2e      	ldr	r3, [pc, #184]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80039ac:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43da      	mvns	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	039b      	lsls	r3, r3, #14
 80039c4:	4013      	ands	r3, r2
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43da      	mvns	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	029b      	lsls	r3, r3, #10
 80039ee:	4013      	ands	r3, r2
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039fa:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003a00:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	025b      	lsls	r3, r3, #9
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	40da      	lsrs	r2, r3
 8003a38:	1e13      	subs	r3, r2, #0
 8003a3a:	d000      	beq.n	8003a3e <HAL_GPIO_Init+0x2ca>
 8003a3c:	e6a2      	b.n	8003784 <HAL_GPIO_Init+0x10>
  } 
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b006      	add	sp, #24
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	48000400 	.word	0x48000400
 8003a54:	48000800 	.word	0x48000800
 8003a58:	48000c00 	.word	0x48000c00
 8003a5c:	48001000 	.word	0x48001000
 8003a60:	40010400 	.word	0x40010400

08003a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	000a      	movs	r2, r1
 8003a6e:	1cbb      	adds	r3, r7, #2
 8003a70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	1cba      	adds	r2, r7, #2
 8003a78:	8812      	ldrh	r2, [r2, #0]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003a7e:	230f      	movs	r3, #15
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e003      	b.n	8003a90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a88:	230f      	movs	r3, #15
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003a90:	230f      	movs	r3, #15
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	781b      	ldrb	r3, [r3, #0]
  }
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	0008      	movs	r0, r1
 8003aa8:	0011      	movs	r1, r2
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	1c02      	adds	r2, r0, #0
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	1c7b      	adds	r3, r7, #1
 8003ab2:	1c0a      	adds	r2, r1, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ab6:	1c7b      	adds	r3, r7, #1
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003abe:	1cbb      	adds	r3, r7, #2
 8003ac0:	881a      	ldrh	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ac6:	e003      	b.n	8003ad0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ac8:	1cbb      	adds	r3, r7, #2
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e082      	b.n	8003bf0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2241      	movs	r2, #65	; 0x41
 8003aee:	5c9b      	ldrb	r3, [r3, r2]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d107      	bne.n	8003b06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2240      	movs	r2, #64	; 0x40
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7fe ff15 	bl	8002930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2241      	movs	r2, #65	; 0x41
 8003b0a:	2124      	movs	r1, #36	; 0x24
 8003b0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4934      	ldr	r1, [pc, #208]	; (8003bf8 <HAL_I2C_Init+0x120>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4931      	ldr	r1, [pc, #196]	; (8003bfc <HAL_I2C_Init+0x124>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d108      	bne.n	8003b56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	0209      	lsls	r1, r1, #8
 8003b50:	430a      	orrs	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e007      	b.n	8003b66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2184      	movs	r1, #132	; 0x84
 8003b60:	0209      	lsls	r1, r1, #8
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d104      	bne.n	8003b78 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	491f      	ldr	r1, [pc, #124]	; (8003c00 <HAL_I2C_Init+0x128>)
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	491a      	ldr	r1, [pc, #104]	; (8003bfc <HAL_I2C_Init+0x124>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69d9      	ldr	r1, [r3, #28]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2241      	movs	r2, #65	; 0x41
 8003bdc:	2120      	movs	r1, #32
 8003bde:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2242      	movs	r2, #66	; 0x42
 8003bea:	2100      	movs	r1, #0
 8003bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	f0ffffff 	.word	0xf0ffffff
 8003bfc:	ffff7fff 	.word	0xffff7fff
 8003c00:	02008000 	.word	0x02008000

08003c04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	0008      	movs	r0, r1
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	0019      	movs	r1, r3
 8003c12:	230a      	movs	r3, #10
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	1c02      	adds	r2, r0, #0
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	1c0a      	adds	r2, r1, #0
 8003c20:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2241      	movs	r2, #65	; 0x41
 8003c26:	5c9b      	ldrb	r3, [r3, r2]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d000      	beq.n	8003c30 <HAL_I2C_Master_Transmit+0x2c>
 8003c2e:	e0e7      	b.n	8003e00 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	5c9b      	ldrb	r3, [r3, r2]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2C_Master_Transmit+0x3a>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e0e1      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1fe>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2240      	movs	r2, #64	; 0x40
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c46:	f7ff fcb3 	bl	80035b0 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	0219      	lsls	r1, r3, #8
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2319      	movs	r3, #25
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f000 fa16 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0cc      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2241      	movs	r2, #65	; 0x41
 8003c6c:	2121      	movs	r1, #33	; 0x21
 8003c6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2242      	movs	r2, #66	; 0x42
 8003c74:	2110      	movs	r1, #16
 8003c76:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2208      	movs	r2, #8
 8003c88:	18ba      	adds	r2, r7, r2
 8003c8a:	8812      	ldrh	r2, [r2, #0]
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2bff      	cmp	r3, #255	; 0xff
 8003c9c:	d911      	bls.n	8003cc2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	045c      	lsls	r4, r3, #17
 8003cae:	230a      	movs	r3, #10
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	8819      	ldrh	r1, [r3, #0]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <HAL_I2C_Master_Transmit+0x208>)
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	0023      	movs	r3, r4
 8003cbc:	f000 fbbe 	bl	800443c <I2C_TransferConfig>
 8003cc0:	e075      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	049c      	lsls	r4, r3, #18
 8003cd6:	230a      	movs	r3, #10
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	8819      	ldrh	r1, [r3, #0]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_I2C_Master_Transmit+0x208>)
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	0023      	movs	r3, r4
 8003ce4:	f000 fbaa 	bl	800443c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ce8:	e061      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 fa19 	bl	8004128 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf6:	1e03      	subs	r3, r0, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e081      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03a      	beq.n	8003dae <HAL_I2C_Master_Transmit+0x1aa>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d136      	bne.n	8003dae <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	0013      	movs	r3, r2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2180      	movs	r1, #128	; 0x80
 8003d4e:	f000 f99d 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e053      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2bff      	cmp	r3, #255	; 0xff
 8003d62:	d911      	bls.n	8003d88 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	22ff      	movs	r2, #255	; 0xff
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	045c      	lsls	r4, r3, #17
 8003d74:	230a      	movs	r3, #10
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	8819      	ldrh	r1, [r3, #0]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	0023      	movs	r3, r4
 8003d82:	f000 fb5b 	bl	800443c <I2C_TransferConfig>
 8003d86:	e012      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	049c      	lsls	r4, r3, #18
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	8819      	ldrh	r1, [r3, #0]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	2300      	movs	r3, #0
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	0023      	movs	r3, r4
 8003daa:	f000 fb47 	bl	800443c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d198      	bne.n	8003cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f000 f9f8 	bl	80041b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e01a      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	490c      	ldr	r1, [pc, #48]	; (8003e10 <HAL_I2C_Master_Transmit+0x20c>)
 8003de0:	400a      	ands	r2, r1
 8003de2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2241      	movs	r2, #65	; 0x41
 8003de8:	2120      	movs	r1, #32
 8003dea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2242      	movs	r2, #66	; 0x42
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b007      	add	sp, #28
 8003e08:	bd90      	pop	{r4, r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	80002000 	.word	0x80002000
 8003e10:	fe00e800 	.word	0xfe00e800

08003e14 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	230a      	movs	r3, #10
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	1c0a      	adds	r2, r1, #0
 8003e26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2241      	movs	r2, #65	; 0x41
 8003e30:	5c9b      	ldrb	r3, [r3, r2]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d000      	beq.n	8003e3a <HAL_I2C_IsDeviceReady+0x26>
 8003e38:	e0fd      	b.n	8004036 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699a      	ldr	r2, [r3, #24]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	401a      	ands	r2, r3
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0f2      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2240      	movs	r2, #64	; 0x40
 8003e56:	5c9b      	ldrb	r3, [r3, r2]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_I2C_IsDeviceReady+0x4c>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0eb      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x224>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2240      	movs	r2, #64	; 0x40
 8003e64:	2101      	movs	r1, #1
 8003e66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2241      	movs	r2, #65	; 0x41
 8003e6c:	2124      	movs	r1, #36	; 0x24
 8003e6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_I2C_IsDeviceReady+0x7a>
 8003e7e:	230a      	movs	r3, #10
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	059b      	lsls	r3, r3, #22
 8003e86:	0d9b      	lsrs	r3, r3, #22
 8003e88:	4a6d      	ldr	r2, [pc, #436]	; (8004040 <HAL_I2C_IsDeviceReady+0x22c>)
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	e006      	b.n	8003e9c <HAL_I2C_IsDeviceReady+0x88>
 8003e8e:	230a      	movs	r3, #10
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	059b      	lsls	r3, r3, #22
 8003e96:	0d9b      	lsrs	r3, r3, #22
 8003e98:	4a6a      	ldr	r2, [pc, #424]	; (8004044 <HAL_I2C_IsDeviceReady+0x230>)
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ea2:	f7ff fb85 	bl	80035b0 <HAL_GetTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	3b20      	subs	r3, #32
 8003eb6:	425a      	negs	r2, r3
 8003eb8:	4153      	adcs	r3, r2
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	231f      	movs	r3, #31
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	4013      	ands	r3, r2
 8003ecc:	3b10      	subs	r3, #16
 8003ece:	425a      	negs	r2, r3
 8003ed0:	4153      	adcs	r3, r2
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	231e      	movs	r3, #30
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003eda:	e035      	b.n	8003f48 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	d01a      	beq.n	8003f18 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7ff fb65 	bl	80035b0 <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <HAL_I2C_IsDeviceReady+0xe4>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2241      	movs	r2, #65	; 0x41
 8003efc:	2120      	movs	r1, #32
 8003efe:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	2220      	movs	r2, #32
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e08f      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	4013      	ands	r3, r2
 8003f22:	3b20      	subs	r3, #32
 8003f24:	425a      	negs	r2, r3
 8003f26:	4153      	adcs	r3, r2
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	231f      	movs	r3, #31
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2210      	movs	r2, #16
 8003f38:	4013      	ands	r3, r2
 8003f3a:	3b10      	subs	r3, #16
 8003f3c:	425a      	negs	r2, r3
 8003f3e:	4153      	adcs	r3, r2
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	231e      	movs	r3, #30
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f48:	231f      	movs	r3, #31
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <HAL_I2C_IsDeviceReady+0x148>
 8003f52:	231e      	movs	r3, #30
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0bf      	beq.n	8003edc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2210      	movs	r2, #16
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d01a      	beq.n	8003fa0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	0013      	movs	r3, r2
 8003f74:	2200      	movs	r2, #0
 8003f76:	2120      	movs	r1, #32
 8003f78:	f000 f888 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e059      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2241      	movs	r2, #65	; 0x41
 8003f90:	2120      	movs	r1, #32
 8003f92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	2100      	movs	r1, #0
 8003f9a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e04b      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	0013      	movs	r3, r2
 8003faa:	2200      	movs	r2, #0
 8003fac:	2120      	movs	r1, #32
 8003fae:	f000 f86d 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	1e03      	subs	r3, r0, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e03e      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d119      	bne.n	8004006 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2180      	movs	r1, #128	; 0x80
 8003fde:	01c9      	lsls	r1, r1, #7
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0013      	movs	r3, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	f000 f84b 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e01c      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2220      	movs	r2, #32
 8004004:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3301      	adds	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d900      	bls.n	8004016 <HAL_I2C_IsDeviceReady+0x202>
 8004014:	e72f      	b.n	8003e76 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2241      	movs	r2, #65	; 0x41
 800401a:	2120      	movs	r1, #32
 800401c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	2220      	movs	r2, #32
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2240      	movs	r2, #64	; 0x40
 800402e:	2100      	movs	r1, #0
 8004030:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b008      	add	sp, #32
 800403e:	bd80      	pop	{r7, pc}
 8004040:	02002000 	.word	0x02002000
 8004044:	02002800 	.word	0x02002800

08004048 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2202      	movs	r2, #2
 8004058:	4013      	ands	r3, r2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d103      	bne.n	8004066 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2200      	movs	r2, #0
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2201      	movs	r2, #1
 800406e:	4013      	ands	r3, r2
 8004070:	2b01      	cmp	r3, #1
 8004072:	d007      	beq.n	8004084 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2101      	movs	r1, #1
 8004080:	430a      	orrs	r2, r1
 8004082:	619a      	str	r2, [r3, #24]
  }
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}

0800408c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	1dfb      	adds	r3, r7, #7
 800409a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800409c:	e030      	b.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	d02d      	beq.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a4:	f7ff fa84 	bl	80035b0 <HAL_GetTick>
 80040a8:	0002      	movs	r2, r0
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d122      	bne.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	425a      	negs	r2, r3
 80040ca:	4153      	adcs	r3, r2
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	001a      	movs	r2, r3
 80040d0:	1dfb      	adds	r3, r7, #7
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d113      	bne.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	2220      	movs	r2, #32
 80040de:	431a      	orrs	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2241      	movs	r2, #65	; 0x41
 80040e8:	2120      	movs	r1, #32
 80040ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2242      	movs	r2, #66	; 0x42
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2240      	movs	r2, #64	; 0x40
 80040f8:	2100      	movs	r1, #0
 80040fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e00f      	b.n	8004120 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	425a      	negs	r2, r3
 8004110:	4153      	adcs	r3, r2
 8004112:	b2db      	uxtb	r3, r3
 8004114:	001a      	movs	r2, r3
 8004116:	1dfb      	adds	r3, r7, #7
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d0bf      	beq.n	800409e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	0018      	movs	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	b004      	add	sp, #16
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004134:	e032      	b.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	0018      	movs	r0, r3
 800413e:	f000 f87d 	bl	800423c <I2C_IsErrorOccurred>
 8004142:	1e03      	subs	r3, r0, #0
 8004144:	d001      	beq.n	800414a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e030      	b.n	80041ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3301      	adds	r3, #1
 800414e:	d025      	beq.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004150:	f7ff fa2e 	bl	80035b0 <HAL_GetTick>
 8004154:	0002      	movs	r2, r0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11a      	bne.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2202      	movs	r2, #2
 800416e:	4013      	ands	r3, r2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d013      	beq.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	2220      	movs	r2, #32
 800417a:	431a      	orrs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2241      	movs	r2, #65	; 0x41
 8004184:	2120      	movs	r1, #32
 8004186:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2242      	movs	r2, #66	; 0x42
 800418c:	2100      	movs	r1, #0
 800418e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	; 0x40
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e007      	b.n	80041ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2202      	movs	r2, #2
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d1c5      	bne.n	8004136 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	0018      	movs	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b004      	add	sp, #16
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c0:	e02f      	b.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f000 f837 	bl	800423c <I2C_IsErrorOccurred>
 80041ce:	1e03      	subs	r3, r0, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e02d      	b.n	8004232 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d6:	f7ff f9eb 	bl	80035b0 <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d11a      	bne.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2220      	movs	r2, #32
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d013      	beq.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	2220      	movs	r2, #32
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2241      	movs	r2, #65	; 0x41
 800420a:	2120      	movs	r1, #32
 800420c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2242      	movs	r2, #66	; 0x42
 8004212:	2100      	movs	r1, #0
 8004214:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2240      	movs	r2, #64	; 0x40
 800421a:	2100      	movs	r1, #0
 800421c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e007      	b.n	8004232 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2220      	movs	r2, #32
 800422a:	4013      	ands	r3, r2
 800422c:	2b20      	cmp	r3, #32
 800422e:	d1c8      	bne.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b004      	add	sp, #16
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b08b      	sub	sp, #44	; 0x2c
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2327      	movs	r3, #39	; 0x27
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2210      	movs	r2, #16
 8004264:	4013      	ands	r3, r2
 8004266:	d100      	bne.n	800426a <I2C_IsErrorOccurred+0x2e>
 8004268:	e082      	b.n	8004370 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2210      	movs	r2, #16
 8004270:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004272:	e060      	b.n	8004336 <I2C_IsErrorOccurred+0xfa>
 8004274:	2427      	movs	r4, #39	; 0x27
 8004276:	193b      	adds	r3, r7, r4
 8004278:	193a      	adds	r2, r7, r4
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	3301      	adds	r3, #1
 8004282:	d058      	beq.n	8004336 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004284:	f7ff f994 	bl	80035b0 <HAL_GetTick>
 8004288:	0002      	movs	r2, r0
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	d306      	bcc.n	80042a2 <I2C_IsErrorOccurred+0x66>
 8004294:	193b      	adds	r3, r7, r4
 8004296:	193a      	adds	r2, r7, r4
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d149      	bne.n	8004336 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	01db      	lsls	r3, r3, #7
 80042ac:	4013      	ands	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042b0:	2013      	movs	r0, #19
 80042b2:	183b      	adds	r3, r7, r0
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	2142      	movs	r1, #66	; 0x42
 80042b8:	5c52      	ldrb	r2, [r2, r1]
 80042ba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	401a      	ands	r2, r3
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d126      	bne.n	800431e <I2C_IsErrorOccurred+0xe2>
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	01db      	lsls	r3, r3, #7
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d021      	beq.n	800431e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d01d      	beq.n	800431e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	01c9      	lsls	r1, r1, #7
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042f4:	f7ff f95c 	bl	80035b0 <HAL_GetTick>
 80042f8:	0003      	movs	r3, r0
 80042fa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042fc:	e00f      	b.n	800431e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042fe:	f7ff f957 	bl	80035b0 <HAL_GetTick>
 8004302:	0002      	movs	r2, r0
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b19      	cmp	r3, #25
 800430a:	d908      	bls.n	800431e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	2220      	movs	r2, #32
 8004310:	4313      	orrs	r3, r2
 8004312:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004314:	2327      	movs	r3, #39	; 0x27
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]

              break;
 800431c:	e00b      	b.n	8004336 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2220      	movs	r2, #32
 8004326:	4013      	ands	r3, r2
 8004328:	2127      	movs	r1, #39	; 0x27
 800432a:	187a      	adds	r2, r7, r1
 800432c:	1879      	adds	r1, r7, r1
 800432e:	7809      	ldrb	r1, [r1, #0]
 8004330:	7011      	strb	r1, [r2, #0]
 8004332:	2b20      	cmp	r3, #32
 8004334:	d1e3      	bne.n	80042fe <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2220      	movs	r2, #32
 800433e:	4013      	ands	r3, r2
 8004340:	2b20      	cmp	r3, #32
 8004342:	d004      	beq.n	800434e <I2C_IsErrorOccurred+0x112>
 8004344:	2327      	movs	r3, #39	; 0x27
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d092      	beq.n	8004274 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800434e:	2327      	movs	r3, #39	; 0x27
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2220      	movs	r2, #32
 800435e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2204      	movs	r2, #4
 8004364:	4313      	orrs	r3, r2
 8004366:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004368:	2327      	movs	r3, #39	; 0x27
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4013      	ands	r3, r2
 8004380:	d00c      	beq.n	800439c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2201      	movs	r2, #1
 8004386:	4313      	orrs	r3, r2
 8004388:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2280      	movs	r2, #128	; 0x80
 8004390:	0052      	lsls	r2, r2, #1
 8004392:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004394:	2327      	movs	r3, #39	; 0x27
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4013      	ands	r3, r2
 80043a4:	d00c      	beq.n	80043c0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	2208      	movs	r2, #8
 80043aa:	4313      	orrs	r3, r2
 80043ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	00d2      	lsls	r2, r2, #3
 80043b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043b8:	2327      	movs	r3, #39	; 0x27
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4013      	ands	r3, r2
 80043c8:	d00c      	beq.n	80043e4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	2202      	movs	r2, #2
 80043ce:	4313      	orrs	r3, r2
 80043d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2280      	movs	r2, #128	; 0x80
 80043d8:	0092      	lsls	r2, r2, #2
 80043da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043dc:	2327      	movs	r3, #39	; 0x27
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80043e4:	2327      	movs	r3, #39	; 0x27
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01d      	beq.n	800442a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff fe29 	bl	8004048 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	490d      	ldr	r1, [pc, #52]	; (8004438 <I2C_IsErrorOccurred+0x1fc>)
 8004402:	400a      	ands	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2241      	movs	r2, #65	; 0x41
 8004416:	2120      	movs	r1, #32
 8004418:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2242      	movs	r2, #66	; 0x42
 800441e:	2100      	movs	r1, #0
 8004420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800442a:	2327      	movs	r3, #39	; 0x27
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	781b      	ldrb	r3, [r3, #0]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b00b      	add	sp, #44	; 0x2c
 8004436:	bd90      	pop	{r4, r7, pc}
 8004438:	fe00e800 	.word	0xfe00e800

0800443c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	0008      	movs	r0, r1
 8004446:	0011      	movs	r1, r2
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	240a      	movs	r4, #10
 800444c:	193b      	adds	r3, r7, r4
 800444e:	1c02      	adds	r2, r0, #0
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	2009      	movs	r0, #9
 8004454:	183b      	adds	r3, r7, r0
 8004456:	1c0a      	adds	r2, r1, #0
 8004458:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800445a:	193b      	adds	r3, r7, r4
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	059b      	lsls	r3, r3, #22
 8004460:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004462:	183b      	adds	r3, r7, r0
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	0419      	lsls	r1, r3, #16
 8004468:	23ff      	movs	r3, #255	; 0xff
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800446e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	4313      	orrs	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004486:	0d51      	lsrs	r1, r2, #21
 8004488:	2280      	movs	r2, #128	; 0x80
 800448a:	00d2      	lsls	r2, r2, #3
 800448c:	400a      	ands	r2, r1
 800448e:	4907      	ldr	r1, [pc, #28]	; (80044ac <I2C_TransferConfig+0x70>)
 8004490:	430a      	orrs	r2, r1
 8004492:	43d2      	mvns	r2, r2
 8004494:	401a      	ands	r2, r3
 8004496:	0011      	movs	r1, r2
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b007      	add	sp, #28
 80044a8:	bd90      	pop	{r4, r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	03ff63ff 	.word	0x03ff63ff

080044b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2241      	movs	r2, #65	; 0x41
 80044be:	5c9b      	ldrb	r3, [r3, r2]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d138      	bne.n	8004538 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2240      	movs	r2, #64	; 0x40
 80044ca:	5c9b      	ldrb	r3, [r3, r2]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e032      	b.n	800453a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	2101      	movs	r1, #1
 80044da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2241      	movs	r2, #65	; 0x41
 80044e0:	2124      	movs	r1, #36	; 0x24
 80044e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	438a      	bics	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4911      	ldr	r1, [pc, #68]	; (8004544 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004500:	400a      	ands	r2, r1
 8004502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2101      	movs	r1, #1
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2241      	movs	r2, #65	; 0x41
 8004528:	2120      	movs	r1, #32
 800452a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2240      	movs	r2, #64	; 0x40
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b002      	add	sp, #8
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	ffffefff 	.word	0xffffefff

08004548 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2241      	movs	r2, #65	; 0x41
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b20      	cmp	r3, #32
 800455c:	d139      	bne.n	80045d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2240      	movs	r2, #64	; 0x40
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004568:	2302      	movs	r3, #2
 800456a:	e033      	b.n	80045d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	2101      	movs	r1, #1
 8004572:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2241      	movs	r2, #65	; 0x41
 8004578:	2124      	movs	r1, #36	; 0x24
 800457a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2101      	movs	r1, #1
 8004588:	438a      	bics	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a11      	ldr	r2, [pc, #68]	; (80045dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	430a      	orrs	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2241      	movs	r2, #65	; 0x41
 80045c2:	2120      	movs	r1, #32
 80045c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2240      	movs	r2, #64	; 0x40
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	fffff0ff 	.word	0xfffff0ff

080045e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f000 fb76 	bl	8004ce0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	d100      	bne.n	8004600 <HAL_RCC_OscConfig+0x20>
 80045fe:	e08e      	b.n	800471e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004600:	4bc5      	ldr	r3, [pc, #788]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	220c      	movs	r2, #12
 8004606:	4013      	ands	r3, r2
 8004608:	2b04      	cmp	r3, #4
 800460a:	d00e      	beq.n	800462a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800460c:	4bc2      	ldr	r3, [pc, #776]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	220c      	movs	r2, #12
 8004612:	4013      	ands	r3, r2
 8004614:	2b08      	cmp	r3, #8
 8004616:	d117      	bne.n	8004648 <HAL_RCC_OscConfig+0x68>
 8004618:	4bbf      	ldr	r3, [pc, #764]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	23c0      	movs	r3, #192	; 0xc0
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	401a      	ands	r2, r3
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	025b      	lsls	r3, r3, #9
 8004626:	429a      	cmp	r2, r3
 8004628:	d10e      	bne.n	8004648 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462a:	4bbb      	ldr	r3, [pc, #748]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	029b      	lsls	r3, r3, #10
 8004632:	4013      	ands	r3, r2
 8004634:	d100      	bne.n	8004638 <HAL_RCC_OscConfig+0x58>
 8004636:	e071      	b.n	800471c <HAL_RCC_OscConfig+0x13c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d000      	beq.n	8004642 <HAL_RCC_OscConfig+0x62>
 8004640:	e06c      	b.n	800471c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f000 fb4c 	bl	8004ce0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x80>
 8004650:	4bb1      	ldr	r3, [pc, #708]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4bb0      	ldr	r3, [pc, #704]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	0249      	lsls	r1, r1, #9
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e02f      	b.n	80046c0 <HAL_RCC_OscConfig+0xe0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10c      	bne.n	8004682 <HAL_RCC_OscConfig+0xa2>
 8004668:	4bab      	ldr	r3, [pc, #684]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4baa      	ldr	r3, [pc, #680]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800466e:	49ab      	ldr	r1, [pc, #684]	; (800491c <HAL_RCC_OscConfig+0x33c>)
 8004670:	400a      	ands	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	4ba8      	ldr	r3, [pc, #672]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4ba7      	ldr	r3, [pc, #668]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800467a:	49a9      	ldr	r1, [pc, #676]	; (8004920 <HAL_RCC_OscConfig+0x340>)
 800467c:	400a      	ands	r2, r1
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e01e      	b.n	80046c0 <HAL_RCC_OscConfig+0xe0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d10e      	bne.n	80046a8 <HAL_RCC_OscConfig+0xc8>
 800468a:	4ba3      	ldr	r3, [pc, #652]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4ba2      	ldr	r3, [pc, #648]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	02c9      	lsls	r1, r1, #11
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	4b9f      	ldr	r3, [pc, #636]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b9e      	ldr	r3, [pc, #632]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800469e:	2180      	movs	r1, #128	; 0x80
 80046a0:	0249      	lsls	r1, r1, #9
 80046a2:	430a      	orrs	r2, r1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0xe0>
 80046a8:	4b9b      	ldr	r3, [pc, #620]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b9a      	ldr	r3, [pc, #616]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80046ae:	499b      	ldr	r1, [pc, #620]	; (800491c <HAL_RCC_OscConfig+0x33c>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	4b98      	ldr	r3, [pc, #608]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b97      	ldr	r3, [pc, #604]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80046ba:	4999      	ldr	r1, [pc, #612]	; (8004920 <HAL_RCC_OscConfig+0x340>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d014      	beq.n	80046f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe ff72 	bl	80035b0 <HAL_GetTick>
 80046cc:	0003      	movs	r3, r0
 80046ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d2:	f7fe ff6d 	bl	80035b0 <HAL_GetTick>
 80046d6:	0002      	movs	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b64      	cmp	r3, #100	; 0x64
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e2fd      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e4:	4b8c      	ldr	r3, [pc, #560]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	4013      	ands	r3, r2
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0xf2>
 80046f0:	e015      	b.n	800471e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fe ff5d 	bl	80035b0 <HAL_GetTick>
 80046f6:	0003      	movs	r3, r0
 80046f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fe ff58 	bl	80035b0 <HAL_GetTick>
 8004700:	0002      	movs	r2, r0
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e2e8      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	4b82      	ldr	r3, [pc, #520]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	029b      	lsls	r3, r3, #10
 8004716:	4013      	ands	r3, r2
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x11c>
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2202      	movs	r2, #2
 8004724:	4013      	ands	r3, r2
 8004726:	d100      	bne.n	800472a <HAL_RCC_OscConfig+0x14a>
 8004728:	e06c      	b.n	8004804 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800472a:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	220c      	movs	r2, #12
 8004730:	4013      	ands	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004734:	4b78      	ldr	r3, [pc, #480]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	220c      	movs	r2, #12
 800473a:	4013      	ands	r3, r2
 800473c:	2b08      	cmp	r3, #8
 800473e:	d11f      	bne.n	8004780 <HAL_RCC_OscConfig+0x1a0>
 8004740:	4b75      	ldr	r3, [pc, #468]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	23c0      	movs	r3, #192	; 0xc0
 8004746:	025b      	lsls	r3, r3, #9
 8004748:	401a      	ands	r2, r3
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	429a      	cmp	r2, r3
 8004750:	d116      	bne.n	8004780 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004752:	4b71      	ldr	r3, [pc, #452]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2202      	movs	r2, #2
 8004758:	4013      	ands	r3, r2
 800475a:	d005      	beq.n	8004768 <HAL_RCC_OscConfig+0x188>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e2bb      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004768:	4b6b      	ldr	r3, [pc, #428]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	22f8      	movs	r2, #248	; 0xf8
 800476e:	4393      	bics	r3, r2
 8004770:	0019      	movs	r1, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	00da      	lsls	r2, r3, #3
 8004778:	4b67      	ldr	r3, [pc, #412]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800477a:	430a      	orrs	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477e:	e041      	b.n	8004804 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d024      	beq.n	80047d2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004788:	4b63      	ldr	r3, [pc, #396]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b62      	ldr	r3, [pc, #392]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800478e:	2101      	movs	r1, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fe ff0c 	bl	80035b0 <HAL_GetTick>
 8004798:	0003      	movs	r3, r0
 800479a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800479e:	f7fe ff07 	bl	80035b0 <HAL_GetTick>
 80047a2:	0002      	movs	r2, r0
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e297      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	4b59      	ldr	r3, [pc, #356]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2202      	movs	r2, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d0f1      	beq.n	800479e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	4b57      	ldr	r3, [pc, #348]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	22f8      	movs	r2, #248	; 0xf8
 80047c0:	4393      	bics	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	00da      	lsls	r2, r3, #3
 80047ca:	4b53      	ldr	r3, [pc, #332]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e018      	b.n	8004804 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d2:	4b51      	ldr	r3, [pc, #324]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b50      	ldr	r3, [pc, #320]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80047d8:	2101      	movs	r1, #1
 80047da:	438a      	bics	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fe fee7 	bl	80035b0 <HAL_GetTick>
 80047e2:	0003      	movs	r3, r0
 80047e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047e8:	f7fe fee2 	bl	80035b0 <HAL_GetTick>
 80047ec:	0002      	movs	r2, r0
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e272      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fa:	4b47      	ldr	r3, [pc, #284]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2202      	movs	r2, #2
 8004800:	4013      	ands	r3, r2
 8004802:	d1f1      	bne.n	80047e8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2208      	movs	r2, #8
 800480a:	4013      	ands	r3, r2
 800480c:	d036      	beq.n	800487c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004816:	4b40      	ldr	r3, [pc, #256]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481a:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800481c:	2101      	movs	r1, #1
 800481e:	430a      	orrs	r2, r1
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004822:	f7fe fec5 	bl	80035b0 <HAL_GetTick>
 8004826:	0003      	movs	r3, r0
 8004828:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482c:	f7fe fec0 	bl	80035b0 <HAL_GetTick>
 8004830:	0002      	movs	r2, r0
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e250      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2202      	movs	r2, #2
 8004844:	4013      	ands	r3, r2
 8004846:	d0f1      	beq.n	800482c <HAL_RCC_OscConfig+0x24c>
 8004848:	e018      	b.n	800487c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484a:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800484c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800484e:	4b32      	ldr	r3, [pc, #200]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004850:	2101      	movs	r1, #1
 8004852:	438a      	bics	r2, r1
 8004854:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004856:	f7fe feab 	bl	80035b0 <HAL_GetTick>
 800485a:	0003      	movs	r3, r0
 800485c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004860:	f7fe fea6 	bl	80035b0 <HAL_GetTick>
 8004864:	0002      	movs	r2, r0
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e236      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004872:	4b29      	ldr	r3, [pc, #164]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2202      	movs	r2, #2
 8004878:	4013      	ands	r3, r2
 800487a:	d1f1      	bne.n	8004860 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2204      	movs	r2, #4
 8004882:	4013      	ands	r3, r2
 8004884:	d100      	bne.n	8004888 <HAL_RCC_OscConfig+0x2a8>
 8004886:	e0b5      	b.n	80049f4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004888:	201f      	movs	r0, #31
 800488a:	183b      	adds	r3, r7, r0
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004890:	4b21      	ldr	r3, [pc, #132]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	055b      	lsls	r3, r3, #21
 8004898:	4013      	ands	r3, r2
 800489a:	d110      	bne.n	80048be <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80048a2:	2180      	movs	r1, #128	; 0x80
 80048a4:	0549      	lsls	r1, r1, #21
 80048a6:	430a      	orrs	r2, r1
 80048a8:	61da      	str	r2, [r3, #28]
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	055b      	lsls	r3, r3, #21
 80048b2:	4013      	ands	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048b8:	183b      	adds	r3, r7, r0
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_RCC_OscConfig+0x344>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4013      	ands	r3, r2
 80048c8:	d11a      	bne.n	8004900 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <HAL_RCC_OscConfig+0x344>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <HAL_RCC_OscConfig+0x344>)
 80048d0:	2180      	movs	r1, #128	; 0x80
 80048d2:	0049      	lsls	r1, r1, #1
 80048d4:	430a      	orrs	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d8:	f7fe fe6a 	bl	80035b0 <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e2:	f7fe fe65 	bl	80035b0 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b64      	cmp	r3, #100	; 0x64
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e1f5      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_OscConfig+0x344>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4013      	ands	r3, r2
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10f      	bne.n	8004928 <HAL_RCC_OscConfig+0x348>
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	4b02      	ldr	r3, [pc, #8]	; (8004918 <HAL_RCC_OscConfig+0x338>)
 800490e:	2101      	movs	r1, #1
 8004910:	430a      	orrs	r2, r1
 8004912:	621a      	str	r2, [r3, #32]
 8004914:	e036      	b.n	8004984 <HAL_RCC_OscConfig+0x3a4>
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	40021000 	.word	0x40021000
 800491c:	fffeffff 	.word	0xfffeffff
 8004920:	fffbffff 	.word	0xfffbffff
 8004924:	40007000 	.word	0x40007000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10c      	bne.n	800494a <HAL_RCC_OscConfig+0x36a>
 8004930:	4bca      	ldr	r3, [pc, #808]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	4bc9      	ldr	r3, [pc, #804]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004936:	2101      	movs	r1, #1
 8004938:	438a      	bics	r2, r1
 800493a:	621a      	str	r2, [r3, #32]
 800493c:	4bc7      	ldr	r3, [pc, #796]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 800493e:	6a1a      	ldr	r2, [r3, #32]
 8004940:	4bc6      	ldr	r3, [pc, #792]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004942:	2104      	movs	r1, #4
 8004944:	438a      	bics	r2, r1
 8004946:	621a      	str	r2, [r3, #32]
 8004948:	e01c      	b.n	8004984 <HAL_RCC_OscConfig+0x3a4>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b05      	cmp	r3, #5
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0x38c>
 8004952:	4bc2      	ldr	r3, [pc, #776]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004954:	6a1a      	ldr	r2, [r3, #32]
 8004956:	4bc1      	ldr	r3, [pc, #772]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004958:	2104      	movs	r1, #4
 800495a:	430a      	orrs	r2, r1
 800495c:	621a      	str	r2, [r3, #32]
 800495e:	4bbf      	ldr	r3, [pc, #764]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004960:	6a1a      	ldr	r2, [r3, #32]
 8004962:	4bbe      	ldr	r3, [pc, #760]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004964:	2101      	movs	r1, #1
 8004966:	430a      	orrs	r2, r1
 8004968:	621a      	str	r2, [r3, #32]
 800496a:	e00b      	b.n	8004984 <HAL_RCC_OscConfig+0x3a4>
 800496c:	4bbb      	ldr	r3, [pc, #748]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 800496e:	6a1a      	ldr	r2, [r3, #32]
 8004970:	4bba      	ldr	r3, [pc, #744]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004972:	2101      	movs	r1, #1
 8004974:	438a      	bics	r2, r1
 8004976:	621a      	str	r2, [r3, #32]
 8004978:	4bb8      	ldr	r3, [pc, #736]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	4bb7      	ldr	r3, [pc, #732]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 800497e:	2104      	movs	r1, #4
 8004980:	438a      	bics	r2, r1
 8004982:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d014      	beq.n	80049b6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498c:	f7fe fe10 	bl	80035b0 <HAL_GetTick>
 8004990:	0003      	movs	r3, r0
 8004992:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	e009      	b.n	80049aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fe fe0b 	bl	80035b0 <HAL_GetTick>
 800499a:	0002      	movs	r2, r0
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	4aaf      	ldr	r2, [pc, #700]	; (8004c60 <HAL_RCC_OscConfig+0x680>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e19a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	4bac      	ldr	r3, [pc, #688]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	2202      	movs	r2, #2
 80049b0:	4013      	ands	r3, r2
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x3b6>
 80049b4:	e013      	b.n	80049de <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fe fdfb 	bl	80035b0 <HAL_GetTick>
 80049ba:	0003      	movs	r3, r0
 80049bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049be:	e009      	b.n	80049d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fe fdf6 	bl	80035b0 <HAL_GetTick>
 80049c4:	0002      	movs	r2, r0
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	4aa5      	ldr	r2, [pc, #660]	; (8004c60 <HAL_RCC_OscConfig+0x680>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e185      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d4:	4ba1      	ldr	r3, [pc, #644]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	2202      	movs	r2, #2
 80049da:	4013      	ands	r3, r2
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049de:	231f      	movs	r3, #31
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d105      	bne.n	80049f4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e8:	4b9c      	ldr	r3, [pc, #624]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	4b9b      	ldr	r3, [pc, #620]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 80049ee:	499d      	ldr	r1, [pc, #628]	; (8004c64 <HAL_RCC_OscConfig+0x684>)
 80049f0:	400a      	ands	r2, r1
 80049f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2210      	movs	r2, #16
 80049fa:	4013      	ands	r3, r2
 80049fc:	d063      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d12a      	bne.n	8004a5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a06:	4b95      	ldr	r3, [pc, #596]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a0a:	4b94      	ldr	r3, [pc, #592]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a0c:	2104      	movs	r1, #4
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004a12:	4b92      	ldr	r3, [pc, #584]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a16:	4b91      	ldr	r3, [pc, #580]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a18:	2101      	movs	r1, #1
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1e:	f7fe fdc7 	bl	80035b0 <HAL_GetTick>
 8004a22:	0003      	movs	r3, r0
 8004a24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a28:	f7fe fdc2 	bl	80035b0 <HAL_GetTick>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e152      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a3a:	4b88      	ldr	r3, [pc, #544]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	2202      	movs	r2, #2
 8004a40:	4013      	ands	r3, r2
 8004a42:	d0f1      	beq.n	8004a28 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a44:	4b85      	ldr	r3, [pc, #532]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	22f8      	movs	r2, #248	; 0xf8
 8004a4a:	4393      	bics	r3, r2
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	00da      	lsls	r2, r3, #3
 8004a54:	4b81      	ldr	r3, [pc, #516]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a56:	430a      	orrs	r2, r1
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34
 8004a5a:	e034      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	3305      	adds	r3, #5
 8004a62:	d111      	bne.n	8004a88 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004a64:	4b7d      	ldr	r3, [pc, #500]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a68:	4b7c      	ldr	r3, [pc, #496]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a6a:	2104      	movs	r1, #4
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a70:	4b7a      	ldr	r3, [pc, #488]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	22f8      	movs	r2, #248	; 0xf8
 8004a76:	4393      	bics	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	00da      	lsls	r2, r3, #3
 8004a80:	4b76      	ldr	r3, [pc, #472]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a82:	430a      	orrs	r2, r1
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34
 8004a86:	e01e      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a88:	4b74      	ldr	r3, [pc, #464]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8c:	4b73      	ldr	r3, [pc, #460]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a8e:	2104      	movs	r1, #4
 8004a90:	430a      	orrs	r2, r1
 8004a92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004a94:	4b71      	ldr	r3, [pc, #452]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a98:	4b70      	ldr	r3, [pc, #448]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	438a      	bics	r2, r1
 8004a9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa0:	f7fe fd86 	bl	80035b0 <HAL_GetTick>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004aaa:	f7fe fd81 	bl	80035b0 <HAL_GetTick>
 8004aae:	0002      	movs	r2, r0
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e111      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004abc:	4b67      	ldr	r3, [pc, #412]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d1f1      	bne.n	8004aaa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2220      	movs	r2, #32
 8004acc:	4013      	ands	r3, r2
 8004ace:	d05c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004ad0:	4b62      	ldr	r3, [pc, #392]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	220c      	movs	r2, #12
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	d00e      	beq.n	8004afa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004adc:	4b5f      	ldr	r3, [pc, #380]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	220c      	movs	r2, #12
 8004ae2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d114      	bne.n	8004b12 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004ae8:	4b5c      	ldr	r3, [pc, #368]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	23c0      	movs	r3, #192	; 0xc0
 8004aee:	025b      	lsls	r3, r3, #9
 8004af0:	401a      	ands	r2, r3
 8004af2:	23c0      	movs	r3, #192	; 0xc0
 8004af4:	025b      	lsls	r3, r3, #9
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d10b      	bne.n	8004b12 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004afa:	4b58      	ldr	r3, [pc, #352]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	029b      	lsls	r3, r3, #10
 8004b02:	4013      	ands	r3, r2
 8004b04:	d040      	beq.n	8004b88 <HAL_RCC_OscConfig+0x5a8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d03c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e0e6      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01b      	beq.n	8004b52 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004b1a:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b1e:	4b4f      	ldr	r3, [pc, #316]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	0249      	lsls	r1, r1, #9
 8004b24:	430a      	orrs	r2, r1
 8004b26:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fe fd42 	bl	80035b0 <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b32:	f7fe fd3d 	bl	80035b0 <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0cd      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b44:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	029b      	lsls	r3, r3, #10
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x552>
 8004b50:	e01b      	b.n	8004b8a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004b52:	4b42      	ldr	r3, [pc, #264]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b56:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004b58:	4943      	ldr	r1, [pc, #268]	; (8004c68 <HAL_RCC_OscConfig+0x688>)
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fe fd27 	bl	80035b0 <HAL_GetTick>
 8004b62:	0003      	movs	r3, r0
 8004b64:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b68:	f7fe fd22 	bl	80035b0 <HAL_GetTick>
 8004b6c:	0002      	movs	r2, r0
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0b2      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b7a:	4b38      	ldr	r3, [pc, #224]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	029b      	lsls	r3, r3, #10
 8004b82:	4013      	ands	r3, r2
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x588>
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004b88:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d100      	bne.n	8004b94 <HAL_RCC_OscConfig+0x5b4>
 8004b92:	e0a4      	b.n	8004cde <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b94:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	220c      	movs	r2, #12
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d100      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5c2>
 8004ba0:	e078      	b.n	8004c94 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d14c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004baa:	4b2c      	ldr	r3, [pc, #176]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004bb0:	492e      	ldr	r1, [pc, #184]	; (8004c6c <HAL_RCC_OscConfig+0x68c>)
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fe fcfb 	bl	80035b0 <HAL_GetTick>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fe fcf6 	bl	80035b0 <HAL_GetTick>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e086      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd2:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	049b      	lsls	r3, r3, #18
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bde:	4b1f      	ldr	r3, [pc, #124]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	220f      	movs	r2, #15
 8004be4:	4393      	bics	r3, r2
 8004be6:	0019      	movs	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bec:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <HAL_RCC_OscConfig+0x690>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	431a      	orrs	r2, r3
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0c:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004c12:	2180      	movs	r1, #128	; 0x80
 8004c14:	0449      	lsls	r1, r1, #17
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7fe fcc9 	bl	80035b0 <HAL_GetTick>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fe fcc4 	bl	80035b0 <HAL_GetTick>
 8004c28:	0002      	movs	r2, r0
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e054      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c36:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	049b      	lsls	r3, r3, #18
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x644>
 8004c42:	e04c      	b.n	8004cde <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <HAL_RCC_OscConfig+0x67c>)
 8004c4a:	4908      	ldr	r1, [pc, #32]	; (8004c6c <HAL_RCC_OscConfig+0x68c>)
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fe fcae 	bl	80035b0 <HAL_GetTick>
 8004c54:	0003      	movs	r3, r0
 8004c56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c58:	e015      	b.n	8004c86 <HAL_RCC_OscConfig+0x6a6>
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	00001388 	.word	0x00001388
 8004c64:	efffffff 	.word	0xefffffff
 8004c68:	fffeffff 	.word	0xfffeffff
 8004c6c:	feffffff 	.word	0xfeffffff
 8004c70:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fe fc9c 	bl	80035b0 <HAL_GetTick>
 8004c78:	0002      	movs	r2, r0
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e02c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c86:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <HAL_RCC_OscConfig+0x708>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	049b      	lsls	r3, r3, #18
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x694>
 8004c92:	e024      	b.n	8004cde <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e01f      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_RCC_OscConfig+0x708>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <HAL_RCC_OscConfig+0x708>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	23c0      	movs	r3, #192	; 0xc0
 8004cb0:	025b      	lsls	r3, r3, #9
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d10e      	bne.n	8004cda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	220f      	movs	r2, #15
 8004cc0:	401a      	ands	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	23f0      	movs	r3, #240	; 0xf0
 8004cce:	039b      	lsls	r3, r3, #14
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b008      	add	sp, #32
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000

08004cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0bf      	b.n	8004e80 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d00:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <HAL_RCC_ClockConfig+0x19c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d911      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b5e      	ldr	r3, [pc, #376]	; (8004e88 <HAL_RCC_ClockConfig+0x19c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2201      	movs	r2, #1
 8004d14:	4393      	bics	r3, r2
 8004d16:	0019      	movs	r1, r3
 8004d18:	4b5b      	ldr	r3, [pc, #364]	; (8004e88 <HAL_RCC_ClockConfig+0x19c>)
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d20:	4b59      	ldr	r3, [pc, #356]	; (8004e88 <HAL_RCC_ClockConfig+0x19c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d001      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0a6      	b.n	8004e80 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2202      	movs	r2, #2
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2204      	movs	r2, #4
 8004d42:	4013      	ands	r3, r2
 8004d44:	d006      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d46:	4b51      	ldr	r3, [pc, #324]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	4b50      	ldr	r3, [pc, #320]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004d4c:	21e0      	movs	r1, #224	; 0xe0
 8004d4e:	00c9      	lsls	r1, r1, #3
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d54:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	22f0      	movs	r2, #240	; 0xf0
 8004d5a:	4393      	bics	r3, r2
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	4b4a      	ldr	r3, [pc, #296]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d04c      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d107      	bne.n	8004d8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	4013      	ands	r3, r2
 8004d84:	d120      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e07a      	b.n	8004e80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	4b3e      	ldr	r3, [pc, #248]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	049b      	lsls	r3, r3, #18
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d114      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06e      	b.n	8004e80 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004daa:	4b38      	ldr	r3, [pc, #224]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	4013      	ands	r3, r2
 8004db4:	d108      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e062      	b.n	8004e80 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e05b      	b.n	8004e80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc8:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	4393      	bics	r3, r2
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ddc:	f7fe fbe8 	bl	80035b0 <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de4:	e009      	b.n	8004dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de6:	f7fe fbe3 	bl	80035b0 <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	4a27      	ldr	r2, [pc, #156]	; (8004e90 <HAL_RCC_ClockConfig+0x1a4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e042      	b.n	8004e80 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	220c      	movs	r2, #12
 8004e00:	401a      	ands	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d1ec      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <HAL_RCC_ClockConfig+0x19c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2201      	movs	r2, #1
 8004e12:	4013      	ands	r3, r2
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d211      	bcs.n	8004e3e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_ClockConfig+0x19c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	4393      	bics	r3, r2
 8004e22:	0019      	movs	r1, r3
 8004e24:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <HAL_RCC_ClockConfig+0x19c>)
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2c:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <HAL_RCC_ClockConfig+0x19c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2201      	movs	r2, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e020      	b.n	8004e80 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2204      	movs	r2, #4
 8004e44:	4013      	ands	r3, r2
 8004e46:	d009      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4a11      	ldr	r2, [pc, #68]	; (8004e94 <HAL_RCC_ClockConfig+0x1a8>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	0019      	movs	r1, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e5c:	f000 f820 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004e60:	0001      	movs	r1, r0
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <HAL_RCC_ClockConfig+0x1a0>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	220f      	movs	r2, #15
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <HAL_RCC_ClockConfig+0x1ac>)
 8004e6e:	5cd3      	ldrb	r3, [r2, r3]
 8004e70:	000a      	movs	r2, r1
 8004e72:	40da      	lsrs	r2, r3
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_ClockConfig+0x1b0>)
 8004e76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f7fe fb53 	bl	8003524 <HAL_InitTick>
  
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b004      	add	sp, #16
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40022000 	.word	0x40022000
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	00001388 	.word	0x00001388
 8004e94:	fffff8ff 	.word	0xfffff8ff
 8004e98:	0800aab8 	.word	0x0800aab8
 8004e9c:	20000000 	.word	0x20000000

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004eba:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	220c      	movs	r2, #12
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b0c      	cmp	r3, #12
 8004ec8:	d046      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0xb8>
 8004eca:	d848      	bhi.n	8004f5e <HAL_RCC_GetSysClockFreq+0xbe>
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d002      	beq.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x36>
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d003      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x3c>
 8004ed4:	e043      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ed8:	613b      	str	r3, [r7, #16]
      break;
 8004eda:	e043      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	0c9b      	lsrs	r3, r3, #18
 8004ee0:	220f      	movs	r2, #15
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	4a24      	ldr	r2, [pc, #144]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
 8004ee8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004eea:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	220f      	movs	r2, #15
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <HAL_RCC_GetSysClockFreq+0xdc>)
 8004ef4:	5cd3      	ldrb	r3, [r2, r3]
 8004ef6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	23c0      	movs	r3, #192	; 0xc0
 8004efc:	025b      	lsls	r3, r3, #9
 8004efe:	401a      	ands	r2, r3
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	025b      	lsls	r3, r3, #9
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d109      	bne.n	8004f1c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	481a      	ldr	r0, [pc, #104]	; (8004f74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f0c:	f7fb f916 	bl	800013c <__udivsi3>
 8004f10:	0003      	movs	r3, r0
 8004f12:	001a      	movs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4353      	muls	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e01a      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	23c0      	movs	r3, #192	; 0xc0
 8004f20:	025b      	lsls	r3, r3, #9
 8004f22:	401a      	ands	r2, r3
 8004f24:	23c0      	movs	r3, #192	; 0xc0
 8004f26:	025b      	lsls	r3, r3, #9
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d109      	bne.n	8004f40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4814      	ldr	r0, [pc, #80]	; (8004f80 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004f30:	f7fb f904 	bl	800013c <__udivsi3>
 8004f34:	0003      	movs	r3, r0
 8004f36:	001a      	movs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4353      	muls	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	480c      	ldr	r0, [pc, #48]	; (8004f74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f44:	f7fb f8fa 	bl	800013c <__udivsi3>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4353      	muls	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	613b      	str	r3, [r7, #16]
      break;
 8004f56:	e005      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004f58:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004f5a:	613b      	str	r3, [r7, #16]
      break;
 8004f5c:	e002      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f60:	613b      	str	r3, [r7, #16]
      break;
 8004f62:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f64:	693b      	ldr	r3, [r7, #16]
}
 8004f66:	0018      	movs	r0, r3
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b006      	add	sp, #24
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	40021000 	.word	0x40021000
 8004f74:	007a1200 	.word	0x007a1200
 8004f78:	0800aad0 	.word	0x0800aad0
 8004f7c:	0800aae0 	.word	0x0800aae0
 8004f80:	02dc6c00 	.word	0x02dc6c00

08004f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f88:	4b02      	ldr	r3, [pc, #8]	; (8004f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	20000000 	.word	0x20000000

08004f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004f9c:	f7ff fff2 	bl	8004f84 <HAL_RCC_GetHCLKFreq>
 8004fa0:	0001      	movs	r1, r0
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	2207      	movs	r2, #7
 8004faa:	4013      	ands	r3, r2
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
 8004fb0:	40d9      	lsrs	r1, r3
 8004fb2:	000b      	movs	r3, r1
}    
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	0800aac8 	.word	0x0800aac8

08004fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	025b      	lsls	r3, r3, #9
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d100      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004fe0:	e08e      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004fe2:	2017      	movs	r0, #23
 8004fe4:	183b      	adds	r3, r7, r0
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fea:	4b6e      	ldr	r3, [pc, #440]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	055b      	lsls	r3, r3, #21
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d110      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ff6:	4b6b      	ldr	r3, [pc, #428]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	4b6a      	ldr	r3, [pc, #424]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ffc:	2180      	movs	r1, #128	; 0x80
 8004ffe:	0549      	lsls	r1, r1, #21
 8005000:	430a      	orrs	r2, r1
 8005002:	61da      	str	r2, [r3, #28]
 8005004:	4b67      	ldr	r3, [pc, #412]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	055b      	lsls	r3, r3, #21
 800500c:	4013      	ands	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005012:	183b      	adds	r3, r7, r0
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005018:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4013      	ands	r3, r2
 8005022:	d11a      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005024:	4b60      	ldr	r3, [pc, #384]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800502a:	2180      	movs	r1, #128	; 0x80
 800502c:	0049      	lsls	r1, r1, #1
 800502e:	430a      	orrs	r2, r1
 8005030:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005032:	f7fe fabd 	bl	80035b0 <HAL_GetTick>
 8005036:	0003      	movs	r3, r0
 8005038:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503a:	e008      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503c:	f7fe fab8 	bl	80035b0 <HAL_GetTick>
 8005040:	0002      	movs	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0a6      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504e:	4b56      	ldr	r3, [pc, #344]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4013      	ands	r3, r2
 8005058:	d0f0      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800505a:	4b52      	ldr	r3, [pc, #328]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	23c0      	movs	r3, #192	; 0xc0
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4013      	ands	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d034      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	23c0      	movs	r3, #192	; 0xc0
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4013      	ands	r3, r2
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d02c      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800507c:	4b49      	ldr	r3, [pc, #292]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	4a4a      	ldr	r2, [pc, #296]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005082:	4013      	ands	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005086:	4b47      	ldr	r3, [pc, #284]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	4b46      	ldr	r3, [pc, #280]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	0249      	lsls	r1, r1, #9
 8005090:	430a      	orrs	r2, r1
 8005092:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005094:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800509a:	4945      	ldr	r1, [pc, #276]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800509c:	400a      	ands	r2, r1
 800509e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050a0:	4b40      	ldr	r3, [pc, #256]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	4013      	ands	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ae:	f7fe fa7f 	bl	80035b0 <HAL_GetTick>
 80050b2:	0003      	movs	r3, r0
 80050b4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b6:	e009      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b8:	f7fe fa7a 	bl	80035b0 <HAL_GetTick>
 80050bc:	0002      	movs	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	4a3c      	ldr	r2, [pc, #240]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e067      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050cc:	4b35      	ldr	r3, [pc, #212]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	2202      	movs	r2, #2
 80050d2:	4013      	ands	r3, r2
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d6:	4b33      	ldr	r3, [pc, #204]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	4a34      	ldr	r2, [pc, #208]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050ea:	2317      	movs	r3, #23
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050fa:	492f      	ldr	r1, [pc, #188]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80050fc:	400a      	ands	r2, r1
 80050fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2201      	movs	r2, #1
 8005106:	4013      	ands	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	2203      	movs	r2, #3
 8005110:	4393      	bics	r3, r2
 8005112:	0019      	movs	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800511a:	430a      	orrs	r2, r1
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2202      	movs	r2, #2
 8005124:	4013      	ands	r3, r2
 8005126:	d009      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005128:	4b1e      	ldr	r3, [pc, #120]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800512e:	4013      	ands	r3, r2
 8005130:	0019      	movs	r1, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005138:	430a      	orrs	r2, r1
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	02db      	lsls	r3, r3, #11
 8005144:	4013      	ands	r3, r2
 8005146:	d009      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005148:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800514e:	4013      	ands	r3, r2
 8005150:	0019      	movs	r1, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005158:	430a      	orrs	r2, r1
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2220      	movs	r2, #32
 8005162:	4013      	ands	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005166:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	2210      	movs	r2, #16
 800516c:	4393      	bics	r3, r2
 800516e:	0019      	movs	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005176:	430a      	orrs	r2, r1
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4013      	ands	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005186:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	2240      	movs	r2, #64	; 0x40
 800518c:	4393      	bics	r3, r2
 800518e:	0019      	movs	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005196:	430a      	orrs	r2, r1
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b006      	add	sp, #24
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40007000 	.word	0x40007000
 80051ac:	fffffcff 	.word	0xfffffcff
 80051b0:	fffeffff 	.word	0xfffeffff
 80051b4:	00001388 	.word	0x00001388
 80051b8:	efffffff 	.word	0xefffffff
 80051bc:	fffcffff 	.word	0xfffcffff
 80051c0:	fff3ffff 	.word	0xfff3ffff

080051c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e042      	b.n	800525c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	223d      	movs	r2, #61	; 0x3d
 80051da:	5c9b      	ldrb	r3, [r3, r2]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d107      	bne.n	80051f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	223c      	movs	r2, #60	; 0x3c
 80051e6:	2100      	movs	r1, #0
 80051e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f7fe f8c3 	bl	8003378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	223d      	movs	r2, #61	; 0x3d
 80051f6:	2102      	movs	r1, #2
 80051f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	0019      	movs	r1, r3
 8005204:	0010      	movs	r0, r2
 8005206:	f000 f901 	bl	800540c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2246      	movs	r2, #70	; 0x46
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	223e      	movs	r2, #62	; 0x3e
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	223f      	movs	r2, #63	; 0x3f
 800521e:	2101      	movs	r1, #1
 8005220:	5499      	strb	r1, [r3, r2]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2240      	movs	r2, #64	; 0x40
 8005226:	2101      	movs	r1, #1
 8005228:	5499      	strb	r1, [r3, r2]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2241      	movs	r2, #65	; 0x41
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2242      	movs	r2, #66	; 0x42
 8005236:	2101      	movs	r1, #1
 8005238:	5499      	strb	r1, [r3, r2]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2243      	movs	r2, #67	; 0x43
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2244      	movs	r2, #68	; 0x44
 8005246:	2101      	movs	r1, #1
 8005248:	5499      	strb	r1, [r3, r2]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2245      	movs	r2, #69	; 0x45
 800524e:	2101      	movs	r1, #1
 8005250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	223d      	movs	r2, #61	; 0x3d
 8005256:	2101      	movs	r1, #1
 8005258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	0018      	movs	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	b002      	add	sp, #8
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	230f      	movs	r3, #15
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	223c      	movs	r2, #60	; 0x3c
 800527a:	5c9b      	ldrb	r3, [r3, r2]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_TIM_ConfigClockSource+0x20>
 8005280:	2302      	movs	r3, #2
 8005282:	e0bc      	b.n	80053fe <HAL_TIM_ConfigClockSource+0x19a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	223c      	movs	r2, #60	; 0x3c
 8005288:	2101      	movs	r1, #1
 800528a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	223d      	movs	r2, #61	; 0x3d
 8005290:	2102      	movs	r1, #2
 8005292:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2277      	movs	r2, #119	; 0x77
 80052a0:	4393      	bics	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4a58      	ldr	r2, [pc, #352]	; (8005408 <HAL_TIM_ConfigClockSource+0x1a4>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2280      	movs	r2, #128	; 0x80
 80052ba:	0192      	lsls	r2, r2, #6
 80052bc:	4293      	cmp	r3, r2
 80052be:	d040      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xde>
 80052c0:	2280      	movs	r2, #128	; 0x80
 80052c2:	0192      	lsls	r2, r2, #6
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d900      	bls.n	80052ca <HAL_TIM_ConfigClockSource+0x66>
 80052c8:	e088      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	0152      	lsls	r2, r2, #5
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d100      	bne.n	80052d4 <HAL_TIM_ConfigClockSource+0x70>
 80052d2:	e088      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x182>
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	0152      	lsls	r2, r2, #5
 80052d8:	4293      	cmp	r3, r2
 80052da:	d900      	bls.n	80052de <HAL_TIM_ConfigClockSource+0x7a>
 80052dc:	e07e      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
 80052de:	2b70      	cmp	r3, #112	; 0x70
 80052e0:	d018      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0xb0>
 80052e2:	d900      	bls.n	80052e6 <HAL_TIM_ConfigClockSource+0x82>
 80052e4:	e07a      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
 80052e6:	2b60      	cmp	r3, #96	; 0x60
 80052e8:	d04f      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x126>
 80052ea:	d900      	bls.n	80052ee <HAL_TIM_ConfigClockSource+0x8a>
 80052ec:	e076      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
 80052ee:	2b50      	cmp	r3, #80	; 0x50
 80052f0:	d03b      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x106>
 80052f2:	d900      	bls.n	80052f6 <HAL_TIM_ConfigClockSource+0x92>
 80052f4:	e072      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d057      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x146>
 80052fa:	d900      	bls.n	80052fe <HAL_TIM_ConfigClockSource+0x9a>
 80052fc:	e06e      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
 80052fe:	2b30      	cmp	r3, #48	; 0x30
 8005300:	d063      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x166>
 8005302:	d86b      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
 8005304:	2b20      	cmp	r3, #32
 8005306:	d060      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x166>
 8005308:	d868      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d05d      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x166>
 800530e:	2b10      	cmp	r3, #16
 8005310:	d05b      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x166>
 8005312:	e063      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005324:	f000 f96c 	bl	8005600 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2277      	movs	r2, #119	; 0x77
 8005334:	4313      	orrs	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
      break;
 8005340:	e052      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005352:	f000 f955 	bl	8005600 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2180      	movs	r1, #128	; 0x80
 8005362:	01c9      	lsls	r1, r1, #7
 8005364:	430a      	orrs	r2, r1
 8005366:	609a      	str	r2, [r3, #8]
      break;
 8005368:	e03e      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005376:	001a      	movs	r2, r3
 8005378:	f000 f8c8 	bl	800550c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2150      	movs	r1, #80	; 0x50
 8005382:	0018      	movs	r0, r3
 8005384:	f000 f922 	bl	80055cc <TIM_ITRx_SetConfig>
      break;
 8005388:	e02e      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005396:	001a      	movs	r2, r3
 8005398:	f000 f8e6 	bl	8005568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2160      	movs	r1, #96	; 0x60
 80053a2:	0018      	movs	r0, r3
 80053a4:	f000 f912 	bl	80055cc <TIM_ITRx_SetConfig>
      break;
 80053a8:	e01e      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b6:	001a      	movs	r2, r3
 80053b8:	f000 f8a8 	bl	800550c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2140      	movs	r1, #64	; 0x40
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 f902 	bl	80055cc <TIM_ITRx_SetConfig>
      break;
 80053c8:	e00e      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	0019      	movs	r1, r3
 80053d4:	0010      	movs	r0, r2
 80053d6:	f000 f8f9 	bl	80055cc <TIM_ITRx_SetConfig>
      break;
 80053da:	e005      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80053dc:	230f      	movs	r3, #15
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
      break;
 80053e4:	e000      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80053e6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	223d      	movs	r2, #61	; 0x3d
 80053ec:	2101      	movs	r1, #1
 80053ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	223c      	movs	r2, #60	; 0x3c
 80053f4:	2100      	movs	r1, #0
 80053f6:	5499      	strb	r1, [r3, r2]

  return status;
 80053f8:	230f      	movs	r3, #15
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	781b      	ldrb	r3, [r3, #0]
}
 80053fe:	0018      	movs	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	b004      	add	sp, #16
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	ffff00ff 	.word	0xffff00ff

0800540c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <TIM_Base_SetConfig+0xe4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d008      	beq.n	8005436 <TIM_Base_SetConfig+0x2a>
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	05db      	lsls	r3, r3, #23
 800542a:	429a      	cmp	r2, r3
 800542c:	d003      	beq.n	8005436 <TIM_Base_SetConfig+0x2a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a30      	ldr	r2, [pc, #192]	; (80054f4 <TIM_Base_SetConfig+0xe8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2270      	movs	r2, #112	; 0x70
 800543a:	4393      	bics	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a29      	ldr	r2, [pc, #164]	; (80054f0 <TIM_Base_SetConfig+0xe4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <TIM_Base_SetConfig+0x76>
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	05db      	lsls	r3, r3, #23
 8005456:	429a      	cmp	r2, r3
 8005458:	d013      	beq.n	8005482 <TIM_Base_SetConfig+0x76>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <TIM_Base_SetConfig+0xe8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00f      	beq.n	8005482 <TIM_Base_SetConfig+0x76>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <TIM_Base_SetConfig+0xec>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00b      	beq.n	8005482 <TIM_Base_SetConfig+0x76>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a23      	ldr	r2, [pc, #140]	; (80054fc <TIM_Base_SetConfig+0xf0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d007      	beq.n	8005482 <TIM_Base_SetConfig+0x76>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a22      	ldr	r2, [pc, #136]	; (8005500 <TIM_Base_SetConfig+0xf4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_Base_SetConfig+0x76>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a21      	ldr	r2, [pc, #132]	; (8005504 <TIM_Base_SetConfig+0xf8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d108      	bne.n	8005494 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a20      	ldr	r2, [pc, #128]	; (8005508 <TIM_Base_SetConfig+0xfc>)
 8005486:	4013      	ands	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2280      	movs	r2, #128	; 0x80
 8005498:	4393      	bics	r3, r2
 800549a:	001a      	movs	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <TIM_Base_SetConfig+0xe4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0xce>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <TIM_Base_SetConfig+0xf0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0xce>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <TIM_Base_SetConfig+0xf4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0xce>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <TIM_Base_SetConfig+0xf8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d103      	bne.n	80054e2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	615a      	str	r2, [r3, #20]
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b004      	add	sp, #16
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40002000 	.word	0x40002000
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800
 8005508:	fffffcff 	.word	0xfffffcff

0800550c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	2201      	movs	r2, #1
 8005524:	4393      	bics	r3, r2
 8005526:	001a      	movs	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	22f0      	movs	r2, #240	; 0xf0
 8005536:	4393      	bics	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	220a      	movs	r2, #10
 8005548:	4393      	bics	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	621a      	str	r2, [r3, #32]
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b006      	add	sp, #24
 8005566:	bd80      	pop	{r7, pc}

08005568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	2210      	movs	r2, #16
 800557a:	4393      	bics	r3, r2
 800557c:	001a      	movs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <TIM_TI2_ConfigInputStage+0x60>)
 8005592:	4013      	ands	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	031b      	lsls	r3, r3, #12
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	22a0      	movs	r2, #160	; 0xa0
 80055a4:	4393      	bics	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b006      	add	sp, #24
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	ffff0fff 	.word	0xffff0fff

080055cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2270      	movs	r2, #112	; 0x70
 80055e0:	4393      	bics	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	2207      	movs	r2, #7
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	609a      	str	r2, [r3, #8]
}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	46bd      	mov	sp, r7
 80055fa:	b004      	add	sp, #16
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <TIM_ETR_SetConfig+0x3c>)
 8005618:	4013      	ands	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	431a      	orrs	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	b006      	add	sp, #24
 800563a:	bd80      	pop	{r7, pc}
 800563c:	ffff00ff 	.word	0xffff00ff

08005640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	223c      	movs	r2, #60	; 0x3c
 800564e:	5c9b      	ldrb	r3, [r3, r2]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005654:	2302      	movs	r3, #2
 8005656:	e047      	b.n	80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	223c      	movs	r2, #60	; 0x3c
 800565c:	2101      	movs	r1, #1
 800565e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	223d      	movs	r2, #61	; 0x3d
 8005664:	2102      	movs	r1, #2
 8005666:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2270      	movs	r2, #112	; 0x70
 800567c:	4393      	bics	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00f      	beq.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	05db      	lsls	r3, r3, #23
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d009      	beq.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a10      	ldr	r2, [pc, #64]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d10c      	bne.n	80056d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	4393      	bics	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	223d      	movs	r2, #61	; 0x3d
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	223c      	movs	r2, #60	; 0x3c
 80056e2:	2100      	movs	r1, #0
 80056e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b004      	add	sp, #16
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40014000 	.word	0x40014000

080056fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e044      	b.n	8005798 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d107      	bne.n	8005726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2278      	movs	r2, #120	; 0x78
 800571a:	2100      	movs	r1, #0
 800571c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f7fd fe75 	bl	8003410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2224      	movs	r2, #36	; 0x24
 800572a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2101      	movs	r1, #1
 8005738:	438a      	bics	r2, r1
 800573a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	0018      	movs	r0, r3
 8005740:	f000 f8d0 	bl	80058e4 <UART_SetConfig>
 8005744:	0003      	movs	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e024      	b.n	8005798 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0018      	movs	r0, r3
 800575a:	f000 faab 	bl	8005cb4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	490d      	ldr	r1, [pc, #52]	; (80057a0 <HAL_UART_Init+0xa4>)
 800576a:	400a      	ands	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	212a      	movs	r1, #42	; 0x2a
 800577a:	438a      	bics	r2, r1
 800577c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2101      	movs	r1, #1
 800578a:	430a      	orrs	r2, r1
 800578c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 fb43 	bl	8005e1c <UART_CheckIdleState>
 8005796:	0003      	movs	r3, r0
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	b002      	add	sp, #8
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	ffffb7ff 	.word	0xffffb7ff

080057a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	; 0x28
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	1dbb      	adds	r3, r7, #6
 80057b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d000      	beq.n	80057be <HAL_UART_Transmit+0x1a>
 80057bc:	e08d      	b.n	80058da <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_UART_Transmit+0x28>
 80057c4:	1dbb      	adds	r3, r7, #6
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e085      	b.n	80058dc <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	015b      	lsls	r3, r3, #5
 80057d8:	429a      	cmp	r2, r3
 80057da:	d109      	bne.n	80057f0 <HAL_UART_Transmit+0x4c>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d105      	bne.n	80057f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4013      	ands	r3, r2
 80057ea:	d001      	beq.n	80057f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e075      	b.n	80058dc <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2284      	movs	r2, #132	; 0x84
 80057f4:	2100      	movs	r1, #0
 80057f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2221      	movs	r2, #33	; 0x21
 80057fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057fe:	f7fd fed7 	bl	80035b0 <HAL_GetTick>
 8005802:	0003      	movs	r3, r0
 8005804:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1dba      	adds	r2, r7, #6
 800580a:	2150      	movs	r1, #80	; 0x50
 800580c:	8812      	ldrh	r2, [r2, #0]
 800580e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1dba      	adds	r2, r7, #6
 8005814:	2152      	movs	r1, #82	; 0x52
 8005816:	8812      	ldrh	r2, [r2, #0]
 8005818:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	015b      	lsls	r3, r3, #5
 8005822:	429a      	cmp	r2, r3
 8005824:	d108      	bne.n	8005838 <HAL_UART_Transmit+0x94>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e003      	b.n	8005840 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005840:	e030      	b.n	80058a4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	0013      	movs	r3, r2
 800584c:	2200      	movs	r2, #0
 800584e:	2180      	movs	r1, #128	; 0x80
 8005850:	f000 fb8c 	bl	8005f6c <UART_WaitOnFlagUntilTimeout>
 8005854:	1e03      	subs	r3, r0, #0
 8005856:	d004      	beq.n	8005862 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e03c      	b.n	80058dc <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	05d2      	lsls	r2, r2, #23
 8005872:	0dd2      	lsrs	r2, r2, #23
 8005874:	b292      	uxth	r2, r2
 8005876:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	3302      	adds	r3, #2
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	e008      	b.n	8005892 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	b292      	uxth	r2, r2
 800588a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	3301      	adds	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2252      	movs	r2, #82	; 0x52
 8005896:	5a9b      	ldrh	r3, [r3, r2]
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b299      	uxth	r1, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2252      	movs	r2, #82	; 0x52
 80058a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2252      	movs	r2, #82	; 0x52
 80058a8:	5a9b      	ldrh	r3, [r3, r2]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1c8      	bne.n	8005842 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	0013      	movs	r3, r2
 80058ba:	2200      	movs	r2, #0
 80058bc:	2140      	movs	r1, #64	; 0x40
 80058be:	f000 fb55 	bl	8005f6c <UART_WaitOnFlagUntilTimeout>
 80058c2:	1e03      	subs	r3, r0, #0
 80058c4:	d004      	beq.n	80058d0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e005      	b.n	80058dc <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	0018      	movs	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	b008      	add	sp, #32
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ec:	231e      	movs	r3, #30
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4abe      	ldr	r2, [pc, #760]	; (8005c0c <UART_SetConfig+0x328>)
 8005914:	4013      	ands	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	430a      	orrs	r2, r1
 8005920:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4ab9      	ldr	r2, [pc, #740]	; (8005c10 <UART_SetConfig+0x32c>)
 800592a:	4013      	ands	r3, r2
 800592c:	0019      	movs	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4ab0      	ldr	r2, [pc, #704]	; (8005c14 <UART_SetConfig+0x330>)
 8005952:	4013      	ands	r3, r2
 8005954:	0019      	movs	r1, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	430a      	orrs	r2, r1
 800595e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4aac      	ldr	r2, [pc, #688]	; (8005c18 <UART_SetConfig+0x334>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d127      	bne.n	80059ba <UART_SetConfig+0xd6>
 800596a:	4bac      	ldr	r3, [pc, #688]	; (8005c1c <UART_SetConfig+0x338>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	2203      	movs	r2, #3
 8005970:	4013      	ands	r3, r2
 8005972:	2b03      	cmp	r3, #3
 8005974:	d00d      	beq.n	8005992 <UART_SetConfig+0xae>
 8005976:	d81b      	bhi.n	80059b0 <UART_SetConfig+0xcc>
 8005978:	2b02      	cmp	r3, #2
 800597a:	d014      	beq.n	80059a6 <UART_SetConfig+0xc2>
 800597c:	d818      	bhi.n	80059b0 <UART_SetConfig+0xcc>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <UART_SetConfig+0xa4>
 8005982:	2b01      	cmp	r3, #1
 8005984:	d00a      	beq.n	800599c <UART_SetConfig+0xb8>
 8005986:	e013      	b.n	80059b0 <UART_SetConfig+0xcc>
 8005988:	231f      	movs	r3, #31
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	e0bd      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005992:	231f      	movs	r3, #31
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	2202      	movs	r2, #2
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e0b8      	b.n	8005b0e <UART_SetConfig+0x22a>
 800599c:	231f      	movs	r3, #31
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	2204      	movs	r2, #4
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	e0b3      	b.n	8005b0e <UART_SetConfig+0x22a>
 80059a6:	231f      	movs	r3, #31
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	2208      	movs	r2, #8
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e0ae      	b.n	8005b0e <UART_SetConfig+0x22a>
 80059b0:	231f      	movs	r3, #31
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	2210      	movs	r2, #16
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e0a9      	b.n	8005b0e <UART_SetConfig+0x22a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a98      	ldr	r2, [pc, #608]	; (8005c20 <UART_SetConfig+0x33c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d134      	bne.n	8005a2e <UART_SetConfig+0x14a>
 80059c4:	4b95      	ldr	r3, [pc, #596]	; (8005c1c <UART_SetConfig+0x338>)
 80059c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c8:	23c0      	movs	r3, #192	; 0xc0
 80059ca:	029b      	lsls	r3, r3, #10
 80059cc:	4013      	ands	r3, r2
 80059ce:	22c0      	movs	r2, #192	; 0xc0
 80059d0:	0292      	lsls	r2, r2, #10
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d017      	beq.n	8005a06 <UART_SetConfig+0x122>
 80059d6:	22c0      	movs	r2, #192	; 0xc0
 80059d8:	0292      	lsls	r2, r2, #10
 80059da:	4293      	cmp	r3, r2
 80059dc:	d822      	bhi.n	8005a24 <UART_SetConfig+0x140>
 80059de:	2280      	movs	r2, #128	; 0x80
 80059e0:	0292      	lsls	r2, r2, #10
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d019      	beq.n	8005a1a <UART_SetConfig+0x136>
 80059e6:	2280      	movs	r2, #128	; 0x80
 80059e8:	0292      	lsls	r2, r2, #10
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d81a      	bhi.n	8005a24 <UART_SetConfig+0x140>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <UART_SetConfig+0x118>
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	0252      	lsls	r2, r2, #9
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00a      	beq.n	8005a10 <UART_SetConfig+0x12c>
 80059fa:	e013      	b.n	8005a24 <UART_SetConfig+0x140>
 80059fc:	231f      	movs	r3, #31
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e083      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a06:	231f      	movs	r3, #31
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e07e      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a10:	231f      	movs	r3, #31
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	2204      	movs	r2, #4
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e079      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a1a:	231f      	movs	r3, #31
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2208      	movs	r2, #8
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e074      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a24:	231f      	movs	r3, #31
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	2210      	movs	r2, #16
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	e06f      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a7c      	ldr	r2, [pc, #496]	; (8005c24 <UART_SetConfig+0x340>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d134      	bne.n	8005aa2 <UART_SetConfig+0x1be>
 8005a38:	4b78      	ldr	r3, [pc, #480]	; (8005c1c <UART_SetConfig+0x338>)
 8005a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a3c:	23c0      	movs	r3, #192	; 0xc0
 8005a3e:	031b      	lsls	r3, r3, #12
 8005a40:	4013      	ands	r3, r2
 8005a42:	22c0      	movs	r2, #192	; 0xc0
 8005a44:	0312      	lsls	r2, r2, #12
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d017      	beq.n	8005a7a <UART_SetConfig+0x196>
 8005a4a:	22c0      	movs	r2, #192	; 0xc0
 8005a4c:	0312      	lsls	r2, r2, #12
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d822      	bhi.n	8005a98 <UART_SetConfig+0x1b4>
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	0312      	lsls	r2, r2, #12
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d019      	beq.n	8005a8e <UART_SetConfig+0x1aa>
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	0312      	lsls	r2, r2, #12
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d81a      	bhi.n	8005a98 <UART_SetConfig+0x1b4>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <UART_SetConfig+0x18c>
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	02d2      	lsls	r2, r2, #11
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00a      	beq.n	8005a84 <UART_SetConfig+0x1a0>
 8005a6e:	e013      	b.n	8005a98 <UART_SetConfig+0x1b4>
 8005a70:	231f      	movs	r3, #31
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	2200      	movs	r2, #0
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	e049      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a7a:	231f      	movs	r3, #31
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	2202      	movs	r2, #2
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e044      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a84:	231f      	movs	r3, #31
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	2204      	movs	r2, #4
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e03f      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a8e:	231f      	movs	r3, #31
 8005a90:	18fb      	adds	r3, r7, r3
 8005a92:	2208      	movs	r2, #8
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	e03a      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005a98:	231f      	movs	r3, #31
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	2210      	movs	r2, #16
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e035      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a60      	ldr	r2, [pc, #384]	; (8005c28 <UART_SetConfig+0x344>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d104      	bne.n	8005ab6 <UART_SetConfig+0x1d2>
 8005aac:	231f      	movs	r3, #31
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e02b      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a5c      	ldr	r2, [pc, #368]	; (8005c2c <UART_SetConfig+0x348>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d104      	bne.n	8005aca <UART_SetConfig+0x1e6>
 8005ac0:	231f      	movs	r3, #31
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e021      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a58      	ldr	r2, [pc, #352]	; (8005c30 <UART_SetConfig+0x34c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d104      	bne.n	8005ade <UART_SetConfig+0x1fa>
 8005ad4:	231f      	movs	r3, #31
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	e017      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a54      	ldr	r2, [pc, #336]	; (8005c34 <UART_SetConfig+0x350>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d104      	bne.n	8005af2 <UART_SetConfig+0x20e>
 8005ae8:	231f      	movs	r3, #31
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e00d      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a50      	ldr	r2, [pc, #320]	; (8005c38 <UART_SetConfig+0x354>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d104      	bne.n	8005b06 <UART_SetConfig+0x222>
 8005afc:	231f      	movs	r3, #31
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	e003      	b.n	8005b0e <UART_SetConfig+0x22a>
 8005b06:	231f      	movs	r3, #31
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69da      	ldr	r2, [r3, #28]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d15c      	bne.n	8005bd4 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8005b1a:	231f      	movs	r3, #31
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d015      	beq.n	8005b50 <UART_SetConfig+0x26c>
 8005b24:	dc18      	bgt.n	8005b58 <UART_SetConfig+0x274>
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d00d      	beq.n	8005b46 <UART_SetConfig+0x262>
 8005b2a:	dc15      	bgt.n	8005b58 <UART_SetConfig+0x274>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <UART_SetConfig+0x252>
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d005      	beq.n	8005b40 <UART_SetConfig+0x25c>
 8005b34:	e010      	b.n	8005b58 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b36:	f7ff fa2f 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	61bb      	str	r3, [r7, #24]
        break;
 8005b3e:	e012      	b.n	8005b66 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b40:	4b3e      	ldr	r3, [pc, #248]	; (8005c3c <UART_SetConfig+0x358>)
 8005b42:	61bb      	str	r3, [r7, #24]
        break;
 8005b44:	e00f      	b.n	8005b66 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b46:	f7ff f9ab 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	61bb      	str	r3, [r7, #24]
        break;
 8005b4e:	e00a      	b.n	8005b66 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	61bb      	str	r3, [r7, #24]
        break;
 8005b56:	e006      	b.n	8005b66 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b5c:	231e      	movs	r3, #30
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	2201      	movs	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
        break;
 8005b64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d100      	bne.n	8005b6e <UART_SetConfig+0x28a>
 8005b6c:	e095      	b.n	8005c9a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	005a      	lsls	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	18d2      	adds	r2, r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	0019      	movs	r1, r3
 8005b80:	0010      	movs	r0, r2
 8005b82:	f7fa fadb 	bl	800013c <__udivsi3>
 8005b86:	0003      	movs	r3, r0
 8005b88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b0f      	cmp	r3, #15
 8005b8e:	d91c      	bls.n	8005bca <UART_SetConfig+0x2e6>
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	025b      	lsls	r3, r3, #9
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d217      	bcs.n	8005bca <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	200e      	movs	r0, #14
 8005ba0:	183b      	adds	r3, r7, r0
 8005ba2:	210f      	movs	r1, #15
 8005ba4:	438a      	bics	r2, r1
 8005ba6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2207      	movs	r2, #7
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	b299      	uxth	r1, r3
 8005bb4:	183b      	adds	r3, r7, r0
 8005bb6:	183a      	adds	r2, r7, r0
 8005bb8:	8812      	ldrh	r2, [r2, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	183a      	adds	r2, r7, r0
 8005bc4:	8812      	ldrh	r2, [r2, #0]
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	e067      	b.n	8005c9a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005bca:	231e      	movs	r3, #30
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	e062      	b.n	8005c9a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bd4:	231f      	movs	r3, #31
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d030      	beq.n	8005c40 <UART_SetConfig+0x35c>
 8005bde:	dc33      	bgt.n	8005c48 <UART_SetConfig+0x364>
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d00d      	beq.n	8005c00 <UART_SetConfig+0x31c>
 8005be4:	dc30      	bgt.n	8005c48 <UART_SetConfig+0x364>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <UART_SetConfig+0x30c>
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d005      	beq.n	8005bfa <UART_SetConfig+0x316>
 8005bee:	e02b      	b.n	8005c48 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f7ff f9d2 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 8005bf4:	0003      	movs	r3, r0
 8005bf6:	61bb      	str	r3, [r7, #24]
        break;
 8005bf8:	e02d      	b.n	8005c56 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <UART_SetConfig+0x358>)
 8005bfc:	61bb      	str	r3, [r7, #24]
        break;
 8005bfe:	e02a      	b.n	8005c56 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c00:	f7ff f94e 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8005c04:	0003      	movs	r3, r0
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e025      	b.n	8005c56 <UART_SetConfig+0x372>
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	efff69f3 	.word	0xefff69f3
 8005c10:	ffffcfff 	.word	0xffffcfff
 8005c14:	fffff4ff 	.word	0xfffff4ff
 8005c18:	40013800 	.word	0x40013800
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	40004400 	.word	0x40004400
 8005c24:	40004800 	.word	0x40004800
 8005c28:	40004c00 	.word	0x40004c00
 8005c2c:	40005000 	.word	0x40005000
 8005c30:	40011400 	.word	0x40011400
 8005c34:	40011800 	.word	0x40011800
 8005c38:	40011c00 	.word	0x40011c00
 8005c3c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	61bb      	str	r3, [r7, #24]
        break;
 8005c46:	e006      	b.n	8005c56 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c4c:	231e      	movs	r3, #30
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
        break;
 8005c54:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01e      	beq.n	8005c9a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	085a      	lsrs	r2, r3, #1
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	18d2      	adds	r2, r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	0010      	movs	r0, r2
 8005c6e:	f7fa fa65 	bl	800013c <__udivsi3>
 8005c72:	0003      	movs	r3, r0
 8005c74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b0f      	cmp	r3, #15
 8005c7a:	d90a      	bls.n	8005c92 <UART_SetConfig+0x3ae>
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	025b      	lsls	r3, r3, #9
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d205      	bcs.n	8005c92 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	e003      	b.n	8005c9a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005c92:	231e      	movs	r3, #30
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	2201      	movs	r2, #1
 8005c98:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ca6:	231e      	movs	r3, #30
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	781b      	ldrb	r3, [r3, #0]
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b008      	add	sp, #32
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4a4a      	ldr	r2, [pc, #296]	; (8005df8 <UART_AdvFeatureConfig+0x144>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4a43      	ldr	r2, [pc, #268]	; (8005dfc <UART_AdvFeatureConfig+0x148>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	0019      	movs	r1, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2204      	movs	r2, #4
 8005d06:	4013      	ands	r3, r2
 8005d08:	d00b      	beq.n	8005d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a3b      	ldr	r2, [pc, #236]	; (8005e00 <UART_AdvFeatureConfig+0x14c>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	0019      	movs	r1, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2208      	movs	r2, #8
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d00b      	beq.n	8005d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4a34      	ldr	r2, [pc, #208]	; (8005e04 <UART_AdvFeatureConfig+0x150>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	0019      	movs	r1, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2210      	movs	r2, #16
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <UART_AdvFeatureConfig+0x154>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	0019      	movs	r1, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	4a25      	ldr	r2, [pc, #148]	; (8005e0c <UART_AdvFeatureConfig+0x158>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2240      	movs	r2, #64	; 0x40
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d01d      	beq.n	8005dce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <UART_AdvFeatureConfig+0x15c>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dae:	2380      	movs	r3, #128	; 0x80
 8005db0:	035b      	lsls	r3, r3, #13
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d10b      	bne.n	8005dce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <UART_AdvFeatureConfig+0x160>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	0019      	movs	r1, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2280      	movs	r2, #128	; 0x80
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <UART_AdvFeatureConfig+0x164>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	0019      	movs	r1, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	605a      	str	r2, [r3, #4]
  }
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b002      	add	sp, #8
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	fffdffff 	.word	0xfffdffff
 8005dfc:	fffeffff 	.word	0xfffeffff
 8005e00:	fffbffff 	.word	0xfffbffff
 8005e04:	ffff7fff 	.word	0xffff7fff
 8005e08:	ffffefff 	.word	0xffffefff
 8005e0c:	ffffdfff 	.word	0xffffdfff
 8005e10:	ffefffff 	.word	0xffefffff
 8005e14:	ff9fffff 	.word	0xff9fffff
 8005e18:	fff7ffff 	.word	0xfff7ffff

08005e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b092      	sub	sp, #72	; 0x48
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2284      	movs	r2, #132	; 0x84
 8005e28:	2100      	movs	r1, #0
 8005e2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e2c:	f7fd fbc0 	bl	80035b0 <HAL_GetTick>
 8005e30:	0003      	movs	r3, r0
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d12c      	bne.n	8005e9c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	2280      	movs	r2, #128	; 0x80
 8005e46:	0391      	lsls	r1, r2, #14
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4a46      	ldr	r2, [pc, #280]	; (8005f64 <UART_CheckIdleState+0x148>)
 8005e4c:	9200      	str	r2, [sp, #0]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f000 f88c 	bl	8005f6c <UART_WaitOnFlagUntilTimeout>
 8005e54:	1e03      	subs	r3, r0, #0
 8005e56:	d021      	beq.n	8005e9c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e58:	f3ef 8310 	mrs	r3, PRIMASK
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e62:	2301      	movs	r3, #1
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	f383 8810 	msr	PRIMASK, r3
}
 8005e6c:	46c0      	nop			; (mov r8, r8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2180      	movs	r1, #128	; 0x80
 8005e7a:	438a      	bics	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	f383 8810 	msr	PRIMASK, r3
}
 8005e88:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2278      	movs	r2, #120	; 0x78
 8005e94:	2100      	movs	r1, #0
 8005e96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e05f      	b.n	8005f5c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d146      	bne.n	8005f38 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eac:	2280      	movs	r2, #128	; 0x80
 8005eae:	03d1      	lsls	r1, r2, #15
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	; (8005f64 <UART_CheckIdleState+0x148>)
 8005eb4:	9200      	str	r2, [sp, #0]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f000 f858 	bl	8005f6c <UART_WaitOnFlagUntilTimeout>
 8005ebc:	1e03      	subs	r3, r0, #0
 8005ebe:	d03b      	beq.n	8005f38 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	2301      	movs	r3, #1
 8005ecc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f383 8810 	msr	PRIMASK, r3
}
 8005ed4:	46c0      	nop			; (mov r8, r8)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4921      	ldr	r1, [pc, #132]	; (8005f68 <UART_CheckIdleState+0x14c>)
 8005ee2:	400a      	ands	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f383 8810 	msr	PRIMASK, r3
}
 8005ef0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	633b      	str	r3, [r7, #48]	; 0x30
 8005efc:	2301      	movs	r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f383 8810 	msr	PRIMASK, r3
}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2101      	movs	r1, #1
 8005f14:	438a      	bics	r2, r1
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	f383 8810 	msr	PRIMASK, r3
}
 8005f22:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2280      	movs	r2, #128	; 0x80
 8005f28:	2120      	movs	r1, #32
 8005f2a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2278      	movs	r2, #120	; 0x78
 8005f30:	2100      	movs	r1, #0
 8005f32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e011      	b.n	8005f5c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2280      	movs	r2, #128	; 0x80
 8005f42:	2120      	movs	r1, #32
 8005f44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2278      	movs	r2, #120	; 0x78
 8005f56:	2100      	movs	r1, #0
 8005f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b010      	add	sp, #64	; 0x40
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	01ffffff 	.word	0x01ffffff
 8005f68:	fffffedf 	.word	0xfffffedf

08005f6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	1dfb      	adds	r3, r7, #7
 8005f7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7c:	e04b      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	3301      	adds	r3, #1
 8005f82:	d048      	beq.n	8006016 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f84:	f7fd fb14 	bl	80035b0 <HAL_GetTick>
 8005f88:	0002      	movs	r2, r0
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d302      	bcc.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e04b      	b.n	8006036 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d035      	beq.n	8006016 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d111      	bne.n	8005fdc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f000 f83c 	bl	8006040 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2284      	movs	r2, #132	; 0x84
 8005fcc:	2108      	movs	r1, #8
 8005fce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2278      	movs	r2, #120	; 0x78
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e02c      	b.n	8006036 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69da      	ldr	r2, [r3, #28]
 8005fe2:	2380      	movs	r3, #128	; 0x80
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d112      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2280      	movs	r2, #128	; 0x80
 8005ff6:	0112      	lsls	r2, r2, #4
 8005ff8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 f81f 	bl	8006040 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2284      	movs	r2, #132	; 0x84
 8006006:	2120      	movs	r1, #32
 8006008:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2278      	movs	r2, #120	; 0x78
 800600e:	2100      	movs	r1, #0
 8006010:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e00f      	b.n	8006036 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	4013      	ands	r3, r2
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	425a      	negs	r2, r3
 8006026:	4153      	adcs	r3, r2
 8006028:	b2db      	uxtb	r3, r3
 800602a:	001a      	movs	r2, r3
 800602c:	1dfb      	adds	r3, r7, #7
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d0a4      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	0018      	movs	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	b004      	add	sp, #16
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08e      	sub	sp, #56	; 0x38
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006048:	f3ef 8310 	mrs	r3, PRIMASK
 800604c:	617b      	str	r3, [r7, #20]
  return(result);
 800604e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
 8006052:	2301      	movs	r3, #1
 8006054:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	f383 8810 	msr	PRIMASK, r3
}
 800605c:	46c0      	nop			; (mov r8, r8)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4926      	ldr	r1, [pc, #152]	; (8006104 <UART_EndRxTransfer+0xc4>)
 800606a:	400a      	ands	r2, r1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006070:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f383 8810 	msr	PRIMASK, r3
}
 8006078:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607a:	f3ef 8310 	mrs	r3, PRIMASK
 800607e:	623b      	str	r3, [r7, #32]
  return(result);
 8006080:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006082:	633b      	str	r3, [r7, #48]	; 0x30
 8006084:	2301      	movs	r3, #1
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	f383 8810 	msr	PRIMASK, r3
}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2101      	movs	r1, #1
 800609c:	438a      	bics	r2, r1
 800609e:	609a      	str	r2, [r3, #8]
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	f383 8810 	msr	PRIMASK, r3
}
 80060aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d118      	bne.n	80060e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b4:	f3ef 8310 	mrs	r3, PRIMASK
 80060b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060be:	2301      	movs	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f383 8810 	msr	PRIMASK, r3
}
 80060c8:	46c0      	nop			; (mov r8, r8)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2110      	movs	r1, #16
 80060d6:	438a      	bics	r2, r1
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f383 8810 	msr	PRIMASK, r3
}
 80060e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2280      	movs	r2, #128	; 0x80
 80060ea:	2120      	movs	r1, #32
 80060ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	46bd      	mov	sp, r7
 80060fe:	b00e      	add	sp, #56	; 0x38
 8006100:	bd80      	pop	{r7, pc}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	fffffedf 	.word	0xfffffedf

08006108 <__cvt>:
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610a:	001e      	movs	r6, r3
 800610c:	2300      	movs	r3, #0
 800610e:	0014      	movs	r4, r2
 8006110:	b08b      	sub	sp, #44	; 0x2c
 8006112:	429e      	cmp	r6, r3
 8006114:	da04      	bge.n	8006120 <__cvt+0x18>
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	0609      	lsls	r1, r1, #24
 800611a:	1873      	adds	r3, r6, r1
 800611c:	001e      	movs	r6, r3
 800611e:	232d      	movs	r3, #45	; 0x2d
 8006120:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006122:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006124:	7013      	strb	r3, [r2, #0]
 8006126:	2320      	movs	r3, #32
 8006128:	2203      	movs	r2, #3
 800612a:	439f      	bics	r7, r3
 800612c:	2f46      	cmp	r7, #70	; 0x46
 800612e:	d007      	beq.n	8006140 <__cvt+0x38>
 8006130:	003b      	movs	r3, r7
 8006132:	3b45      	subs	r3, #69	; 0x45
 8006134:	4259      	negs	r1, r3
 8006136:	414b      	adcs	r3, r1
 8006138:	9910      	ldr	r1, [sp, #64]	; 0x40
 800613a:	3a01      	subs	r2, #1
 800613c:	18cb      	adds	r3, r1, r3
 800613e:	9310      	str	r3, [sp, #64]	; 0x40
 8006140:	ab09      	add	r3, sp, #36	; 0x24
 8006142:	9304      	str	r3, [sp, #16]
 8006144:	ab08      	add	r3, sp, #32
 8006146:	9303      	str	r3, [sp, #12]
 8006148:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800614a:	9200      	str	r2, [sp, #0]
 800614c:	9302      	str	r3, [sp, #8]
 800614e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006150:	0022      	movs	r2, r4
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	0033      	movs	r3, r6
 8006156:	f001 f8b3 	bl	80072c0 <_dtoa_r>
 800615a:	0005      	movs	r5, r0
 800615c:	2f47      	cmp	r7, #71	; 0x47
 800615e:	d102      	bne.n	8006166 <__cvt+0x5e>
 8006160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006162:	07db      	lsls	r3, r3, #31
 8006164:	d528      	bpl.n	80061b8 <__cvt+0xb0>
 8006166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006168:	18eb      	adds	r3, r5, r3
 800616a:	9307      	str	r3, [sp, #28]
 800616c:	2f46      	cmp	r7, #70	; 0x46
 800616e:	d114      	bne.n	800619a <__cvt+0x92>
 8006170:	782b      	ldrb	r3, [r5, #0]
 8006172:	2b30      	cmp	r3, #48	; 0x30
 8006174:	d10c      	bne.n	8006190 <__cvt+0x88>
 8006176:	2200      	movs	r2, #0
 8006178:	2300      	movs	r3, #0
 800617a:	0020      	movs	r0, r4
 800617c:	0031      	movs	r1, r6
 800617e:	f7fa f963 	bl	8000448 <__aeabi_dcmpeq>
 8006182:	2800      	cmp	r0, #0
 8006184:	d104      	bne.n	8006190 <__cvt+0x88>
 8006186:	2301      	movs	r3, #1
 8006188:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006192:	9a07      	ldr	r2, [sp, #28]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	18d3      	adds	r3, r2, r3
 8006198:	9307      	str	r3, [sp, #28]
 800619a:	2200      	movs	r2, #0
 800619c:	2300      	movs	r3, #0
 800619e:	0020      	movs	r0, r4
 80061a0:	0031      	movs	r1, r6
 80061a2:	f7fa f951 	bl	8000448 <__aeabi_dcmpeq>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d001      	beq.n	80061ae <__cvt+0xa6>
 80061aa:	9b07      	ldr	r3, [sp, #28]
 80061ac:	9309      	str	r3, [sp, #36]	; 0x24
 80061ae:	2230      	movs	r2, #48	; 0x30
 80061b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b2:	9907      	ldr	r1, [sp, #28]
 80061b4:	428b      	cmp	r3, r1
 80061b6:	d306      	bcc.n	80061c6 <__cvt+0xbe>
 80061b8:	0028      	movs	r0, r5
 80061ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061be:	1b5b      	subs	r3, r3, r5
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	b00b      	add	sp, #44	; 0x2c
 80061c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c6:	1c59      	adds	r1, r3, #1
 80061c8:	9109      	str	r1, [sp, #36]	; 0x24
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e7f0      	b.n	80061b0 <__cvt+0xa8>

080061ce <__exponent>:
 80061ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d0:	1c83      	adds	r3, r0, #2
 80061d2:	b087      	sub	sp, #28
 80061d4:	9303      	str	r3, [sp, #12]
 80061d6:	0005      	movs	r5, r0
 80061d8:	000c      	movs	r4, r1
 80061da:	232b      	movs	r3, #43	; 0x2b
 80061dc:	7002      	strb	r2, [r0, #0]
 80061de:	2900      	cmp	r1, #0
 80061e0:	da01      	bge.n	80061e6 <__exponent+0x18>
 80061e2:	424c      	negs	r4, r1
 80061e4:	3302      	adds	r3, #2
 80061e6:	706b      	strb	r3, [r5, #1]
 80061e8:	2c09      	cmp	r4, #9
 80061ea:	dd2f      	ble.n	800624c <__exponent+0x7e>
 80061ec:	270a      	movs	r7, #10
 80061ee:	ab04      	add	r3, sp, #16
 80061f0:	1dde      	adds	r6, r3, #7
 80061f2:	0020      	movs	r0, r4
 80061f4:	0039      	movs	r1, r7
 80061f6:	9601      	str	r6, [sp, #4]
 80061f8:	f7fa f910 	bl	800041c <__aeabi_idivmod>
 80061fc:	3e01      	subs	r6, #1
 80061fe:	3130      	adds	r1, #48	; 0x30
 8006200:	0020      	movs	r0, r4
 8006202:	7031      	strb	r1, [r6, #0]
 8006204:	0039      	movs	r1, r7
 8006206:	9402      	str	r4, [sp, #8]
 8006208:	f7fa f822 	bl	8000250 <__divsi3>
 800620c:	9b02      	ldr	r3, [sp, #8]
 800620e:	0004      	movs	r4, r0
 8006210:	2b63      	cmp	r3, #99	; 0x63
 8006212:	dcee      	bgt.n	80061f2 <__exponent+0x24>
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	3430      	adds	r4, #48	; 0x30
 8006218:	1e9a      	subs	r2, r3, #2
 800621a:	0013      	movs	r3, r2
 800621c:	9903      	ldr	r1, [sp, #12]
 800621e:	7014      	strb	r4, [r2, #0]
 8006220:	a804      	add	r0, sp, #16
 8006222:	3007      	adds	r0, #7
 8006224:	4298      	cmp	r0, r3
 8006226:	d80c      	bhi.n	8006242 <__exponent+0x74>
 8006228:	2300      	movs	r3, #0
 800622a:	4282      	cmp	r2, r0
 800622c:	d804      	bhi.n	8006238 <__exponent+0x6a>
 800622e:	aa04      	add	r2, sp, #16
 8006230:	3309      	adds	r3, #9
 8006232:	189b      	adds	r3, r3, r2
 8006234:	9a01      	ldr	r2, [sp, #4]
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	9a03      	ldr	r2, [sp, #12]
 800623a:	18d3      	adds	r3, r2, r3
 800623c:	1b58      	subs	r0, r3, r5
 800623e:	b007      	add	sp, #28
 8006240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006242:	7818      	ldrb	r0, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	7008      	strb	r0, [r1, #0]
 8006248:	3101      	adds	r1, #1
 800624a:	e7e9      	b.n	8006220 <__exponent+0x52>
 800624c:	2330      	movs	r3, #48	; 0x30
 800624e:	3430      	adds	r4, #48	; 0x30
 8006250:	70ab      	strb	r3, [r5, #2]
 8006252:	70ec      	strb	r4, [r5, #3]
 8006254:	1d2b      	adds	r3, r5, #4
 8006256:	e7f1      	b.n	800623c <__exponent+0x6e>

08006258 <_printf_float>:
 8006258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625a:	b095      	sub	sp, #84	; 0x54
 800625c:	000c      	movs	r4, r1
 800625e:	9208      	str	r2, [sp, #32]
 8006260:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006262:	9309      	str	r3, [sp, #36]	; 0x24
 8006264:	0007      	movs	r7, r0
 8006266:	f000 ff0d 	bl	8007084 <_localeconv_r>
 800626a:	6803      	ldr	r3, [r0, #0]
 800626c:	0018      	movs	r0, r3
 800626e:	930c      	str	r3, [sp, #48]	; 0x30
 8006270:	f7f9 ff48 	bl	8000104 <strlen>
 8006274:	2300      	movs	r3, #0
 8006276:	9312      	str	r3, [sp, #72]	; 0x48
 8006278:	7e23      	ldrb	r3, [r4, #24]
 800627a:	2207      	movs	r2, #7
 800627c:	930a      	str	r3, [sp, #40]	; 0x28
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	900d      	str	r0, [sp, #52]	; 0x34
 8006282:	930b      	str	r3, [sp, #44]	; 0x2c
 8006284:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006286:	682b      	ldr	r3, [r5, #0]
 8006288:	05c9      	lsls	r1, r1, #23
 800628a:	d547      	bpl.n	800631c <_printf_float+0xc4>
 800628c:	189b      	adds	r3, r3, r2
 800628e:	4393      	bics	r3, r2
 8006290:	001a      	movs	r2, r3
 8006292:	3208      	adds	r2, #8
 8006294:	602a      	str	r2, [r5, #0]
 8006296:	681e      	ldr	r6, [r3, #0]
 8006298:	685d      	ldr	r5, [r3, #4]
 800629a:	0032      	movs	r2, r6
 800629c:	002b      	movs	r3, r5
 800629e:	64a2      	str	r2, [r4, #72]	; 0x48
 80062a0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80062a2:	2201      	movs	r2, #1
 80062a4:	006b      	lsls	r3, r5, #1
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	930e      	str	r3, [sp, #56]	; 0x38
 80062aa:	0030      	movs	r0, r6
 80062ac:	4bab      	ldr	r3, [pc, #684]	; (800655c <_printf_float+0x304>)
 80062ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80062b0:	4252      	negs	r2, r2
 80062b2:	f7fc f8ed 	bl	8002490 <__aeabi_dcmpun>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d132      	bne.n	8006320 <_printf_float+0xc8>
 80062ba:	2201      	movs	r2, #1
 80062bc:	0030      	movs	r0, r6
 80062be:	4ba7      	ldr	r3, [pc, #668]	; (800655c <_printf_float+0x304>)
 80062c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80062c2:	4252      	negs	r2, r2
 80062c4:	f7fa f8d0 	bl	8000468 <__aeabi_dcmple>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d129      	bne.n	8006320 <_printf_float+0xc8>
 80062cc:	2200      	movs	r2, #0
 80062ce:	2300      	movs	r3, #0
 80062d0:	0030      	movs	r0, r6
 80062d2:	0029      	movs	r1, r5
 80062d4:	f7fa f8be 	bl	8000454 <__aeabi_dcmplt>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d003      	beq.n	80062e4 <_printf_float+0x8c>
 80062dc:	0023      	movs	r3, r4
 80062de:	222d      	movs	r2, #45	; 0x2d
 80062e0:	3343      	adds	r3, #67	; 0x43
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e6:	4d9e      	ldr	r5, [pc, #632]	; (8006560 <_printf_float+0x308>)
 80062e8:	2b47      	cmp	r3, #71	; 0x47
 80062ea:	d900      	bls.n	80062ee <_printf_float+0x96>
 80062ec:	4d9d      	ldr	r5, [pc, #628]	; (8006564 <_printf_float+0x30c>)
 80062ee:	2303      	movs	r3, #3
 80062f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	3301      	adds	r3, #1
 80062f6:	439a      	bics	r2, r3
 80062f8:	2300      	movs	r3, #0
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	0021      	movs	r1, r4
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	0038      	movs	r0, r7
 8006306:	9b08      	ldr	r3, [sp, #32]
 8006308:	aa13      	add	r2, sp, #76	; 0x4c
 800630a:	f000 f9fb 	bl	8006704 <_printf_common>
 800630e:	3001      	adds	r0, #1
 8006310:	d000      	beq.n	8006314 <_printf_float+0xbc>
 8006312:	e0a3      	b.n	800645c <_printf_float+0x204>
 8006314:	2001      	movs	r0, #1
 8006316:	4240      	negs	r0, r0
 8006318:	b015      	add	sp, #84	; 0x54
 800631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631c:	3307      	adds	r3, #7
 800631e:	e7b6      	b.n	800628e <_printf_float+0x36>
 8006320:	0032      	movs	r2, r6
 8006322:	002b      	movs	r3, r5
 8006324:	0030      	movs	r0, r6
 8006326:	0029      	movs	r1, r5
 8006328:	f7fc f8b2 	bl	8002490 <__aeabi_dcmpun>
 800632c:	2800      	cmp	r0, #0
 800632e:	d00b      	beq.n	8006348 <_printf_float+0xf0>
 8006330:	2d00      	cmp	r5, #0
 8006332:	da03      	bge.n	800633c <_printf_float+0xe4>
 8006334:	0023      	movs	r3, r4
 8006336:	222d      	movs	r2, #45	; 0x2d
 8006338:	3343      	adds	r3, #67	; 0x43
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	4d8a      	ldr	r5, [pc, #552]	; (8006568 <_printf_float+0x310>)
 8006340:	2b47      	cmp	r3, #71	; 0x47
 8006342:	d9d4      	bls.n	80062ee <_printf_float+0x96>
 8006344:	4d89      	ldr	r5, [pc, #548]	; (800656c <_printf_float+0x314>)
 8006346:	e7d2      	b.n	80062ee <_printf_float+0x96>
 8006348:	2220      	movs	r2, #32
 800634a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800634c:	6863      	ldr	r3, [r4, #4]
 800634e:	4391      	bics	r1, r2
 8006350:	910e      	str	r1, [sp, #56]	; 0x38
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	d14a      	bne.n	80063ec <_printf_float+0x194>
 8006356:	3307      	adds	r3, #7
 8006358:	6063      	str	r3, [r4, #4]
 800635a:	2380      	movs	r3, #128	; 0x80
 800635c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4313      	orrs	r3, r2
 8006362:	2200      	movs	r2, #0
 8006364:	9206      	str	r2, [sp, #24]
 8006366:	aa12      	add	r2, sp, #72	; 0x48
 8006368:	9205      	str	r2, [sp, #20]
 800636a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	9204      	str	r2, [sp, #16]
 8006370:	aa11      	add	r2, sp, #68	; 0x44
 8006372:	9203      	str	r2, [sp, #12]
 8006374:	2223      	movs	r2, #35	; 0x23
 8006376:	a908      	add	r1, sp, #32
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	6863      	ldr	r3, [r4, #4]
 800637c:	1852      	adds	r2, r2, r1
 800637e:	9202      	str	r2, [sp, #8]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	0032      	movs	r2, r6
 8006384:	002b      	movs	r3, r5
 8006386:	0038      	movs	r0, r7
 8006388:	f7ff febe 	bl	8006108 <__cvt>
 800638c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800638e:	0005      	movs	r5, r0
 8006390:	2b47      	cmp	r3, #71	; 0x47
 8006392:	d109      	bne.n	80063a8 <_printf_float+0x150>
 8006394:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006396:	1cda      	adds	r2, r3, #3
 8006398:	db02      	blt.n	80063a0 <_printf_float+0x148>
 800639a:	6862      	ldr	r2, [r4, #4]
 800639c:	4293      	cmp	r3, r2
 800639e:	dd49      	ble.n	8006434 <_printf_float+0x1dc>
 80063a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a2:	3b02      	subs	r3, #2
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	930a      	str	r3, [sp, #40]	; 0x28
 80063a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80063ac:	2b65      	cmp	r3, #101	; 0x65
 80063ae:	d824      	bhi.n	80063fa <_printf_float+0x1a2>
 80063b0:	0020      	movs	r0, r4
 80063b2:	001a      	movs	r2, r3
 80063b4:	3901      	subs	r1, #1
 80063b6:	3050      	adds	r0, #80	; 0x50
 80063b8:	9111      	str	r1, [sp, #68]	; 0x44
 80063ba:	f7ff ff08 	bl	80061ce <__exponent>
 80063be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80063c2:	1813      	adds	r3, r2, r0
 80063c4:	6123      	str	r3, [r4, #16]
 80063c6:	2a01      	cmp	r2, #1
 80063c8:	dc02      	bgt.n	80063d0 <_printf_float+0x178>
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	07d2      	lsls	r2, r2, #31
 80063ce:	d501      	bpl.n	80063d4 <_printf_float+0x17c>
 80063d0:	3301      	adds	r3, #1
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	2323      	movs	r3, #35	; 0x23
 80063d6:	aa08      	add	r2, sp, #32
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d100      	bne.n	80063e2 <_printf_float+0x18a>
 80063e0:	e78d      	b.n	80062fe <_printf_float+0xa6>
 80063e2:	0023      	movs	r3, r4
 80063e4:	222d      	movs	r2, #45	; 0x2d
 80063e6:	3343      	adds	r3, #67	; 0x43
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e788      	b.n	80062fe <_printf_float+0xa6>
 80063ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ee:	2a47      	cmp	r2, #71	; 0x47
 80063f0:	d1b3      	bne.n	800635a <_printf_float+0x102>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1b1      	bne.n	800635a <_printf_float+0x102>
 80063f6:	3301      	adds	r3, #1
 80063f8:	e7ae      	b.n	8006358 <_printf_float+0x100>
 80063fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063fc:	2b66      	cmp	r3, #102	; 0x66
 80063fe:	d11b      	bne.n	8006438 <_printf_float+0x1e0>
 8006400:	6863      	ldr	r3, [r4, #4]
 8006402:	2900      	cmp	r1, #0
 8006404:	dd09      	ble.n	800641a <_printf_float+0x1c2>
 8006406:	6121      	str	r1, [r4, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <_printf_float+0x1ba>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	07d2      	lsls	r2, r2, #31
 8006410:	d50b      	bpl.n	800642a <_printf_float+0x1d2>
 8006412:	3301      	adds	r3, #1
 8006414:	185b      	adds	r3, r3, r1
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	e007      	b.n	800642a <_printf_float+0x1d2>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <_printf_float+0x1ce>
 800641e:	2201      	movs	r2, #1
 8006420:	6821      	ldr	r1, [r4, #0]
 8006422:	4211      	tst	r1, r2
 8006424:	d000      	beq.n	8006428 <_printf_float+0x1d0>
 8006426:	1c9a      	adds	r2, r3, #2
 8006428:	6122      	str	r2, [r4, #16]
 800642a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800642c:	65a3      	str	r3, [r4, #88]	; 0x58
 800642e:	2300      	movs	r3, #0
 8006430:	930b      	str	r3, [sp, #44]	; 0x2c
 8006432:	e7cf      	b.n	80063d4 <_printf_float+0x17c>
 8006434:	2367      	movs	r3, #103	; 0x67
 8006436:	930a      	str	r3, [sp, #40]	; 0x28
 8006438:	9911      	ldr	r1, [sp, #68]	; 0x44
 800643a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800643c:	4299      	cmp	r1, r3
 800643e:	db06      	blt.n	800644e <_printf_float+0x1f6>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	6121      	str	r1, [r4, #16]
 8006444:	07db      	lsls	r3, r3, #31
 8006446:	d5f0      	bpl.n	800642a <_printf_float+0x1d2>
 8006448:	3101      	adds	r1, #1
 800644a:	6121      	str	r1, [r4, #16]
 800644c:	e7ed      	b.n	800642a <_printf_float+0x1d2>
 800644e:	2201      	movs	r2, #1
 8006450:	2900      	cmp	r1, #0
 8006452:	dc01      	bgt.n	8006458 <_printf_float+0x200>
 8006454:	1892      	adds	r2, r2, r2
 8006456:	1a52      	subs	r2, r2, r1
 8006458:	189b      	adds	r3, r3, r2
 800645a:	e7dc      	b.n	8006416 <_printf_float+0x1be>
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	0553      	lsls	r3, r2, #21
 8006460:	d408      	bmi.n	8006474 <_printf_float+0x21c>
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	002a      	movs	r2, r5
 8006466:	0038      	movs	r0, r7
 8006468:	9908      	ldr	r1, [sp, #32]
 800646a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800646c:	47a8      	blx	r5
 800646e:	3001      	adds	r0, #1
 8006470:	d12a      	bne.n	80064c8 <_printf_float+0x270>
 8006472:	e74f      	b.n	8006314 <_printf_float+0xbc>
 8006474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006476:	2b65      	cmp	r3, #101	; 0x65
 8006478:	d800      	bhi.n	800647c <_printf_float+0x224>
 800647a:	e0ec      	b.n	8006656 <_printf_float+0x3fe>
 800647c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800647e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	f7f9 ffe0 	bl	8000448 <__aeabi_dcmpeq>
 8006488:	2800      	cmp	r0, #0
 800648a:	d034      	beq.n	80064f6 <_printf_float+0x29e>
 800648c:	2301      	movs	r3, #1
 800648e:	0038      	movs	r0, r7
 8006490:	4a37      	ldr	r2, [pc, #220]	; (8006570 <_printf_float+0x318>)
 8006492:	9908      	ldr	r1, [sp, #32]
 8006494:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006496:	47a8      	blx	r5
 8006498:	3001      	adds	r0, #1
 800649a:	d100      	bne.n	800649e <_printf_float+0x246>
 800649c:	e73a      	b.n	8006314 <_printf_float+0xbc>
 800649e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80064a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064a2:	429a      	cmp	r2, r3
 80064a4:	db02      	blt.n	80064ac <_printf_float+0x254>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	07db      	lsls	r3, r3, #31
 80064aa:	d50d      	bpl.n	80064c8 <_printf_float+0x270>
 80064ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80064ae:	0038      	movs	r0, r7
 80064b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064b4:	9908      	ldr	r1, [sp, #32]
 80064b6:	47a8      	blx	r5
 80064b8:	2500      	movs	r5, #0
 80064ba:	3001      	adds	r0, #1
 80064bc:	d100      	bne.n	80064c0 <_printf_float+0x268>
 80064be:	e729      	b.n	8006314 <_printf_float+0xbc>
 80064c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064c2:	3b01      	subs	r3, #1
 80064c4:	42ab      	cmp	r3, r5
 80064c6:	dc0a      	bgt.n	80064de <_printf_float+0x286>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	079b      	lsls	r3, r3, #30
 80064cc:	d500      	bpl.n	80064d0 <_printf_float+0x278>
 80064ce:	e116      	b.n	80066fe <_printf_float+0x4a6>
 80064d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064d2:	68e0      	ldr	r0, [r4, #12]
 80064d4:	4298      	cmp	r0, r3
 80064d6:	db00      	blt.n	80064da <_printf_float+0x282>
 80064d8:	e71e      	b.n	8006318 <_printf_float+0xc0>
 80064da:	0018      	movs	r0, r3
 80064dc:	e71c      	b.n	8006318 <_printf_float+0xc0>
 80064de:	0022      	movs	r2, r4
 80064e0:	2301      	movs	r3, #1
 80064e2:	0038      	movs	r0, r7
 80064e4:	9908      	ldr	r1, [sp, #32]
 80064e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80064e8:	321a      	adds	r2, #26
 80064ea:	47b0      	blx	r6
 80064ec:	3001      	adds	r0, #1
 80064ee:	d100      	bne.n	80064f2 <_printf_float+0x29a>
 80064f0:	e710      	b.n	8006314 <_printf_float+0xbc>
 80064f2:	3501      	adds	r5, #1
 80064f4:	e7e4      	b.n	80064c0 <_printf_float+0x268>
 80064f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dc3b      	bgt.n	8006574 <_printf_float+0x31c>
 80064fc:	2301      	movs	r3, #1
 80064fe:	0038      	movs	r0, r7
 8006500:	4a1b      	ldr	r2, [pc, #108]	; (8006570 <_printf_float+0x318>)
 8006502:	9908      	ldr	r1, [sp, #32]
 8006504:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006506:	47b0      	blx	r6
 8006508:	3001      	adds	r0, #1
 800650a:	d100      	bne.n	800650e <_printf_float+0x2b6>
 800650c:	e702      	b.n	8006314 <_printf_float+0xbc>
 800650e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006510:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006512:	4313      	orrs	r3, r2
 8006514:	d102      	bne.n	800651c <_printf_float+0x2c4>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	07db      	lsls	r3, r3, #31
 800651a:	d5d5      	bpl.n	80064c8 <_printf_float+0x270>
 800651c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800651e:	0038      	movs	r0, r7
 8006520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006522:	9908      	ldr	r1, [sp, #32]
 8006524:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006526:	47b0      	blx	r6
 8006528:	2300      	movs	r3, #0
 800652a:	3001      	adds	r0, #1
 800652c:	d100      	bne.n	8006530 <_printf_float+0x2d8>
 800652e:	e6f1      	b.n	8006314 <_printf_float+0xbc>
 8006530:	930a      	str	r3, [sp, #40]	; 0x28
 8006532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006536:	425b      	negs	r3, r3
 8006538:	4293      	cmp	r3, r2
 800653a:	dc01      	bgt.n	8006540 <_printf_float+0x2e8>
 800653c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800653e:	e791      	b.n	8006464 <_printf_float+0x20c>
 8006540:	0022      	movs	r2, r4
 8006542:	2301      	movs	r3, #1
 8006544:	0038      	movs	r0, r7
 8006546:	9908      	ldr	r1, [sp, #32]
 8006548:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800654a:	321a      	adds	r2, #26
 800654c:	47b0      	blx	r6
 800654e:	3001      	adds	r0, #1
 8006550:	d100      	bne.n	8006554 <_printf_float+0x2fc>
 8006552:	e6df      	b.n	8006314 <_printf_float+0xbc>
 8006554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006556:	3301      	adds	r3, #1
 8006558:	e7ea      	b.n	8006530 <_printf_float+0x2d8>
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	7fefffff 	.word	0x7fefffff
 8006560:	0800aaf0 	.word	0x0800aaf0
 8006564:	0800aaf4 	.word	0x0800aaf4
 8006568:	0800aaf8 	.word	0x0800aaf8
 800656c:	0800aafc 	.word	0x0800aafc
 8006570:	0800ab00 	.word	0x0800ab00
 8006574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006578:	920a      	str	r2, [sp, #40]	; 0x28
 800657a:	429a      	cmp	r2, r3
 800657c:	dd00      	ble.n	8006580 <_printf_float+0x328>
 800657e:	930a      	str	r3, [sp, #40]	; 0x28
 8006580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	dc3d      	bgt.n	8006602 <_printf_float+0x3aa>
 8006586:	2300      	movs	r3, #0
 8006588:	930e      	str	r3, [sp, #56]	; 0x38
 800658a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658c:	43db      	mvns	r3, r3
 800658e:	17db      	asrs	r3, r3, #31
 8006590:	930f      	str	r3, [sp, #60]	; 0x3c
 8006592:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006596:	930b      	str	r3, [sp, #44]	; 0x2c
 8006598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800659a:	4013      	ands	r3, r2
 800659c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065a2:	4293      	cmp	r3, r2
 80065a4:	dc36      	bgt.n	8006614 <_printf_float+0x3bc>
 80065a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80065a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065aa:	429a      	cmp	r2, r3
 80065ac:	db40      	blt.n	8006630 <_printf_float+0x3d8>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	07db      	lsls	r3, r3, #31
 80065b2:	d43d      	bmi.n	8006630 <_printf_float+0x3d8>
 80065b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80065b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80065b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ba:	1af3      	subs	r3, r6, r3
 80065bc:	1ab6      	subs	r6, r6, r2
 80065be:	429e      	cmp	r6, r3
 80065c0:	dd00      	ble.n	80065c4 <_printf_float+0x36c>
 80065c2:	001e      	movs	r6, r3
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	dc3c      	bgt.n	8006642 <_printf_float+0x3ea>
 80065c8:	2300      	movs	r3, #0
 80065ca:	930a      	str	r3, [sp, #40]	; 0x28
 80065cc:	43f3      	mvns	r3, r6
 80065ce:	17db      	asrs	r3, r3, #31
 80065d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80065d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065da:	4032      	ands	r2, r6
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e0:	4293      	cmp	r3, r2
 80065e2:	dc00      	bgt.n	80065e6 <_printf_float+0x38e>
 80065e4:	e770      	b.n	80064c8 <_printf_float+0x270>
 80065e6:	0022      	movs	r2, r4
 80065e8:	2301      	movs	r3, #1
 80065ea:	0038      	movs	r0, r7
 80065ec:	9908      	ldr	r1, [sp, #32]
 80065ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065f0:	321a      	adds	r2, #26
 80065f2:	47a8      	blx	r5
 80065f4:	3001      	adds	r0, #1
 80065f6:	d100      	bne.n	80065fa <_printf_float+0x3a2>
 80065f8:	e68c      	b.n	8006314 <_printf_float+0xbc>
 80065fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fc:	3301      	adds	r3, #1
 80065fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006600:	e7e7      	b.n	80065d2 <_printf_float+0x37a>
 8006602:	002a      	movs	r2, r5
 8006604:	0038      	movs	r0, r7
 8006606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006608:	9908      	ldr	r1, [sp, #32]
 800660a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800660c:	47b0      	blx	r6
 800660e:	3001      	adds	r0, #1
 8006610:	d1b9      	bne.n	8006586 <_printf_float+0x32e>
 8006612:	e67f      	b.n	8006314 <_printf_float+0xbc>
 8006614:	0022      	movs	r2, r4
 8006616:	2301      	movs	r3, #1
 8006618:	0038      	movs	r0, r7
 800661a:	9908      	ldr	r1, [sp, #32]
 800661c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800661e:	321a      	adds	r2, #26
 8006620:	47b0      	blx	r6
 8006622:	3001      	adds	r0, #1
 8006624:	d100      	bne.n	8006628 <_printf_float+0x3d0>
 8006626:	e675      	b.n	8006314 <_printf_float+0xbc>
 8006628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662a:	3301      	adds	r3, #1
 800662c:	930e      	str	r3, [sp, #56]	; 0x38
 800662e:	e7b0      	b.n	8006592 <_printf_float+0x33a>
 8006630:	0038      	movs	r0, r7
 8006632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006636:	9908      	ldr	r1, [sp, #32]
 8006638:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800663a:	47b0      	blx	r6
 800663c:	3001      	adds	r0, #1
 800663e:	d1b9      	bne.n	80065b4 <_printf_float+0x35c>
 8006640:	e668      	b.n	8006314 <_printf_float+0xbc>
 8006642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006644:	0038      	movs	r0, r7
 8006646:	18ea      	adds	r2, r5, r3
 8006648:	9908      	ldr	r1, [sp, #32]
 800664a:	0033      	movs	r3, r6
 800664c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800664e:	47a8      	blx	r5
 8006650:	3001      	adds	r0, #1
 8006652:	d1b9      	bne.n	80065c8 <_printf_float+0x370>
 8006654:	e65e      	b.n	8006314 <_printf_float+0xbc>
 8006656:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006658:	2b01      	cmp	r3, #1
 800665a:	dc02      	bgt.n	8006662 <_printf_float+0x40a>
 800665c:	2301      	movs	r3, #1
 800665e:	421a      	tst	r2, r3
 8006660:	d03a      	beq.n	80066d8 <_printf_float+0x480>
 8006662:	2301      	movs	r3, #1
 8006664:	002a      	movs	r2, r5
 8006666:	0038      	movs	r0, r7
 8006668:	9908      	ldr	r1, [sp, #32]
 800666a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800666c:	47b0      	blx	r6
 800666e:	3001      	adds	r0, #1
 8006670:	d100      	bne.n	8006674 <_printf_float+0x41c>
 8006672:	e64f      	b.n	8006314 <_printf_float+0xbc>
 8006674:	0038      	movs	r0, r7
 8006676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800667a:	9908      	ldr	r1, [sp, #32]
 800667c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800667e:	47b0      	blx	r6
 8006680:	3001      	adds	r0, #1
 8006682:	d100      	bne.n	8006686 <_printf_float+0x42e>
 8006684:	e646      	b.n	8006314 <_printf_float+0xbc>
 8006686:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006688:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800668a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800668c:	2200      	movs	r2, #0
 800668e:	001e      	movs	r6, r3
 8006690:	2300      	movs	r3, #0
 8006692:	f7f9 fed9 	bl	8000448 <__aeabi_dcmpeq>
 8006696:	2800      	cmp	r0, #0
 8006698:	d11c      	bne.n	80066d4 <_printf_float+0x47c>
 800669a:	0033      	movs	r3, r6
 800669c:	1c6a      	adds	r2, r5, #1
 800669e:	3b01      	subs	r3, #1
 80066a0:	0038      	movs	r0, r7
 80066a2:	9908      	ldr	r1, [sp, #32]
 80066a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066a6:	47a8      	blx	r5
 80066a8:	3001      	adds	r0, #1
 80066aa:	d10f      	bne.n	80066cc <_printf_float+0x474>
 80066ac:	e632      	b.n	8006314 <_printf_float+0xbc>
 80066ae:	0022      	movs	r2, r4
 80066b0:	2301      	movs	r3, #1
 80066b2:	0038      	movs	r0, r7
 80066b4:	9908      	ldr	r1, [sp, #32]
 80066b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066b8:	321a      	adds	r2, #26
 80066ba:	47b0      	blx	r6
 80066bc:	3001      	adds	r0, #1
 80066be:	d100      	bne.n	80066c2 <_printf_float+0x46a>
 80066c0:	e628      	b.n	8006314 <_printf_float+0xbc>
 80066c2:	3501      	adds	r5, #1
 80066c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066c6:	3b01      	subs	r3, #1
 80066c8:	42ab      	cmp	r3, r5
 80066ca:	dcf0      	bgt.n	80066ae <_printf_float+0x456>
 80066cc:	0022      	movs	r2, r4
 80066ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d0:	3250      	adds	r2, #80	; 0x50
 80066d2:	e6c8      	b.n	8006466 <_printf_float+0x20e>
 80066d4:	2500      	movs	r5, #0
 80066d6:	e7f5      	b.n	80066c4 <_printf_float+0x46c>
 80066d8:	002a      	movs	r2, r5
 80066da:	e7e1      	b.n	80066a0 <_printf_float+0x448>
 80066dc:	0022      	movs	r2, r4
 80066de:	2301      	movs	r3, #1
 80066e0:	0038      	movs	r0, r7
 80066e2:	9908      	ldr	r1, [sp, #32]
 80066e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066e6:	3219      	adds	r2, #25
 80066e8:	47b0      	blx	r6
 80066ea:	3001      	adds	r0, #1
 80066ec:	d100      	bne.n	80066f0 <_printf_float+0x498>
 80066ee:	e611      	b.n	8006314 <_printf_float+0xbc>
 80066f0:	3501      	adds	r5, #1
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dcef      	bgt.n	80066dc <_printf_float+0x484>
 80066fc:	e6e8      	b.n	80064d0 <_printf_float+0x278>
 80066fe:	2500      	movs	r5, #0
 8006700:	e7f7      	b.n	80066f2 <_printf_float+0x49a>
 8006702:	46c0      	nop			; (mov r8, r8)

08006704 <_printf_common>:
 8006704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006706:	0016      	movs	r6, r2
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	688a      	ldr	r2, [r1, #8]
 800670c:	690b      	ldr	r3, [r1, #16]
 800670e:	000c      	movs	r4, r1
 8006710:	9000      	str	r0, [sp, #0]
 8006712:	4293      	cmp	r3, r2
 8006714:	da00      	bge.n	8006718 <_printf_common+0x14>
 8006716:	0013      	movs	r3, r2
 8006718:	0022      	movs	r2, r4
 800671a:	6033      	str	r3, [r6, #0]
 800671c:	3243      	adds	r2, #67	; 0x43
 800671e:	7812      	ldrb	r2, [r2, #0]
 8006720:	2a00      	cmp	r2, #0
 8006722:	d001      	beq.n	8006728 <_printf_common+0x24>
 8006724:	3301      	adds	r3, #1
 8006726:	6033      	str	r3, [r6, #0]
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	069b      	lsls	r3, r3, #26
 800672c:	d502      	bpl.n	8006734 <_printf_common+0x30>
 800672e:	6833      	ldr	r3, [r6, #0]
 8006730:	3302      	adds	r3, #2
 8006732:	6033      	str	r3, [r6, #0]
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	2306      	movs	r3, #6
 8006738:	0015      	movs	r5, r2
 800673a:	401d      	ands	r5, r3
 800673c:	421a      	tst	r2, r3
 800673e:	d027      	beq.n	8006790 <_printf_common+0x8c>
 8006740:	0023      	movs	r3, r4
 8006742:	3343      	adds	r3, #67	; 0x43
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	1e5a      	subs	r2, r3, #1
 8006748:	4193      	sbcs	r3, r2
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	0692      	lsls	r2, r2, #26
 800674e:	d430      	bmi.n	80067b2 <_printf_common+0xae>
 8006750:	0022      	movs	r2, r4
 8006752:	9901      	ldr	r1, [sp, #4]
 8006754:	9800      	ldr	r0, [sp, #0]
 8006756:	9d08      	ldr	r5, [sp, #32]
 8006758:	3243      	adds	r2, #67	; 0x43
 800675a:	47a8      	blx	r5
 800675c:	3001      	adds	r0, #1
 800675e:	d025      	beq.n	80067ac <_printf_common+0xa8>
 8006760:	2206      	movs	r2, #6
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	2500      	movs	r5, #0
 8006766:	4013      	ands	r3, r2
 8006768:	2b04      	cmp	r3, #4
 800676a:	d105      	bne.n	8006778 <_printf_common+0x74>
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	68e5      	ldr	r5, [r4, #12]
 8006770:	1aed      	subs	r5, r5, r3
 8006772:	43eb      	mvns	r3, r5
 8006774:	17db      	asrs	r3, r3, #31
 8006776:	401d      	ands	r5, r3
 8006778:	68a3      	ldr	r3, [r4, #8]
 800677a:	6922      	ldr	r2, [r4, #16]
 800677c:	4293      	cmp	r3, r2
 800677e:	dd01      	ble.n	8006784 <_printf_common+0x80>
 8006780:	1a9b      	subs	r3, r3, r2
 8006782:	18ed      	adds	r5, r5, r3
 8006784:	2600      	movs	r6, #0
 8006786:	42b5      	cmp	r5, r6
 8006788:	d120      	bne.n	80067cc <_printf_common+0xc8>
 800678a:	2000      	movs	r0, #0
 800678c:	e010      	b.n	80067b0 <_printf_common+0xac>
 800678e:	3501      	adds	r5, #1
 8006790:	68e3      	ldr	r3, [r4, #12]
 8006792:	6832      	ldr	r2, [r6, #0]
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	42ab      	cmp	r3, r5
 8006798:	ddd2      	ble.n	8006740 <_printf_common+0x3c>
 800679a:	0022      	movs	r2, r4
 800679c:	2301      	movs	r3, #1
 800679e:	9901      	ldr	r1, [sp, #4]
 80067a0:	9800      	ldr	r0, [sp, #0]
 80067a2:	9f08      	ldr	r7, [sp, #32]
 80067a4:	3219      	adds	r2, #25
 80067a6:	47b8      	blx	r7
 80067a8:	3001      	adds	r0, #1
 80067aa:	d1f0      	bne.n	800678e <_printf_common+0x8a>
 80067ac:	2001      	movs	r0, #1
 80067ae:	4240      	negs	r0, r0
 80067b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067b2:	2030      	movs	r0, #48	; 0x30
 80067b4:	18e1      	adds	r1, r4, r3
 80067b6:	3143      	adds	r1, #67	; 0x43
 80067b8:	7008      	strb	r0, [r1, #0]
 80067ba:	0021      	movs	r1, r4
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	3145      	adds	r1, #69	; 0x45
 80067c0:	7809      	ldrb	r1, [r1, #0]
 80067c2:	18a2      	adds	r2, r4, r2
 80067c4:	3243      	adds	r2, #67	; 0x43
 80067c6:	3302      	adds	r3, #2
 80067c8:	7011      	strb	r1, [r2, #0]
 80067ca:	e7c1      	b.n	8006750 <_printf_common+0x4c>
 80067cc:	0022      	movs	r2, r4
 80067ce:	2301      	movs	r3, #1
 80067d0:	9901      	ldr	r1, [sp, #4]
 80067d2:	9800      	ldr	r0, [sp, #0]
 80067d4:	9f08      	ldr	r7, [sp, #32]
 80067d6:	321a      	adds	r2, #26
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	d0e6      	beq.n	80067ac <_printf_common+0xa8>
 80067de:	3601      	adds	r6, #1
 80067e0:	e7d1      	b.n	8006786 <_printf_common+0x82>
	...

080067e4 <_printf_i>:
 80067e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e6:	b08b      	sub	sp, #44	; 0x2c
 80067e8:	9206      	str	r2, [sp, #24]
 80067ea:	000a      	movs	r2, r1
 80067ec:	3243      	adds	r2, #67	; 0x43
 80067ee:	9307      	str	r3, [sp, #28]
 80067f0:	9005      	str	r0, [sp, #20]
 80067f2:	9204      	str	r2, [sp, #16]
 80067f4:	7e0a      	ldrb	r2, [r1, #24]
 80067f6:	000c      	movs	r4, r1
 80067f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067fa:	2a78      	cmp	r2, #120	; 0x78
 80067fc:	d809      	bhi.n	8006812 <_printf_i+0x2e>
 80067fe:	2a62      	cmp	r2, #98	; 0x62
 8006800:	d80b      	bhi.n	800681a <_printf_i+0x36>
 8006802:	2a00      	cmp	r2, #0
 8006804:	d100      	bne.n	8006808 <_printf_i+0x24>
 8006806:	e0be      	b.n	8006986 <_printf_i+0x1a2>
 8006808:	497c      	ldr	r1, [pc, #496]	; (80069fc <_printf_i+0x218>)
 800680a:	9103      	str	r1, [sp, #12]
 800680c:	2a58      	cmp	r2, #88	; 0x58
 800680e:	d100      	bne.n	8006812 <_printf_i+0x2e>
 8006810:	e093      	b.n	800693a <_printf_i+0x156>
 8006812:	0026      	movs	r6, r4
 8006814:	3642      	adds	r6, #66	; 0x42
 8006816:	7032      	strb	r2, [r6, #0]
 8006818:	e022      	b.n	8006860 <_printf_i+0x7c>
 800681a:	0010      	movs	r0, r2
 800681c:	3863      	subs	r0, #99	; 0x63
 800681e:	2815      	cmp	r0, #21
 8006820:	d8f7      	bhi.n	8006812 <_printf_i+0x2e>
 8006822:	f7f9 fc81 	bl	8000128 <__gnu_thumb1_case_shi>
 8006826:	0016      	.short	0x0016
 8006828:	fff6001f 	.word	0xfff6001f
 800682c:	fff6fff6 	.word	0xfff6fff6
 8006830:	001ffff6 	.word	0x001ffff6
 8006834:	fff6fff6 	.word	0xfff6fff6
 8006838:	fff6fff6 	.word	0xfff6fff6
 800683c:	003600a3 	.word	0x003600a3
 8006840:	fff60083 	.word	0xfff60083
 8006844:	00b4fff6 	.word	0x00b4fff6
 8006848:	0036fff6 	.word	0x0036fff6
 800684c:	fff6fff6 	.word	0xfff6fff6
 8006850:	0087      	.short	0x0087
 8006852:	0026      	movs	r6, r4
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	3642      	adds	r6, #66	; 0x42
 8006858:	1d11      	adds	r1, r2, #4
 800685a:	6019      	str	r1, [r3, #0]
 800685c:	6813      	ldr	r3, [r2, #0]
 800685e:	7033      	strb	r3, [r6, #0]
 8006860:	2301      	movs	r3, #1
 8006862:	e0a2      	b.n	80069aa <_printf_i+0x1c6>
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	6809      	ldr	r1, [r1, #0]
 8006868:	1d02      	adds	r2, r0, #4
 800686a:	060d      	lsls	r5, r1, #24
 800686c:	d50b      	bpl.n	8006886 <_printf_i+0xa2>
 800686e:	6805      	ldr	r5, [r0, #0]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	2d00      	cmp	r5, #0
 8006874:	da03      	bge.n	800687e <_printf_i+0x9a>
 8006876:	232d      	movs	r3, #45	; 0x2d
 8006878:	9a04      	ldr	r2, [sp, #16]
 800687a:	426d      	negs	r5, r5
 800687c:	7013      	strb	r3, [r2, #0]
 800687e:	4b5f      	ldr	r3, [pc, #380]	; (80069fc <_printf_i+0x218>)
 8006880:	270a      	movs	r7, #10
 8006882:	9303      	str	r3, [sp, #12]
 8006884:	e01b      	b.n	80068be <_printf_i+0xda>
 8006886:	6805      	ldr	r5, [r0, #0]
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	0649      	lsls	r1, r1, #25
 800688c:	d5f1      	bpl.n	8006872 <_printf_i+0x8e>
 800688e:	b22d      	sxth	r5, r5
 8006890:	e7ef      	b.n	8006872 <_printf_i+0x8e>
 8006892:	680d      	ldr	r5, [r1, #0]
 8006894:	6819      	ldr	r1, [r3, #0]
 8006896:	1d08      	adds	r0, r1, #4
 8006898:	6018      	str	r0, [r3, #0]
 800689a:	062e      	lsls	r6, r5, #24
 800689c:	d501      	bpl.n	80068a2 <_printf_i+0xbe>
 800689e:	680d      	ldr	r5, [r1, #0]
 80068a0:	e003      	b.n	80068aa <_printf_i+0xc6>
 80068a2:	066d      	lsls	r5, r5, #25
 80068a4:	d5fb      	bpl.n	800689e <_printf_i+0xba>
 80068a6:	680d      	ldr	r5, [r1, #0]
 80068a8:	b2ad      	uxth	r5, r5
 80068aa:	4b54      	ldr	r3, [pc, #336]	; (80069fc <_printf_i+0x218>)
 80068ac:	2708      	movs	r7, #8
 80068ae:	9303      	str	r3, [sp, #12]
 80068b0:	2a6f      	cmp	r2, #111	; 0x6f
 80068b2:	d000      	beq.n	80068b6 <_printf_i+0xd2>
 80068b4:	3702      	adds	r7, #2
 80068b6:	0023      	movs	r3, r4
 80068b8:	2200      	movs	r2, #0
 80068ba:	3343      	adds	r3, #67	; 0x43
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	60a3      	str	r3, [r4, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	db03      	blt.n	80068ce <_printf_i+0xea>
 80068c6:	2104      	movs	r1, #4
 80068c8:	6822      	ldr	r2, [r4, #0]
 80068ca:	438a      	bics	r2, r1
 80068cc:	6022      	str	r2, [r4, #0]
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	d102      	bne.n	80068d8 <_printf_i+0xf4>
 80068d2:	9e04      	ldr	r6, [sp, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00c      	beq.n	80068f2 <_printf_i+0x10e>
 80068d8:	9e04      	ldr	r6, [sp, #16]
 80068da:	0028      	movs	r0, r5
 80068dc:	0039      	movs	r1, r7
 80068de:	f7f9 fcb3 	bl	8000248 <__aeabi_uidivmod>
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	3e01      	subs	r6, #1
 80068e6:	5c5b      	ldrb	r3, [r3, r1]
 80068e8:	7033      	strb	r3, [r6, #0]
 80068ea:	002b      	movs	r3, r5
 80068ec:	0005      	movs	r5, r0
 80068ee:	429f      	cmp	r7, r3
 80068f0:	d9f3      	bls.n	80068da <_printf_i+0xf6>
 80068f2:	2f08      	cmp	r7, #8
 80068f4:	d109      	bne.n	800690a <_printf_i+0x126>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	07db      	lsls	r3, r3, #31
 80068fa:	d506      	bpl.n	800690a <_printf_i+0x126>
 80068fc:	6862      	ldr	r2, [r4, #4]
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	dc02      	bgt.n	800690a <_printf_i+0x126>
 8006904:	2330      	movs	r3, #48	; 0x30
 8006906:	3e01      	subs	r6, #1
 8006908:	7033      	strb	r3, [r6, #0]
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	1b9b      	subs	r3, r3, r6
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	0021      	movs	r1, r4
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	9805      	ldr	r0, [sp, #20]
 8006918:	9b06      	ldr	r3, [sp, #24]
 800691a:	aa09      	add	r2, sp, #36	; 0x24
 800691c:	f7ff fef2 	bl	8006704 <_printf_common>
 8006920:	3001      	adds	r0, #1
 8006922:	d147      	bne.n	80069b4 <_printf_i+0x1d0>
 8006924:	2001      	movs	r0, #1
 8006926:	4240      	negs	r0, r0
 8006928:	b00b      	add	sp, #44	; 0x2c
 800692a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800692c:	2220      	movs	r2, #32
 800692e:	6809      	ldr	r1, [r1, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	2278      	movs	r2, #120	; 0x78
 8006936:	4932      	ldr	r1, [pc, #200]	; (8006a00 <_printf_i+0x21c>)
 8006938:	9103      	str	r1, [sp, #12]
 800693a:	0021      	movs	r1, r4
 800693c:	3145      	adds	r1, #69	; 0x45
 800693e:	700a      	strb	r2, [r1, #0]
 8006940:	6819      	ldr	r1, [r3, #0]
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	c920      	ldmia	r1!, {r5}
 8006946:	0610      	lsls	r0, r2, #24
 8006948:	d402      	bmi.n	8006950 <_printf_i+0x16c>
 800694a:	0650      	lsls	r0, r2, #25
 800694c:	d500      	bpl.n	8006950 <_printf_i+0x16c>
 800694e:	b2ad      	uxth	r5, r5
 8006950:	6019      	str	r1, [r3, #0]
 8006952:	07d3      	lsls	r3, r2, #31
 8006954:	d502      	bpl.n	800695c <_printf_i+0x178>
 8006956:	2320      	movs	r3, #32
 8006958:	4313      	orrs	r3, r2
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	2710      	movs	r7, #16
 800695e:	2d00      	cmp	r5, #0
 8006960:	d1a9      	bne.n	80068b6 <_printf_i+0xd2>
 8006962:	2220      	movs	r2, #32
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	4393      	bics	r3, r2
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	e7a4      	b.n	80068b6 <_printf_i+0xd2>
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	680d      	ldr	r5, [r1, #0]
 8006970:	1d10      	adds	r0, r2, #4
 8006972:	6949      	ldr	r1, [r1, #20]
 8006974:	6018      	str	r0, [r3, #0]
 8006976:	6813      	ldr	r3, [r2, #0]
 8006978:	062e      	lsls	r6, r5, #24
 800697a:	d501      	bpl.n	8006980 <_printf_i+0x19c>
 800697c:	6019      	str	r1, [r3, #0]
 800697e:	e002      	b.n	8006986 <_printf_i+0x1a2>
 8006980:	066d      	lsls	r5, r5, #25
 8006982:	d5fb      	bpl.n	800697c <_printf_i+0x198>
 8006984:	8019      	strh	r1, [r3, #0]
 8006986:	2300      	movs	r3, #0
 8006988:	9e04      	ldr	r6, [sp, #16]
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	e7c0      	b.n	8006910 <_printf_i+0x12c>
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	1d11      	adds	r1, r2, #4
 8006992:	6019      	str	r1, [r3, #0]
 8006994:	6816      	ldr	r6, [r2, #0]
 8006996:	2100      	movs	r1, #0
 8006998:	0030      	movs	r0, r6
 800699a:	6862      	ldr	r2, [r4, #4]
 800699c:	f000 fbf1 	bl	8007182 <memchr>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d001      	beq.n	80069a8 <_printf_i+0x1c4>
 80069a4:	1b80      	subs	r0, r0, r6
 80069a6:	6060      	str	r0, [r4, #4]
 80069a8:	6863      	ldr	r3, [r4, #4]
 80069aa:	6123      	str	r3, [r4, #16]
 80069ac:	2300      	movs	r3, #0
 80069ae:	9a04      	ldr	r2, [sp, #16]
 80069b0:	7013      	strb	r3, [r2, #0]
 80069b2:	e7ad      	b.n	8006910 <_printf_i+0x12c>
 80069b4:	0032      	movs	r2, r6
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	9906      	ldr	r1, [sp, #24]
 80069ba:	9805      	ldr	r0, [sp, #20]
 80069bc:	9d07      	ldr	r5, [sp, #28]
 80069be:	47a8      	blx	r5
 80069c0:	3001      	adds	r0, #1
 80069c2:	d0af      	beq.n	8006924 <_printf_i+0x140>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	079b      	lsls	r3, r3, #30
 80069c8:	d415      	bmi.n	80069f6 <_printf_i+0x212>
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	68e0      	ldr	r0, [r4, #12]
 80069ce:	4298      	cmp	r0, r3
 80069d0:	daaa      	bge.n	8006928 <_printf_i+0x144>
 80069d2:	0018      	movs	r0, r3
 80069d4:	e7a8      	b.n	8006928 <_printf_i+0x144>
 80069d6:	0022      	movs	r2, r4
 80069d8:	2301      	movs	r3, #1
 80069da:	9906      	ldr	r1, [sp, #24]
 80069dc:	9805      	ldr	r0, [sp, #20]
 80069de:	9e07      	ldr	r6, [sp, #28]
 80069e0:	3219      	adds	r2, #25
 80069e2:	47b0      	blx	r6
 80069e4:	3001      	adds	r0, #1
 80069e6:	d09d      	beq.n	8006924 <_printf_i+0x140>
 80069e8:	3501      	adds	r5, #1
 80069ea:	68e3      	ldr	r3, [r4, #12]
 80069ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	42ab      	cmp	r3, r5
 80069f2:	dcf0      	bgt.n	80069d6 <_printf_i+0x1f2>
 80069f4:	e7e9      	b.n	80069ca <_printf_i+0x1e6>
 80069f6:	2500      	movs	r5, #0
 80069f8:	e7f7      	b.n	80069ea <_printf_i+0x206>
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	0800ab02 	.word	0x0800ab02
 8006a00:	0800ab13 	.word	0x0800ab13

08006a04 <_scanf_float>:
 8006a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a06:	b08b      	sub	sp, #44	; 0x2c
 8006a08:	0016      	movs	r6, r2
 8006a0a:	9002      	str	r0, [sp, #8]
 8006a0c:	22ae      	movs	r2, #174	; 0xae
 8006a0e:	2000      	movs	r0, #0
 8006a10:	9307      	str	r3, [sp, #28]
 8006a12:	688b      	ldr	r3, [r1, #8]
 8006a14:	000f      	movs	r7, r1
 8006a16:	1e59      	subs	r1, r3, #1
 8006a18:	0052      	lsls	r2, r2, #1
 8006a1a:	9006      	str	r0, [sp, #24]
 8006a1c:	4291      	cmp	r1, r2
 8006a1e:	d905      	bls.n	8006a2c <_scanf_float+0x28>
 8006a20:	3b5e      	subs	r3, #94	; 0x5e
 8006a22:	3bff      	subs	r3, #255	; 0xff
 8006a24:	9306      	str	r3, [sp, #24]
 8006a26:	235e      	movs	r3, #94	; 0x5e
 8006a28:	33ff      	adds	r3, #255	; 0xff
 8006a2a:	60bb      	str	r3, [r7, #8]
 8006a2c:	23f0      	movs	r3, #240	; 0xf0
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4313      	orrs	r3, r2
 8006a34:	603b      	str	r3, [r7, #0]
 8006a36:	003b      	movs	r3, r7
 8006a38:	2400      	movs	r4, #0
 8006a3a:	331c      	adds	r3, #28
 8006a3c:	001d      	movs	r5, r3
 8006a3e:	9304      	str	r3, [sp, #16]
 8006a40:	9403      	str	r4, [sp, #12]
 8006a42:	9409      	str	r4, [sp, #36]	; 0x24
 8006a44:	9408      	str	r4, [sp, #32]
 8006a46:	9401      	str	r4, [sp, #4]
 8006a48:	9405      	str	r4, [sp, #20]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	d00a      	beq.n	8006a66 <_scanf_float+0x62>
 8006a50:	6833      	ldr	r3, [r6, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b4e      	cmp	r3, #78	; 0x4e
 8006a56:	d844      	bhi.n	8006ae2 <_scanf_float+0xde>
 8006a58:	0018      	movs	r0, r3
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d82c      	bhi.n	8006ab8 <_scanf_float+0xb4>
 8006a5e:	382b      	subs	r0, #43	; 0x2b
 8006a60:	b2c1      	uxtb	r1, r0
 8006a62:	290e      	cmp	r1, #14
 8006a64:	d92a      	bls.n	8006abc <_scanf_float+0xb8>
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <_scanf_float+0x70>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	4aa3      	ldr	r2, [pc, #652]	; (8006cfc <_scanf_float+0x2f8>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d900      	bls.n	8006a7e <_scanf_float+0x7a>
 8006a7c:	e0f9      	b.n	8006c72 <_scanf_float+0x26e>
 8006a7e:	24be      	movs	r4, #190	; 0xbe
 8006a80:	0064      	lsls	r4, r4, #1
 8006a82:	9b04      	ldr	r3, [sp, #16]
 8006a84:	429d      	cmp	r5, r3
 8006a86:	d900      	bls.n	8006a8a <_scanf_float+0x86>
 8006a88:	e0e9      	b.n	8006c5e <_scanf_float+0x25a>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	9303      	str	r3, [sp, #12]
 8006a8e:	e183      	b.n	8006d98 <_scanf_float+0x394>
 8006a90:	0018      	movs	r0, r3
 8006a92:	3861      	subs	r0, #97	; 0x61
 8006a94:	280d      	cmp	r0, #13
 8006a96:	d8e6      	bhi.n	8006a66 <_scanf_float+0x62>
 8006a98:	f7f9 fb46 	bl	8000128 <__gnu_thumb1_case_shi>
 8006a9c:	ffe50083 	.word	0xffe50083
 8006aa0:	ffe5ffe5 	.word	0xffe5ffe5
 8006aa4:	00a200b6 	.word	0x00a200b6
 8006aa8:	ffe5ffe5 	.word	0xffe5ffe5
 8006aac:	ffe50089 	.word	0xffe50089
 8006ab0:	ffe5ffe5 	.word	0xffe5ffe5
 8006ab4:	0065ffe5 	.word	0x0065ffe5
 8006ab8:	3841      	subs	r0, #65	; 0x41
 8006aba:	e7eb      	b.n	8006a94 <_scanf_float+0x90>
 8006abc:	280e      	cmp	r0, #14
 8006abe:	d8d2      	bhi.n	8006a66 <_scanf_float+0x62>
 8006ac0:	f7f9 fb32 	bl	8000128 <__gnu_thumb1_case_shi>
 8006ac4:	ffd1004b 	.word	0xffd1004b
 8006ac8:	0098004b 	.word	0x0098004b
 8006acc:	0020ffd1 	.word	0x0020ffd1
 8006ad0:	00400040 	.word	0x00400040
 8006ad4:	00400040 	.word	0x00400040
 8006ad8:	00400040 	.word	0x00400040
 8006adc:	00400040 	.word	0x00400040
 8006ae0:	0040      	.short	0x0040
 8006ae2:	2b6e      	cmp	r3, #110	; 0x6e
 8006ae4:	d809      	bhi.n	8006afa <_scanf_float+0xf6>
 8006ae6:	2b60      	cmp	r3, #96	; 0x60
 8006ae8:	d8d2      	bhi.n	8006a90 <_scanf_float+0x8c>
 8006aea:	2b54      	cmp	r3, #84	; 0x54
 8006aec:	d07d      	beq.n	8006bea <_scanf_float+0x1e6>
 8006aee:	2b59      	cmp	r3, #89	; 0x59
 8006af0:	d1b9      	bne.n	8006a66 <_scanf_float+0x62>
 8006af2:	2c07      	cmp	r4, #7
 8006af4:	d1b7      	bne.n	8006a66 <_scanf_float+0x62>
 8006af6:	2408      	movs	r4, #8
 8006af8:	e02c      	b.n	8006b54 <_scanf_float+0x150>
 8006afa:	2b74      	cmp	r3, #116	; 0x74
 8006afc:	d075      	beq.n	8006bea <_scanf_float+0x1e6>
 8006afe:	2b79      	cmp	r3, #121	; 0x79
 8006b00:	d0f7      	beq.n	8006af2 <_scanf_float+0xee>
 8006b02:	e7b0      	b.n	8006a66 <_scanf_float+0x62>
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	05c8      	lsls	r0, r1, #23
 8006b08:	d51c      	bpl.n	8006b44 <_scanf_float+0x140>
 8006b0a:	2380      	movs	r3, #128	; 0x80
 8006b0c:	4399      	bics	r1, r3
 8006b0e:	9b01      	ldr	r3, [sp, #4]
 8006b10:	6039      	str	r1, [r7, #0]
 8006b12:	3301      	adds	r3, #1
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	9b06      	ldr	r3, [sp, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <_scanf_float+0x120>
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	3201      	adds	r2, #1
 8006b20:	9306      	str	r3, [sp, #24]
 8006b22:	60ba      	str	r2, [r7, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	6873      	ldr	r3, [r6, #4]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	6073      	str	r3, [r6, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	dc00      	bgt.n	8006b3c <_scanf_float+0x138>
 8006b3a:	e086      	b.n	8006c4a <_scanf_float+0x246>
 8006b3c:	6833      	ldr	r3, [r6, #0]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	e782      	b.n	8006a4a <_scanf_float+0x46>
 8006b44:	9a03      	ldr	r2, [sp, #12]
 8006b46:	1912      	adds	r2, r2, r4
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	d18c      	bne.n	8006a66 <_scanf_float+0x62>
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	496c      	ldr	r1, [pc, #432]	; (8006d00 <_scanf_float+0x2fc>)
 8006b50:	400a      	ands	r2, r1
 8006b52:	603a      	str	r2, [r7, #0]
 8006b54:	702b      	strb	r3, [r5, #0]
 8006b56:	3501      	adds	r5, #1
 8006b58:	e7e4      	b.n	8006b24 <_scanf_float+0x120>
 8006b5a:	2180      	movs	r1, #128	; 0x80
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	420a      	tst	r2, r1
 8006b60:	d081      	beq.n	8006a66 <_scanf_float+0x62>
 8006b62:	438a      	bics	r2, r1
 8006b64:	e7f5      	b.n	8006b52 <_scanf_float+0x14e>
 8006b66:	9a03      	ldr	r2, [sp, #12]
 8006b68:	2a00      	cmp	r2, #0
 8006b6a:	d10f      	bne.n	8006b8c <_scanf_float+0x188>
 8006b6c:	9a01      	ldr	r2, [sp, #4]
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	d10f      	bne.n	8006b92 <_scanf_float+0x18e>
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	21e0      	movs	r1, #224	; 0xe0
 8006b76:	0010      	movs	r0, r2
 8006b78:	00c9      	lsls	r1, r1, #3
 8006b7a:	4008      	ands	r0, r1
 8006b7c:	4288      	cmp	r0, r1
 8006b7e:	d108      	bne.n	8006b92 <_scanf_float+0x18e>
 8006b80:	4960      	ldr	r1, [pc, #384]	; (8006d04 <_scanf_float+0x300>)
 8006b82:	400a      	ands	r2, r1
 8006b84:	603a      	str	r2, [r7, #0]
 8006b86:	2201      	movs	r2, #1
 8006b88:	9203      	str	r2, [sp, #12]
 8006b8a:	e7e3      	b.n	8006b54 <_scanf_float+0x150>
 8006b8c:	9a03      	ldr	r2, [sp, #12]
 8006b8e:	2a02      	cmp	r2, #2
 8006b90:	d059      	beq.n	8006c46 <_scanf_float+0x242>
 8006b92:	2c01      	cmp	r4, #1
 8006b94:	d002      	beq.n	8006b9c <_scanf_float+0x198>
 8006b96:	2c04      	cmp	r4, #4
 8006b98:	d000      	beq.n	8006b9c <_scanf_float+0x198>
 8006b9a:	e764      	b.n	8006a66 <_scanf_float+0x62>
 8006b9c:	3401      	adds	r4, #1
 8006b9e:	b2e4      	uxtb	r4, r4
 8006ba0:	e7d8      	b.n	8006b54 <_scanf_float+0x150>
 8006ba2:	9a03      	ldr	r2, [sp, #12]
 8006ba4:	2a01      	cmp	r2, #1
 8006ba6:	d000      	beq.n	8006baa <_scanf_float+0x1a6>
 8006ba8:	e75d      	b.n	8006a66 <_scanf_float+0x62>
 8006baa:	2202      	movs	r2, #2
 8006bac:	e7ec      	b.n	8006b88 <_scanf_float+0x184>
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	d110      	bne.n	8006bd4 <_scanf_float+0x1d0>
 8006bb2:	9a01      	ldr	r2, [sp, #4]
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	d000      	beq.n	8006bba <_scanf_float+0x1b6>
 8006bb8:	e758      	b.n	8006a6c <_scanf_float+0x68>
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	21e0      	movs	r1, #224	; 0xe0
 8006bbe:	0010      	movs	r0, r2
 8006bc0:	00c9      	lsls	r1, r1, #3
 8006bc2:	4008      	ands	r0, r1
 8006bc4:	4288      	cmp	r0, r1
 8006bc6:	d000      	beq.n	8006bca <_scanf_float+0x1c6>
 8006bc8:	e754      	b.n	8006a74 <_scanf_float+0x70>
 8006bca:	494e      	ldr	r1, [pc, #312]	; (8006d04 <_scanf_float+0x300>)
 8006bcc:	3401      	adds	r4, #1
 8006bce:	400a      	ands	r2, r1
 8006bd0:	603a      	str	r2, [r7, #0]
 8006bd2:	e7bf      	b.n	8006b54 <_scanf_float+0x150>
 8006bd4:	21fd      	movs	r1, #253	; 0xfd
 8006bd6:	1ee2      	subs	r2, r4, #3
 8006bd8:	420a      	tst	r2, r1
 8006bda:	d000      	beq.n	8006bde <_scanf_float+0x1da>
 8006bdc:	e743      	b.n	8006a66 <_scanf_float+0x62>
 8006bde:	e7dd      	b.n	8006b9c <_scanf_float+0x198>
 8006be0:	2c02      	cmp	r4, #2
 8006be2:	d000      	beq.n	8006be6 <_scanf_float+0x1e2>
 8006be4:	e73f      	b.n	8006a66 <_scanf_float+0x62>
 8006be6:	2403      	movs	r4, #3
 8006be8:	e7b4      	b.n	8006b54 <_scanf_float+0x150>
 8006bea:	2c06      	cmp	r4, #6
 8006bec:	d000      	beq.n	8006bf0 <_scanf_float+0x1ec>
 8006bee:	e73a      	b.n	8006a66 <_scanf_float+0x62>
 8006bf0:	2407      	movs	r4, #7
 8006bf2:	e7af      	b.n	8006b54 <_scanf_float+0x150>
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	0591      	lsls	r1, r2, #22
 8006bf8:	d400      	bmi.n	8006bfc <_scanf_float+0x1f8>
 8006bfa:	e734      	b.n	8006a66 <_scanf_float+0x62>
 8006bfc:	4942      	ldr	r1, [pc, #264]	; (8006d08 <_scanf_float+0x304>)
 8006bfe:	400a      	ands	r2, r1
 8006c00:	603a      	str	r2, [r7, #0]
 8006c02:	9a01      	ldr	r2, [sp, #4]
 8006c04:	9205      	str	r2, [sp, #20]
 8006c06:	e7a5      	b.n	8006b54 <_scanf_float+0x150>
 8006c08:	21a0      	movs	r1, #160	; 0xa0
 8006c0a:	2080      	movs	r0, #128	; 0x80
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	00c9      	lsls	r1, r1, #3
 8006c10:	4011      	ands	r1, r2
 8006c12:	00c0      	lsls	r0, r0, #3
 8006c14:	4281      	cmp	r1, r0
 8006c16:	d006      	beq.n	8006c26 <_scanf_float+0x222>
 8006c18:	4202      	tst	r2, r0
 8006c1a:	d100      	bne.n	8006c1e <_scanf_float+0x21a>
 8006c1c:	e723      	b.n	8006a66 <_scanf_float+0x62>
 8006c1e:	9901      	ldr	r1, [sp, #4]
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d100      	bne.n	8006c26 <_scanf_float+0x222>
 8006c24:	e726      	b.n	8006a74 <_scanf_float+0x70>
 8006c26:	0591      	lsls	r1, r2, #22
 8006c28:	d404      	bmi.n	8006c34 <_scanf_float+0x230>
 8006c2a:	9901      	ldr	r1, [sp, #4]
 8006c2c:	9805      	ldr	r0, [sp, #20]
 8006c2e:	9509      	str	r5, [sp, #36]	; 0x24
 8006c30:	1a09      	subs	r1, r1, r0
 8006c32:	9108      	str	r1, [sp, #32]
 8006c34:	4933      	ldr	r1, [pc, #204]	; (8006d04 <_scanf_float+0x300>)
 8006c36:	400a      	ands	r2, r1
 8006c38:	21c0      	movs	r1, #192	; 0xc0
 8006c3a:	0049      	lsls	r1, r1, #1
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	603a      	str	r2, [r7, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	9201      	str	r2, [sp, #4]
 8006c44:	e786      	b.n	8006b54 <_scanf_float+0x150>
 8006c46:	2203      	movs	r2, #3
 8006c48:	e79e      	b.n	8006b88 <_scanf_float+0x184>
 8006c4a:	23c0      	movs	r3, #192	; 0xc0
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	0031      	movs	r1, r6
 8006c50:	58fb      	ldr	r3, [r7, r3]
 8006c52:	9802      	ldr	r0, [sp, #8]
 8006c54:	4798      	blx	r3
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d100      	bne.n	8006c5c <_scanf_float+0x258>
 8006c5a:	e6f6      	b.n	8006a4a <_scanf_float+0x46>
 8006c5c:	e703      	b.n	8006a66 <_scanf_float+0x62>
 8006c5e:	3d01      	subs	r5, #1
 8006c60:	593b      	ldr	r3, [r7, r4]
 8006c62:	0032      	movs	r2, r6
 8006c64:	7829      	ldrb	r1, [r5, #0]
 8006c66:	9802      	ldr	r0, [sp, #8]
 8006c68:	4798      	blx	r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	e707      	b.n	8006a82 <_scanf_float+0x7e>
 8006c72:	1e63      	subs	r3, r4, #1
 8006c74:	2b06      	cmp	r3, #6
 8006c76:	d80e      	bhi.n	8006c96 <_scanf_float+0x292>
 8006c78:	9503      	str	r5, [sp, #12]
 8006c7a:	2c02      	cmp	r4, #2
 8006c7c:	d920      	bls.n	8006cc0 <_scanf_float+0x2bc>
 8006c7e:	1b63      	subs	r3, r4, r5
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	9a06      	ldr	r2, [sp, #24]
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d827      	bhi.n	8006ce0 <_scanf_float+0x2dc>
 8006c90:	3c03      	subs	r4, #3
 8006c92:	b2e4      	uxtb	r4, r4
 8006c94:	1b2d      	subs	r5, r5, r4
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	05da      	lsls	r2, r3, #23
 8006c9a:	d552      	bpl.n	8006d42 <_scanf_float+0x33e>
 8006c9c:	055b      	lsls	r3, r3, #21
 8006c9e:	d535      	bpl.n	8006d0c <_scanf_float+0x308>
 8006ca0:	24be      	movs	r4, #190	; 0xbe
 8006ca2:	0064      	lsls	r4, r4, #1
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	429d      	cmp	r5, r3
 8006ca8:	d800      	bhi.n	8006cac <_scanf_float+0x2a8>
 8006caa:	e6ee      	b.n	8006a8a <_scanf_float+0x86>
 8006cac:	3d01      	subs	r5, #1
 8006cae:	593b      	ldr	r3, [r7, r4]
 8006cb0:	0032      	movs	r2, r6
 8006cb2:	7829      	ldrb	r1, [r5, #0]
 8006cb4:	9802      	ldr	r0, [sp, #8]
 8006cb6:	4798      	blx	r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	e7f1      	b.n	8006ca4 <_scanf_float+0x2a0>
 8006cc0:	24be      	movs	r4, #190	; 0xbe
 8006cc2:	0064      	lsls	r4, r4, #1
 8006cc4:	9b04      	ldr	r3, [sp, #16]
 8006cc6:	429d      	cmp	r5, r3
 8006cc8:	d800      	bhi.n	8006ccc <_scanf_float+0x2c8>
 8006cca:	e6de      	b.n	8006a8a <_scanf_float+0x86>
 8006ccc:	3d01      	subs	r5, #1
 8006cce:	593b      	ldr	r3, [r7, r4]
 8006cd0:	0032      	movs	r2, r6
 8006cd2:	7829      	ldrb	r1, [r5, #0]
 8006cd4:	9802      	ldr	r0, [sp, #8]
 8006cd6:	4798      	blx	r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	e7f1      	b.n	8006cc4 <_scanf_float+0x2c0>
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	0032      	movs	r2, r6
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	7819      	ldrb	r1, [r3, #0]
 8006ce8:	9303      	str	r3, [sp, #12]
 8006cea:	23be      	movs	r3, #190	; 0xbe
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	58fb      	ldr	r3, [r7, r3]
 8006cf0:	9802      	ldr	r0, [sp, #8]
 8006cf2:	4798      	blx	r3
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	e7c3      	b.n	8006c84 <_scanf_float+0x280>
 8006cfc:	fffffeff 	.word	0xfffffeff
 8006d00:	fffffe7f 	.word	0xfffffe7f
 8006d04:	fffff87f 	.word	0xfffff87f
 8006d08:	fffffd7f 	.word	0xfffffd7f
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1e6c      	subs	r4, r5, #1
 8006d10:	7821      	ldrb	r1, [r4, #0]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	2965      	cmp	r1, #101	; 0x65
 8006d18:	d00c      	beq.n	8006d34 <_scanf_float+0x330>
 8006d1a:	2945      	cmp	r1, #69	; 0x45
 8006d1c:	d00a      	beq.n	8006d34 <_scanf_float+0x330>
 8006d1e:	23be      	movs	r3, #190	; 0xbe
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	58fb      	ldr	r3, [r7, r3]
 8006d24:	0032      	movs	r2, r6
 8006d26:	9802      	ldr	r0, [sp, #8]
 8006d28:	4798      	blx	r3
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1eac      	subs	r4, r5, #2
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	7821      	ldrb	r1, [r4, #0]
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	23be      	movs	r3, #190	; 0xbe
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	0032      	movs	r2, r6
 8006d3a:	58fb      	ldr	r3, [r7, r3]
 8006d3c:	9802      	ldr	r0, [sp, #8]
 8006d3e:	4798      	blx	r3
 8006d40:	0025      	movs	r5, r4
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	2310      	movs	r3, #16
 8006d46:	0011      	movs	r1, r2
 8006d48:	4019      	ands	r1, r3
 8006d4a:	9103      	str	r1, [sp, #12]
 8006d4c:	421a      	tst	r2, r3
 8006d4e:	d15b      	bne.n	8006e08 <_scanf_float+0x404>
 8006d50:	22c0      	movs	r2, #192	; 0xc0
 8006d52:	7029      	strb	r1, [r5, #0]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	00d2      	lsls	r2, r2, #3
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2280      	movs	r2, #128	; 0x80
 8006d5c:	00d2      	lsls	r2, r2, #3
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d11d      	bne.n	8006d9e <_scanf_float+0x39a>
 8006d62:	9b05      	ldr	r3, [sp, #20]
 8006d64:	9a01      	ldr	r2, [sp, #4]
 8006d66:	9901      	ldr	r1, [sp, #4]
 8006d68:	1a9a      	subs	r2, r3, r2
 8006d6a:	428b      	cmp	r3, r1
 8006d6c:	d124      	bne.n	8006db8 <_scanf_float+0x3b4>
 8006d6e:	2200      	movs	r2, #0
 8006d70:	9904      	ldr	r1, [sp, #16]
 8006d72:	9802      	ldr	r0, [sp, #8]
 8006d74:	f002 fc98 	bl	80096a8 <_strtod_r>
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	0004      	movs	r4, r0
 8006d7e:	000d      	movs	r5, r1
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	0791      	lsls	r1, r2, #30
 8006d84:	d525      	bpl.n	8006dd2 <_scanf_float+0x3ce>
 8006d86:	9907      	ldr	r1, [sp, #28]
 8006d88:	1d1a      	adds	r2, r3, #4
 8006d8a:	600a      	str	r2, [r1, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	601c      	str	r4, [r3, #0]
 8006d90:	605d      	str	r5, [r3, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	9803      	ldr	r0, [sp, #12]
 8006d9a:	b00b      	add	sp, #44	; 0x2c
 8006d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d9e:	9b08      	ldr	r3, [sp, #32]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0e4      	beq.n	8006d6e <_scanf_float+0x36a>
 8006da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da6:	9a03      	ldr	r2, [sp, #12]
 8006da8:	1c59      	adds	r1, r3, #1
 8006daa:	9802      	ldr	r0, [sp, #8]
 8006dac:	230a      	movs	r3, #10
 8006dae:	f002 fd09 	bl	80097c4 <_strtol_r>
 8006db2:	9b08      	ldr	r3, [sp, #32]
 8006db4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006db6:	1ac2      	subs	r2, r0, r3
 8006db8:	003b      	movs	r3, r7
 8006dba:	3370      	adds	r3, #112	; 0x70
 8006dbc:	33ff      	adds	r3, #255	; 0xff
 8006dbe:	429d      	cmp	r5, r3
 8006dc0:	d302      	bcc.n	8006dc8 <_scanf_float+0x3c4>
 8006dc2:	003d      	movs	r5, r7
 8006dc4:	356f      	adds	r5, #111	; 0x6f
 8006dc6:	35ff      	adds	r5, #255	; 0xff
 8006dc8:	0028      	movs	r0, r5
 8006dca:	4910      	ldr	r1, [pc, #64]	; (8006e0c <_scanf_float+0x408>)
 8006dcc:	f000 f8e6 	bl	8006f9c <siprintf>
 8006dd0:	e7cd      	b.n	8006d6e <_scanf_float+0x36a>
 8006dd2:	1d19      	adds	r1, r3, #4
 8006dd4:	0752      	lsls	r2, r2, #29
 8006dd6:	d502      	bpl.n	8006dde <_scanf_float+0x3da>
 8006dd8:	9a07      	ldr	r2, [sp, #28]
 8006dda:	6011      	str	r1, [r2, #0]
 8006ddc:	e7d6      	b.n	8006d8c <_scanf_float+0x388>
 8006dde:	9a07      	ldr	r2, [sp, #28]
 8006de0:	0020      	movs	r0, r4
 8006de2:	6011      	str	r1, [r2, #0]
 8006de4:	681e      	ldr	r6, [r3, #0]
 8006de6:	0022      	movs	r2, r4
 8006de8:	002b      	movs	r3, r5
 8006dea:	0029      	movs	r1, r5
 8006dec:	f7fb fb50 	bl	8002490 <__aeabi_dcmpun>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d004      	beq.n	8006dfe <_scanf_float+0x3fa>
 8006df4:	4806      	ldr	r0, [pc, #24]	; (8006e10 <_scanf_float+0x40c>)
 8006df6:	f000 f9cf 	bl	8007198 <nanf>
 8006dfa:	6030      	str	r0, [r6, #0]
 8006dfc:	e7c9      	b.n	8006d92 <_scanf_float+0x38e>
 8006dfe:	0020      	movs	r0, r4
 8006e00:	0029      	movs	r1, r5
 8006e02:	f7fb fc37 	bl	8002674 <__aeabi_d2f>
 8006e06:	e7f8      	b.n	8006dfa <_scanf_float+0x3f6>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e63f      	b.n	8006a8c <_scanf_float+0x88>
 8006e0c:	0800ab24 	.word	0x0800ab24
 8006e10:	0800aeb5 	.word	0x0800aeb5

08006e14 <std>:
 8006e14:	2300      	movs	r3, #0
 8006e16:	b510      	push	{r4, lr}
 8006e18:	0004      	movs	r4, r0
 8006e1a:	6003      	str	r3, [r0, #0]
 8006e1c:	6043      	str	r3, [r0, #4]
 8006e1e:	6083      	str	r3, [r0, #8]
 8006e20:	8181      	strh	r1, [r0, #12]
 8006e22:	6643      	str	r3, [r0, #100]	; 0x64
 8006e24:	81c2      	strh	r2, [r0, #14]
 8006e26:	6103      	str	r3, [r0, #16]
 8006e28:	6143      	str	r3, [r0, #20]
 8006e2a:	6183      	str	r3, [r0, #24]
 8006e2c:	0019      	movs	r1, r3
 8006e2e:	2208      	movs	r2, #8
 8006e30:	305c      	adds	r0, #92	; 0x5c
 8006e32:	f000 f91f 	bl	8007074 <memset>
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <std+0x50>)
 8006e38:	6224      	str	r4, [r4, #32]
 8006e3a:	6263      	str	r3, [r4, #36]	; 0x24
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <std+0x54>)
 8006e3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <std+0x58>)
 8006e42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <std+0x5c>)
 8006e46:	6323      	str	r3, [r4, #48]	; 0x30
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <std+0x60>)
 8006e4a:	429c      	cmp	r4, r3
 8006e4c:	d005      	beq.n	8006e5a <std+0x46>
 8006e4e:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <std+0x64>)
 8006e50:	429c      	cmp	r4, r3
 8006e52:	d002      	beq.n	8006e5a <std+0x46>
 8006e54:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <std+0x68>)
 8006e56:	429c      	cmp	r4, r3
 8006e58:	d103      	bne.n	8006e62 <std+0x4e>
 8006e5a:	0020      	movs	r0, r4
 8006e5c:	3058      	adds	r0, #88	; 0x58
 8006e5e:	f000 f98d 	bl	800717c <__retarget_lock_init_recursive>
 8006e62:	bd10      	pop	{r4, pc}
 8006e64:	08006fdd 	.word	0x08006fdd
 8006e68:	08007005 	.word	0x08007005
 8006e6c:	0800703d 	.word	0x0800703d
 8006e70:	08007069 	.word	0x08007069
 8006e74:	20000388 	.word	0x20000388
 8006e78:	200003f0 	.word	0x200003f0
 8006e7c:	20000458 	.word	0x20000458

08006e80 <stdio_exit_handler>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	4a03      	ldr	r2, [pc, #12]	; (8006e90 <stdio_exit_handler+0x10>)
 8006e84:	4903      	ldr	r1, [pc, #12]	; (8006e94 <stdio_exit_handler+0x14>)
 8006e86:	4804      	ldr	r0, [pc, #16]	; (8006e98 <stdio_exit_handler+0x18>)
 8006e88:	f000 f86c 	bl	8006f64 <_fwalk_sglue>
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	2000000c 	.word	0x2000000c
 8006e94:	08009ba5 	.word	0x08009ba5
 8006e98:	20000018 	.word	0x20000018

08006e9c <cleanup_stdio>:
 8006e9c:	6841      	ldr	r1, [r0, #4]
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <cleanup_stdio+0x30>)
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	0004      	movs	r4, r0
 8006ea4:	4299      	cmp	r1, r3
 8006ea6:	d001      	beq.n	8006eac <cleanup_stdio+0x10>
 8006ea8:	f002 fe7c 	bl	8009ba4 <_fflush_r>
 8006eac:	68a1      	ldr	r1, [r4, #8]
 8006eae:	4b08      	ldr	r3, [pc, #32]	; (8006ed0 <cleanup_stdio+0x34>)
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <cleanup_stdio+0x1e>
 8006eb4:	0020      	movs	r0, r4
 8006eb6:	f002 fe75 	bl	8009ba4 <_fflush_r>
 8006eba:	68e1      	ldr	r1, [r4, #12]
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <cleanup_stdio+0x38>)
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	d002      	beq.n	8006ec8 <cleanup_stdio+0x2c>
 8006ec2:	0020      	movs	r0, r4
 8006ec4:	f002 fe6e 	bl	8009ba4 <_fflush_r>
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	20000388 	.word	0x20000388
 8006ed0:	200003f0 	.word	0x200003f0
 8006ed4:	20000458 	.word	0x20000458

08006ed8 <global_stdio_init.part.0>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	4b09      	ldr	r3, [pc, #36]	; (8006f00 <global_stdio_init.part.0+0x28>)
 8006edc:	4a09      	ldr	r2, [pc, #36]	; (8006f04 <global_stdio_init.part.0+0x2c>)
 8006ede:	2104      	movs	r1, #4
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	4809      	ldr	r0, [pc, #36]	; (8006f08 <global_stdio_init.part.0+0x30>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f7ff ff95 	bl	8006e14 <std>
 8006eea:	2201      	movs	r2, #1
 8006eec:	2109      	movs	r1, #9
 8006eee:	4807      	ldr	r0, [pc, #28]	; (8006f0c <global_stdio_init.part.0+0x34>)
 8006ef0:	f7ff ff90 	bl	8006e14 <std>
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	2112      	movs	r1, #18
 8006ef8:	4805      	ldr	r0, [pc, #20]	; (8006f10 <global_stdio_init.part.0+0x38>)
 8006efa:	f7ff ff8b 	bl	8006e14 <std>
 8006efe:	bd10      	pop	{r4, pc}
 8006f00:	200004c0 	.word	0x200004c0
 8006f04:	08006e81 	.word	0x08006e81
 8006f08:	20000388 	.word	0x20000388
 8006f0c:	200003f0 	.word	0x200003f0
 8006f10:	20000458 	.word	0x20000458

08006f14 <__sfp_lock_acquire>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4802      	ldr	r0, [pc, #8]	; (8006f20 <__sfp_lock_acquire+0xc>)
 8006f18:	f000 f931 	bl	800717e <__retarget_lock_acquire_recursive>
 8006f1c:	bd10      	pop	{r4, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	200004c9 	.word	0x200004c9

08006f24 <__sfp_lock_release>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	4802      	ldr	r0, [pc, #8]	; (8006f30 <__sfp_lock_release+0xc>)
 8006f28:	f000 f92a 	bl	8007180 <__retarget_lock_release_recursive>
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	200004c9 	.word	0x200004c9

08006f34 <__sinit>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	0004      	movs	r4, r0
 8006f38:	f7ff ffec 	bl	8006f14 <__sfp_lock_acquire>
 8006f3c:	6a23      	ldr	r3, [r4, #32]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <__sinit+0x14>
 8006f42:	f7ff ffef 	bl	8006f24 <__sfp_lock_release>
 8006f46:	bd10      	pop	{r4, pc}
 8006f48:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <__sinit+0x28>)
 8006f4a:	6223      	str	r3, [r4, #32]
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <__sinit+0x2c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f6      	bne.n	8006f42 <__sinit+0xe>
 8006f54:	f7ff ffc0 	bl	8006ed8 <global_stdio_init.part.0>
 8006f58:	e7f3      	b.n	8006f42 <__sinit+0xe>
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	08006e9d 	.word	0x08006e9d
 8006f60:	200004c0 	.word	0x200004c0

08006f64 <_fwalk_sglue>:
 8006f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f66:	0014      	movs	r4, r2
 8006f68:	2600      	movs	r6, #0
 8006f6a:	9000      	str	r0, [sp, #0]
 8006f6c:	9101      	str	r1, [sp, #4]
 8006f6e:	68a5      	ldr	r5, [r4, #8]
 8006f70:	6867      	ldr	r7, [r4, #4]
 8006f72:	3f01      	subs	r7, #1
 8006f74:	d504      	bpl.n	8006f80 <_fwalk_sglue+0x1c>
 8006f76:	6824      	ldr	r4, [r4, #0]
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d1f8      	bne.n	8006f6e <_fwalk_sglue+0xa>
 8006f7c:	0030      	movs	r0, r6
 8006f7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f80:	89ab      	ldrh	r3, [r5, #12]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d908      	bls.n	8006f98 <_fwalk_sglue+0x34>
 8006f86:	220e      	movs	r2, #14
 8006f88:	5eab      	ldrsh	r3, [r5, r2]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	d004      	beq.n	8006f98 <_fwalk_sglue+0x34>
 8006f8e:	0029      	movs	r1, r5
 8006f90:	9800      	ldr	r0, [sp, #0]
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	4798      	blx	r3
 8006f96:	4306      	orrs	r6, r0
 8006f98:	3568      	adds	r5, #104	; 0x68
 8006f9a:	e7ea      	b.n	8006f72 <_fwalk_sglue+0xe>

08006f9c <siprintf>:
 8006f9c:	b40e      	push	{r1, r2, r3}
 8006f9e:	b500      	push	{lr}
 8006fa0:	490b      	ldr	r1, [pc, #44]	; (8006fd0 <siprintf+0x34>)
 8006fa2:	b09c      	sub	sp, #112	; 0x70
 8006fa4:	ab1d      	add	r3, sp, #116	; 0x74
 8006fa6:	9002      	str	r0, [sp, #8]
 8006fa8:	9006      	str	r0, [sp, #24]
 8006faa:	9107      	str	r1, [sp, #28]
 8006fac:	9104      	str	r1, [sp, #16]
 8006fae:	4809      	ldr	r0, [pc, #36]	; (8006fd4 <siprintf+0x38>)
 8006fb0:	4909      	ldr	r1, [pc, #36]	; (8006fd8 <siprintf+0x3c>)
 8006fb2:	cb04      	ldmia	r3!, {r2}
 8006fb4:	9105      	str	r1, [sp, #20]
 8006fb6:	6800      	ldr	r0, [r0, #0]
 8006fb8:	a902      	add	r1, sp, #8
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	f002 fc68 	bl	8009890 <_svfiprintf_r>
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	9b02      	ldr	r3, [sp, #8]
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	b01c      	add	sp, #112	; 0x70
 8006fc8:	bc08      	pop	{r3}
 8006fca:	b003      	add	sp, #12
 8006fcc:	4718      	bx	r3
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	7fffffff 	.word	0x7fffffff
 8006fd4:	20000064 	.word	0x20000064
 8006fd8:	ffff0208 	.word	0xffff0208

08006fdc <__sread>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	000c      	movs	r4, r1
 8006fe0:	250e      	movs	r5, #14
 8006fe2:	5f49      	ldrsh	r1, [r1, r5]
 8006fe4:	f000 f878 	bl	80070d8 <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	db03      	blt.n	8006ff4 <__sread+0x18>
 8006fec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006fee:	181b      	adds	r3, r3, r0
 8006ff0:	6563      	str	r3, [r4, #84]	; 0x54
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	4a02      	ldr	r2, [pc, #8]	; (8007000 <__sread+0x24>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	e7f9      	b.n	8006ff2 <__sread+0x16>
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	ffffefff 	.word	0xffffefff

08007004 <__swrite>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	001f      	movs	r7, r3
 8007008:	898b      	ldrh	r3, [r1, #12]
 800700a:	0005      	movs	r5, r0
 800700c:	000c      	movs	r4, r1
 800700e:	0016      	movs	r6, r2
 8007010:	05db      	lsls	r3, r3, #23
 8007012:	d505      	bpl.n	8007020 <__swrite+0x1c>
 8007014:	230e      	movs	r3, #14
 8007016:	5ec9      	ldrsh	r1, [r1, r3]
 8007018:	2200      	movs	r2, #0
 800701a:	2302      	movs	r3, #2
 800701c:	f000 f848 	bl	80070b0 <_lseek_r>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	4a05      	ldr	r2, [pc, #20]	; (8007038 <__swrite+0x34>)
 8007024:	0028      	movs	r0, r5
 8007026:	4013      	ands	r3, r2
 8007028:	81a3      	strh	r3, [r4, #12]
 800702a:	0032      	movs	r2, r6
 800702c:	230e      	movs	r3, #14
 800702e:	5ee1      	ldrsh	r1, [r4, r3]
 8007030:	003b      	movs	r3, r7
 8007032:	f000 f865 	bl	8007100 <_write_r>
 8007036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007038:	ffffefff 	.word	0xffffefff

0800703c <__sseek>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	000c      	movs	r4, r1
 8007040:	250e      	movs	r5, #14
 8007042:	5f49      	ldrsh	r1, [r1, r5]
 8007044:	f000 f834 	bl	80070b0 <_lseek_r>
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	1c42      	adds	r2, r0, #1
 800704c:	d103      	bne.n	8007056 <__sseek+0x1a>
 800704e:	4a05      	ldr	r2, [pc, #20]	; (8007064 <__sseek+0x28>)
 8007050:	4013      	ands	r3, r2
 8007052:	81a3      	strh	r3, [r4, #12]
 8007054:	bd70      	pop	{r4, r5, r6, pc}
 8007056:	2280      	movs	r2, #128	; 0x80
 8007058:	0152      	lsls	r2, r2, #5
 800705a:	4313      	orrs	r3, r2
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	6560      	str	r0, [r4, #84]	; 0x54
 8007060:	e7f8      	b.n	8007054 <__sseek+0x18>
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	ffffefff 	.word	0xffffefff

08007068 <__sclose>:
 8007068:	b510      	push	{r4, lr}
 800706a:	230e      	movs	r3, #14
 800706c:	5ec9      	ldrsh	r1, [r1, r3]
 800706e:	f000 f80d 	bl	800708c <_close_r>
 8007072:	bd10      	pop	{r4, pc}

08007074 <memset>:
 8007074:	0003      	movs	r3, r0
 8007076:	1882      	adds	r2, r0, r2
 8007078:	4293      	cmp	r3, r2
 800707a:	d100      	bne.n	800707e <memset+0xa>
 800707c:	4770      	bx	lr
 800707e:	7019      	strb	r1, [r3, #0]
 8007080:	3301      	adds	r3, #1
 8007082:	e7f9      	b.n	8007078 <memset+0x4>

08007084 <_localeconv_r>:
 8007084:	4800      	ldr	r0, [pc, #0]	; (8007088 <_localeconv_r+0x4>)
 8007086:	4770      	bx	lr
 8007088:	20000158 	.word	0x20000158

0800708c <_close_r>:
 800708c:	2300      	movs	r3, #0
 800708e:	b570      	push	{r4, r5, r6, lr}
 8007090:	4d06      	ldr	r5, [pc, #24]	; (80070ac <_close_r+0x20>)
 8007092:	0004      	movs	r4, r0
 8007094:	0008      	movs	r0, r1
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	f7fc f8b2 	bl	8003200 <_close>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d103      	bne.n	80070a8 <_close_r+0x1c>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d000      	beq.n	80070a8 <_close_r+0x1c>
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	200004c4 	.word	0x200004c4

080070b0 <_lseek_r>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	0004      	movs	r4, r0
 80070b4:	0008      	movs	r0, r1
 80070b6:	0011      	movs	r1, r2
 80070b8:	001a      	movs	r2, r3
 80070ba:	2300      	movs	r3, #0
 80070bc:	4d05      	ldr	r5, [pc, #20]	; (80070d4 <_lseek_r+0x24>)
 80070be:	602b      	str	r3, [r5, #0]
 80070c0:	f7fc f8bf 	bl	8003242 <_lseek>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d103      	bne.n	80070d0 <_lseek_r+0x20>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d000      	beq.n	80070d0 <_lseek_r+0x20>
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	bd70      	pop	{r4, r5, r6, pc}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	200004c4 	.word	0x200004c4

080070d8 <_read_r>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	0004      	movs	r4, r0
 80070dc:	0008      	movs	r0, r1
 80070de:	0011      	movs	r1, r2
 80070e0:	001a      	movs	r2, r3
 80070e2:	2300      	movs	r3, #0
 80070e4:	4d05      	ldr	r5, [pc, #20]	; (80070fc <_read_r+0x24>)
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7fc f851 	bl	800318e <_read>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d103      	bne.n	80070f8 <_read_r+0x20>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d000      	beq.n	80070f8 <_read_r+0x20>
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	200004c4 	.word	0x200004c4

08007100 <_write_r>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	0004      	movs	r4, r0
 8007104:	0008      	movs	r0, r1
 8007106:	0011      	movs	r1, r2
 8007108:	001a      	movs	r2, r3
 800710a:	2300      	movs	r3, #0
 800710c:	4d05      	ldr	r5, [pc, #20]	; (8007124 <_write_r+0x24>)
 800710e:	602b      	str	r3, [r5, #0]
 8007110:	f7fc f85a 	bl	80031c8 <_write>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d103      	bne.n	8007120 <_write_r+0x20>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d000      	beq.n	8007120 <_write_r+0x20>
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	bd70      	pop	{r4, r5, r6, pc}
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	200004c4 	.word	0x200004c4

08007128 <__errno>:
 8007128:	4b01      	ldr	r3, [pc, #4]	; (8007130 <__errno+0x8>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	4770      	bx	lr
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	20000064 	.word	0x20000064

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	2600      	movs	r6, #0
 8007138:	4c0c      	ldr	r4, [pc, #48]	; (800716c <__libc_init_array+0x38>)
 800713a:	4d0d      	ldr	r5, [pc, #52]	; (8007170 <__libc_init_array+0x3c>)
 800713c:	1b64      	subs	r4, r4, r5
 800713e:	10a4      	asrs	r4, r4, #2
 8007140:	42a6      	cmp	r6, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	2600      	movs	r6, #0
 8007146:	f003 fc71 	bl	800aa2c <_init>
 800714a:	4c0a      	ldr	r4, [pc, #40]	; (8007174 <__libc_init_array+0x40>)
 800714c:	4d0a      	ldr	r5, [pc, #40]	; (8007178 <__libc_init_array+0x44>)
 800714e:	1b64      	subs	r4, r4, r5
 8007150:	10a4      	asrs	r4, r4, #2
 8007152:	42a6      	cmp	r6, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	00b3      	lsls	r3, r6, #2
 800715a:	58eb      	ldr	r3, [r5, r3]
 800715c:	4798      	blx	r3
 800715e:	3601      	adds	r6, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	00b3      	lsls	r3, r6, #2
 8007164:	58eb      	ldr	r3, [r5, r3]
 8007166:	4798      	blx	r3
 8007168:	3601      	adds	r6, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	0800af18 	.word	0x0800af18
 8007170:	0800af18 	.word	0x0800af18
 8007174:	0800af1c 	.word	0x0800af1c
 8007178:	0800af18 	.word	0x0800af18

0800717c <__retarget_lock_init_recursive>:
 800717c:	4770      	bx	lr

0800717e <__retarget_lock_acquire_recursive>:
 800717e:	4770      	bx	lr

08007180 <__retarget_lock_release_recursive>:
 8007180:	4770      	bx	lr

08007182 <memchr>:
 8007182:	b2c9      	uxtb	r1, r1
 8007184:	1882      	adds	r2, r0, r2
 8007186:	4290      	cmp	r0, r2
 8007188:	d101      	bne.n	800718e <memchr+0xc>
 800718a:	2000      	movs	r0, #0
 800718c:	4770      	bx	lr
 800718e:	7803      	ldrb	r3, [r0, #0]
 8007190:	428b      	cmp	r3, r1
 8007192:	d0fb      	beq.n	800718c <memchr+0xa>
 8007194:	3001      	adds	r0, #1
 8007196:	e7f6      	b.n	8007186 <memchr+0x4>

08007198 <nanf>:
 8007198:	4800      	ldr	r0, [pc, #0]	; (800719c <nanf+0x4>)
 800719a:	4770      	bx	lr
 800719c:	7fc00000 	.word	0x7fc00000

080071a0 <quorem>:
 80071a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a2:	6902      	ldr	r2, [r0, #16]
 80071a4:	690b      	ldr	r3, [r1, #16]
 80071a6:	b089      	sub	sp, #36	; 0x24
 80071a8:	0007      	movs	r7, r0
 80071aa:	9104      	str	r1, [sp, #16]
 80071ac:	2000      	movs	r0, #0
 80071ae:	429a      	cmp	r2, r3
 80071b0:	db69      	blt.n	8007286 <quorem+0xe6>
 80071b2:	3b01      	subs	r3, #1
 80071b4:	009c      	lsls	r4, r3, #2
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	000b      	movs	r3, r1
 80071ba:	3314      	adds	r3, #20
 80071bc:	9306      	str	r3, [sp, #24]
 80071be:	191b      	adds	r3, r3, r4
 80071c0:	9305      	str	r3, [sp, #20]
 80071c2:	003b      	movs	r3, r7
 80071c4:	3314      	adds	r3, #20
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	191c      	adds	r4, r3, r4
 80071ca:	9b05      	ldr	r3, [sp, #20]
 80071cc:	6826      	ldr	r6, [r4, #0]
 80071ce:	681d      	ldr	r5, [r3, #0]
 80071d0:	0030      	movs	r0, r6
 80071d2:	3501      	adds	r5, #1
 80071d4:	0029      	movs	r1, r5
 80071d6:	f7f8 ffb1 	bl	800013c <__udivsi3>
 80071da:	9002      	str	r0, [sp, #8]
 80071dc:	42ae      	cmp	r6, r5
 80071de:	d329      	bcc.n	8007234 <quorem+0x94>
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	2600      	movs	r6, #0
 80071e4:	469c      	mov	ip, r3
 80071e6:	9d03      	ldr	r5, [sp, #12]
 80071e8:	9606      	str	r6, [sp, #24]
 80071ea:	4662      	mov	r2, ip
 80071ec:	ca08      	ldmia	r2!, {r3}
 80071ee:	6828      	ldr	r0, [r5, #0]
 80071f0:	4694      	mov	ip, r2
 80071f2:	9a02      	ldr	r2, [sp, #8]
 80071f4:	b299      	uxth	r1, r3
 80071f6:	4351      	muls	r1, r2
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	4353      	muls	r3, r2
 80071fc:	1989      	adds	r1, r1, r6
 80071fe:	0c0a      	lsrs	r2, r1, #16
 8007200:	189b      	adds	r3, r3, r2
 8007202:	9307      	str	r3, [sp, #28]
 8007204:	0c1e      	lsrs	r6, r3, #16
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	b282      	uxth	r2, r0
 800720a:	18d2      	adds	r2, r2, r3
 800720c:	466b      	mov	r3, sp
 800720e:	b289      	uxth	r1, r1
 8007210:	8b9b      	ldrh	r3, [r3, #28]
 8007212:	1a52      	subs	r2, r2, r1
 8007214:	0c01      	lsrs	r1, r0, #16
 8007216:	1ac9      	subs	r1, r1, r3
 8007218:	1413      	asrs	r3, r2, #16
 800721a:	18cb      	adds	r3, r1, r3
 800721c:	1419      	asrs	r1, r3, #16
 800721e:	b292      	uxth	r2, r2
 8007220:	041b      	lsls	r3, r3, #16
 8007222:	4313      	orrs	r3, r2
 8007224:	c508      	stmia	r5!, {r3}
 8007226:	9b05      	ldr	r3, [sp, #20]
 8007228:	9106      	str	r1, [sp, #24]
 800722a:	4563      	cmp	r3, ip
 800722c:	d2dd      	bcs.n	80071ea <quorem+0x4a>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d030      	beq.n	8007296 <quorem+0xf6>
 8007234:	0038      	movs	r0, r7
 8007236:	9904      	ldr	r1, [sp, #16]
 8007238:	f001 fa2a 	bl	8008690 <__mcmp>
 800723c:	2800      	cmp	r0, #0
 800723e:	db21      	blt.n	8007284 <quorem+0xe4>
 8007240:	0038      	movs	r0, r7
 8007242:	2600      	movs	r6, #0
 8007244:	9b02      	ldr	r3, [sp, #8]
 8007246:	9c04      	ldr	r4, [sp, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	9302      	str	r3, [sp, #8]
 800724c:	3014      	adds	r0, #20
 800724e:	3414      	adds	r4, #20
 8007250:	6803      	ldr	r3, [r0, #0]
 8007252:	cc02      	ldmia	r4!, {r1}
 8007254:	b29d      	uxth	r5, r3
 8007256:	19ad      	adds	r5, r5, r6
 8007258:	b28a      	uxth	r2, r1
 800725a:	1aaa      	subs	r2, r5, r2
 800725c:	0c09      	lsrs	r1, r1, #16
 800725e:	0c1b      	lsrs	r3, r3, #16
 8007260:	1a5b      	subs	r3, r3, r1
 8007262:	1411      	asrs	r1, r2, #16
 8007264:	185b      	adds	r3, r3, r1
 8007266:	141e      	asrs	r6, r3, #16
 8007268:	b292      	uxth	r2, r2
 800726a:	041b      	lsls	r3, r3, #16
 800726c:	4313      	orrs	r3, r2
 800726e:	c008      	stmia	r0!, {r3}
 8007270:	9b05      	ldr	r3, [sp, #20]
 8007272:	42a3      	cmp	r3, r4
 8007274:	d2ec      	bcs.n	8007250 <quorem+0xb0>
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	9a03      	ldr	r2, [sp, #12]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	18d3      	adds	r3, r2, r3
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	2a00      	cmp	r2, #0
 8007282:	d015      	beq.n	80072b0 <quorem+0x110>
 8007284:	9802      	ldr	r0, [sp, #8]
 8007286:	b009      	add	sp, #36	; 0x24
 8007288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <quorem+0xfe>
 8007290:	9b01      	ldr	r3, [sp, #4]
 8007292:	3b01      	subs	r3, #1
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	3c04      	subs	r4, #4
 800729a:	42a3      	cmp	r3, r4
 800729c:	d3f5      	bcc.n	800728a <quorem+0xea>
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	e7c7      	b.n	8007234 <quorem+0x94>
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d106      	bne.n	80072b8 <quorem+0x118>
 80072aa:	9a01      	ldr	r2, [sp, #4]
 80072ac:	3a01      	subs	r2, #1
 80072ae:	9201      	str	r2, [sp, #4]
 80072b0:	9a03      	ldr	r2, [sp, #12]
 80072b2:	3b04      	subs	r3, #4
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d3f5      	bcc.n	80072a4 <quorem+0x104>
 80072b8:	9b01      	ldr	r3, [sp, #4]
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	e7e2      	b.n	8007284 <quorem+0xe4>
	...

080072c0 <_dtoa_r>:
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c2:	0014      	movs	r4, r2
 80072c4:	001d      	movs	r5, r3
 80072c6:	69c6      	ldr	r6, [r0, #28]
 80072c8:	b09d      	sub	sp, #116	; 0x74
 80072ca:	9408      	str	r4, [sp, #32]
 80072cc:	9509      	str	r5, [sp, #36]	; 0x24
 80072ce:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80072d0:	9004      	str	r0, [sp, #16]
 80072d2:	2e00      	cmp	r6, #0
 80072d4:	d10f      	bne.n	80072f6 <_dtoa_r+0x36>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f000 fe4a 	bl	8007f70 <malloc>
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	1e02      	subs	r2, r0, #0
 80072e0:	61d8      	str	r0, [r3, #28]
 80072e2:	d104      	bne.n	80072ee <_dtoa_r+0x2e>
 80072e4:	21ef      	movs	r1, #239	; 0xef
 80072e6:	4bc6      	ldr	r3, [pc, #792]	; (8007600 <_dtoa_r+0x340>)
 80072e8:	48c6      	ldr	r0, [pc, #792]	; (8007604 <_dtoa_r+0x344>)
 80072ea:	f002 fccd 	bl	8009c88 <__assert_func>
 80072ee:	6046      	str	r6, [r0, #4]
 80072f0:	6086      	str	r6, [r0, #8]
 80072f2:	6006      	str	r6, [r0, #0]
 80072f4:	60c6      	str	r6, [r0, #12]
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	6819      	ldr	r1, [r3, #0]
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d00b      	beq.n	8007318 <_dtoa_r+0x58>
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	2301      	movs	r3, #1
 8007304:	4093      	lsls	r3, r2
 8007306:	604a      	str	r2, [r1, #4]
 8007308:	608b      	str	r3, [r1, #8]
 800730a:	9804      	ldr	r0, [sp, #16]
 800730c:	f000 ff32 	bl	8008174 <_Bfree>
 8007310:	2200      	movs	r2, #0
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	2d00      	cmp	r5, #0
 800731a:	da1e      	bge.n	800735a <_dtoa_r+0x9a>
 800731c:	2301      	movs	r3, #1
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	006b      	lsls	r3, r5, #1
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	9309      	str	r3, [sp, #36]	; 0x24
 8007326:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007328:	4bb7      	ldr	r3, [pc, #732]	; (8007608 <_dtoa_r+0x348>)
 800732a:	4ab7      	ldr	r2, [pc, #732]	; (8007608 <_dtoa_r+0x348>)
 800732c:	403b      	ands	r3, r7
 800732e:	4293      	cmp	r3, r2
 8007330:	d116      	bne.n	8007360 <_dtoa_r+0xa0>
 8007332:	4bb6      	ldr	r3, [pc, #728]	; (800760c <_dtoa_r+0x34c>)
 8007334:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	033b      	lsls	r3, r7, #12
 800733a:	0b1b      	lsrs	r3, r3, #12
 800733c:	4323      	orrs	r3, r4
 800733e:	d101      	bne.n	8007344 <_dtoa_r+0x84>
 8007340:	f000 fdb5 	bl	8007eae <_dtoa_r+0xbee>
 8007344:	4bb2      	ldr	r3, [pc, #712]	; (8007610 <_dtoa_r+0x350>)
 8007346:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007348:	9306      	str	r3, [sp, #24]
 800734a:	2a00      	cmp	r2, #0
 800734c:	d002      	beq.n	8007354 <_dtoa_r+0x94>
 800734e:	4bb1      	ldr	r3, [pc, #708]	; (8007614 <_dtoa_r+0x354>)
 8007350:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	9806      	ldr	r0, [sp, #24]
 8007356:	b01d      	add	sp, #116	; 0x74
 8007358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735a:	2300      	movs	r3, #0
 800735c:	603b      	str	r3, [r7, #0]
 800735e:	e7e2      	b.n	8007326 <_dtoa_r+0x66>
 8007360:	9a08      	ldr	r2, [sp, #32]
 8007362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007364:	9210      	str	r2, [sp, #64]	; 0x40
 8007366:	9311      	str	r3, [sp, #68]	; 0x44
 8007368:	9810      	ldr	r0, [sp, #64]	; 0x40
 800736a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	f7f9 f86a 	bl	8000448 <__aeabi_dcmpeq>
 8007374:	1e06      	subs	r6, r0, #0
 8007376:	d009      	beq.n	800738c <_dtoa_r+0xcc>
 8007378:	2301      	movs	r3, #1
 800737a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	4ba6      	ldr	r3, [pc, #664]	; (8007618 <_dtoa_r+0x358>)
 8007380:	9306      	str	r3, [sp, #24]
 8007382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0e5      	beq.n	8007354 <_dtoa_r+0x94>
 8007388:	4ba4      	ldr	r3, [pc, #656]	; (800761c <_dtoa_r+0x35c>)
 800738a:	e7e1      	b.n	8007350 <_dtoa_r+0x90>
 800738c:	ab1a      	add	r3, sp, #104	; 0x68
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	ab1b      	add	r3, sp, #108	; 0x6c
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	9804      	ldr	r0, [sp, #16]
 8007396:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800739a:	f001 fa95 	bl	80088c8 <__d2b>
 800739e:	007a      	lsls	r2, r7, #1
 80073a0:	9005      	str	r0, [sp, #20]
 80073a2:	0d52      	lsrs	r2, r2, #21
 80073a4:	d100      	bne.n	80073a8 <_dtoa_r+0xe8>
 80073a6:	e07b      	b.n	80074a0 <_dtoa_r+0x1e0>
 80073a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073aa:	9617      	str	r6, [sp, #92]	; 0x5c
 80073ac:	0319      	lsls	r1, r3, #12
 80073ae:	4b9c      	ldr	r3, [pc, #624]	; (8007620 <_dtoa_r+0x360>)
 80073b0:	0b09      	lsrs	r1, r1, #12
 80073b2:	430b      	orrs	r3, r1
 80073b4:	499b      	ldr	r1, [pc, #620]	; (8007624 <_dtoa_r+0x364>)
 80073b6:	1857      	adds	r7, r2, r1
 80073b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80073ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80073bc:	0019      	movs	r1, r3
 80073be:	2200      	movs	r2, #0
 80073c0:	4b99      	ldr	r3, [pc, #612]	; (8007628 <_dtoa_r+0x368>)
 80073c2:	f7fa fce3 	bl	8001d8c <__aeabi_dsub>
 80073c6:	4a99      	ldr	r2, [pc, #612]	; (800762c <_dtoa_r+0x36c>)
 80073c8:	4b99      	ldr	r3, [pc, #612]	; (8007630 <_dtoa_r+0x370>)
 80073ca:	f7fa fa1d 	bl	8001808 <__aeabi_dmul>
 80073ce:	4a99      	ldr	r2, [pc, #612]	; (8007634 <_dtoa_r+0x374>)
 80073d0:	4b99      	ldr	r3, [pc, #612]	; (8007638 <_dtoa_r+0x378>)
 80073d2:	f7f9 fabf 	bl	8000954 <__aeabi_dadd>
 80073d6:	0004      	movs	r4, r0
 80073d8:	0038      	movs	r0, r7
 80073da:	000d      	movs	r5, r1
 80073dc:	f7fb f8ac 	bl	8002538 <__aeabi_i2d>
 80073e0:	4a96      	ldr	r2, [pc, #600]	; (800763c <_dtoa_r+0x37c>)
 80073e2:	4b97      	ldr	r3, [pc, #604]	; (8007640 <_dtoa_r+0x380>)
 80073e4:	f7fa fa10 	bl	8001808 <__aeabi_dmul>
 80073e8:	0002      	movs	r2, r0
 80073ea:	000b      	movs	r3, r1
 80073ec:	0020      	movs	r0, r4
 80073ee:	0029      	movs	r1, r5
 80073f0:	f7f9 fab0 	bl	8000954 <__aeabi_dadd>
 80073f4:	0004      	movs	r4, r0
 80073f6:	000d      	movs	r5, r1
 80073f8:	f7fb f868 	bl	80024cc <__aeabi_d2iz>
 80073fc:	2200      	movs	r2, #0
 80073fe:	9003      	str	r0, [sp, #12]
 8007400:	2300      	movs	r3, #0
 8007402:	0020      	movs	r0, r4
 8007404:	0029      	movs	r1, r5
 8007406:	f7f9 f825 	bl	8000454 <__aeabi_dcmplt>
 800740a:	2800      	cmp	r0, #0
 800740c:	d00b      	beq.n	8007426 <_dtoa_r+0x166>
 800740e:	9803      	ldr	r0, [sp, #12]
 8007410:	f7fb f892 	bl	8002538 <__aeabi_i2d>
 8007414:	002b      	movs	r3, r5
 8007416:	0022      	movs	r2, r4
 8007418:	f7f9 f816 	bl	8000448 <__aeabi_dcmpeq>
 800741c:	4243      	negs	r3, r0
 800741e:	4158      	adcs	r0, r3
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	1a1b      	subs	r3, r3, r0
 8007424:	9303      	str	r3, [sp, #12]
 8007426:	2301      	movs	r3, #1
 8007428:	9316      	str	r3, [sp, #88]	; 0x58
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	2b16      	cmp	r3, #22
 800742e:	d810      	bhi.n	8007452 <_dtoa_r+0x192>
 8007430:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007432:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007434:	9a03      	ldr	r2, [sp, #12]
 8007436:	4b83      	ldr	r3, [pc, #524]	; (8007644 <_dtoa_r+0x384>)
 8007438:	00d2      	lsls	r2, r2, #3
 800743a:	189b      	adds	r3, r3, r2
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f7f9 f808 	bl	8000454 <__aeabi_dcmplt>
 8007444:	2800      	cmp	r0, #0
 8007446:	d047      	beq.n	80074d8 <_dtoa_r+0x218>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	3b01      	subs	r3, #1
 800744c:	9303      	str	r3, [sp, #12]
 800744e:	2300      	movs	r3, #0
 8007450:	9316      	str	r3, [sp, #88]	; 0x58
 8007452:	2200      	movs	r2, #0
 8007454:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007456:	920a      	str	r2, [sp, #40]	; 0x28
 8007458:	1bdb      	subs	r3, r3, r7
 800745a:	1e5a      	subs	r2, r3, #1
 800745c:	d53e      	bpl.n	80074dc <_dtoa_r+0x21c>
 800745e:	2201      	movs	r2, #1
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	930a      	str	r3, [sp, #40]	; 0x28
 8007464:	2300      	movs	r3, #0
 8007466:	930c      	str	r3, [sp, #48]	; 0x30
 8007468:	9b03      	ldr	r3, [sp, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	db38      	blt.n	80074e0 <_dtoa_r+0x220>
 800746e:	9a03      	ldr	r2, [sp, #12]
 8007470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007472:	4694      	mov	ip, r2
 8007474:	4463      	add	r3, ip
 8007476:	930c      	str	r3, [sp, #48]	; 0x30
 8007478:	2300      	movs	r3, #0
 800747a:	9213      	str	r2, [sp, #76]	; 0x4c
 800747c:	930d      	str	r3, [sp, #52]	; 0x34
 800747e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007480:	2401      	movs	r4, #1
 8007482:	2b09      	cmp	r3, #9
 8007484:	d867      	bhi.n	8007556 <_dtoa_r+0x296>
 8007486:	2b05      	cmp	r3, #5
 8007488:	dd02      	ble.n	8007490 <_dtoa_r+0x1d0>
 800748a:	2400      	movs	r4, #0
 800748c:	3b04      	subs	r3, #4
 800748e:	9322      	str	r3, [sp, #136]	; 0x88
 8007490:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007492:	1e98      	subs	r0, r3, #2
 8007494:	2803      	cmp	r0, #3
 8007496:	d867      	bhi.n	8007568 <_dtoa_r+0x2a8>
 8007498:	f7f8 fe3c 	bl	8000114 <__gnu_thumb1_case_uqi>
 800749c:	5b383a2b 	.word	0x5b383a2b
 80074a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074a2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80074a4:	18f6      	adds	r6, r6, r3
 80074a6:	4b68      	ldr	r3, [pc, #416]	; (8007648 <_dtoa_r+0x388>)
 80074a8:	18f2      	adds	r2, r6, r3
 80074aa:	2a20      	cmp	r2, #32
 80074ac:	dd0f      	ble.n	80074ce <_dtoa_r+0x20e>
 80074ae:	2340      	movs	r3, #64	; 0x40
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	409f      	lsls	r7, r3
 80074b4:	4b65      	ldr	r3, [pc, #404]	; (800764c <_dtoa_r+0x38c>)
 80074b6:	0038      	movs	r0, r7
 80074b8:	18f3      	adds	r3, r6, r3
 80074ba:	40dc      	lsrs	r4, r3
 80074bc:	4320      	orrs	r0, r4
 80074be:	f7fb f86b 	bl	8002598 <__aeabi_ui2d>
 80074c2:	2201      	movs	r2, #1
 80074c4:	4b62      	ldr	r3, [pc, #392]	; (8007650 <_dtoa_r+0x390>)
 80074c6:	1e77      	subs	r7, r6, #1
 80074c8:	18cb      	adds	r3, r1, r3
 80074ca:	9217      	str	r2, [sp, #92]	; 0x5c
 80074cc:	e776      	b.n	80073bc <_dtoa_r+0xfc>
 80074ce:	2320      	movs	r3, #32
 80074d0:	0020      	movs	r0, r4
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	4098      	lsls	r0, r3
 80074d6:	e7f2      	b.n	80074be <_dtoa_r+0x1fe>
 80074d8:	9016      	str	r0, [sp, #88]	; 0x58
 80074da:	e7ba      	b.n	8007452 <_dtoa_r+0x192>
 80074dc:	920c      	str	r2, [sp, #48]	; 0x30
 80074de:	e7c3      	b.n	8007468 <_dtoa_r+0x1a8>
 80074e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e2:	9a03      	ldr	r2, [sp, #12]
 80074e4:	1a9b      	subs	r3, r3, r2
 80074e6:	930a      	str	r3, [sp, #40]	; 0x28
 80074e8:	4253      	negs	r3, r2
 80074ea:	930d      	str	r3, [sp, #52]	; 0x34
 80074ec:	2300      	movs	r3, #0
 80074ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80074f0:	e7c5      	b.n	800747e <_dtoa_r+0x1be>
 80074f2:	2300      	movs	r3, #0
 80074f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074fa:	9307      	str	r3, [sp, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	dc13      	bgt.n	8007528 <_dtoa_r+0x268>
 8007500:	2301      	movs	r3, #1
 8007502:	001a      	movs	r2, r3
 8007504:	930b      	str	r3, [sp, #44]	; 0x2c
 8007506:	9307      	str	r3, [sp, #28]
 8007508:	9223      	str	r2, [sp, #140]	; 0x8c
 800750a:	e00d      	b.n	8007528 <_dtoa_r+0x268>
 800750c:	2301      	movs	r3, #1
 800750e:	e7f1      	b.n	80074f4 <_dtoa_r+0x234>
 8007510:	2300      	movs	r3, #0
 8007512:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007514:	930f      	str	r3, [sp, #60]	; 0x3c
 8007516:	4694      	mov	ip, r2
 8007518:	9b03      	ldr	r3, [sp, #12]
 800751a:	4463      	add	r3, ip
 800751c:	930b      	str	r3, [sp, #44]	; 0x2c
 800751e:	3301      	adds	r3, #1
 8007520:	9307      	str	r3, [sp, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	dc00      	bgt.n	8007528 <_dtoa_r+0x268>
 8007526:	2301      	movs	r3, #1
 8007528:	9a04      	ldr	r2, [sp, #16]
 800752a:	2100      	movs	r1, #0
 800752c:	69d0      	ldr	r0, [r2, #28]
 800752e:	2204      	movs	r2, #4
 8007530:	0015      	movs	r5, r2
 8007532:	3514      	adds	r5, #20
 8007534:	429d      	cmp	r5, r3
 8007536:	d91b      	bls.n	8007570 <_dtoa_r+0x2b0>
 8007538:	6041      	str	r1, [r0, #4]
 800753a:	9804      	ldr	r0, [sp, #16]
 800753c:	f000 fdd6 	bl	80080ec <_Balloc>
 8007540:	9006      	str	r0, [sp, #24]
 8007542:	2800      	cmp	r0, #0
 8007544:	d117      	bne.n	8007576 <_dtoa_r+0x2b6>
 8007546:	21b0      	movs	r1, #176	; 0xb0
 8007548:	4b42      	ldr	r3, [pc, #264]	; (8007654 <_dtoa_r+0x394>)
 800754a:	482e      	ldr	r0, [pc, #184]	; (8007604 <_dtoa_r+0x344>)
 800754c:	9a06      	ldr	r2, [sp, #24]
 800754e:	31ff      	adds	r1, #255	; 0xff
 8007550:	e6cb      	b.n	80072ea <_dtoa_r+0x2a>
 8007552:	2301      	movs	r3, #1
 8007554:	e7dd      	b.n	8007512 <_dtoa_r+0x252>
 8007556:	2300      	movs	r3, #0
 8007558:	940f      	str	r4, [sp, #60]	; 0x3c
 800755a:	9322      	str	r3, [sp, #136]	; 0x88
 800755c:	3b01      	subs	r3, #1
 800755e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007560:	9307      	str	r3, [sp, #28]
 8007562:	2200      	movs	r2, #0
 8007564:	3313      	adds	r3, #19
 8007566:	e7cf      	b.n	8007508 <_dtoa_r+0x248>
 8007568:	2301      	movs	r3, #1
 800756a:	930f      	str	r3, [sp, #60]	; 0x3c
 800756c:	3b02      	subs	r3, #2
 800756e:	e7f6      	b.n	800755e <_dtoa_r+0x29e>
 8007570:	3101      	adds	r1, #1
 8007572:	0052      	lsls	r2, r2, #1
 8007574:	e7dc      	b.n	8007530 <_dtoa_r+0x270>
 8007576:	9b04      	ldr	r3, [sp, #16]
 8007578:	9a06      	ldr	r2, [sp, #24]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	9b07      	ldr	r3, [sp, #28]
 8007580:	2b0e      	cmp	r3, #14
 8007582:	d900      	bls.n	8007586 <_dtoa_r+0x2c6>
 8007584:	e0e5      	b.n	8007752 <_dtoa_r+0x492>
 8007586:	2c00      	cmp	r4, #0
 8007588:	d100      	bne.n	800758c <_dtoa_r+0x2cc>
 800758a:	e0e2      	b.n	8007752 <_dtoa_r+0x492>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	dd64      	ble.n	800765c <_dtoa_r+0x39c>
 8007592:	210f      	movs	r1, #15
 8007594:	9a03      	ldr	r2, [sp, #12]
 8007596:	4b2b      	ldr	r3, [pc, #172]	; (8007644 <_dtoa_r+0x384>)
 8007598:	400a      	ands	r2, r1
 800759a:	00d2      	lsls	r2, r2, #3
 800759c:	189b      	adds	r3, r3, r2
 800759e:	681e      	ldr	r6, [r3, #0]
 80075a0:	685f      	ldr	r7, [r3, #4]
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	2402      	movs	r4, #2
 80075a6:	111d      	asrs	r5, r3, #4
 80075a8:	05db      	lsls	r3, r3, #23
 80075aa:	d50a      	bpl.n	80075c2 <_dtoa_r+0x302>
 80075ac:	4b2a      	ldr	r3, [pc, #168]	; (8007658 <_dtoa_r+0x398>)
 80075ae:	400d      	ands	r5, r1
 80075b0:	6a1a      	ldr	r2, [r3, #32]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075b8:	f7f9 fd2c 	bl	8001014 <__aeabi_ddiv>
 80075bc:	9008      	str	r0, [sp, #32]
 80075be:	9109      	str	r1, [sp, #36]	; 0x24
 80075c0:	3401      	adds	r4, #1
 80075c2:	4b25      	ldr	r3, [pc, #148]	; (8007658 <_dtoa_r+0x398>)
 80075c4:	930e      	str	r3, [sp, #56]	; 0x38
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	d108      	bne.n	80075dc <_dtoa_r+0x31c>
 80075ca:	9808      	ldr	r0, [sp, #32]
 80075cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ce:	0032      	movs	r2, r6
 80075d0:	003b      	movs	r3, r7
 80075d2:	f7f9 fd1f 	bl	8001014 <__aeabi_ddiv>
 80075d6:	9008      	str	r0, [sp, #32]
 80075d8:	9109      	str	r1, [sp, #36]	; 0x24
 80075da:	e05a      	b.n	8007692 <_dtoa_r+0x3d2>
 80075dc:	2301      	movs	r3, #1
 80075de:	421d      	tst	r5, r3
 80075e0:	d009      	beq.n	80075f6 <_dtoa_r+0x336>
 80075e2:	18e4      	adds	r4, r4, r3
 80075e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e6:	0030      	movs	r0, r6
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	0039      	movs	r1, r7
 80075ee:	f7fa f90b 	bl	8001808 <__aeabi_dmul>
 80075f2:	0006      	movs	r6, r0
 80075f4:	000f      	movs	r7, r1
 80075f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f8:	106d      	asrs	r5, r5, #1
 80075fa:	3308      	adds	r3, #8
 80075fc:	e7e2      	b.n	80075c4 <_dtoa_r+0x304>
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	0800ab36 	.word	0x0800ab36
 8007604:	0800ab4d 	.word	0x0800ab4d
 8007608:	7ff00000 	.word	0x7ff00000
 800760c:	0000270f 	.word	0x0000270f
 8007610:	0800ab32 	.word	0x0800ab32
 8007614:	0800ab35 	.word	0x0800ab35
 8007618:	0800ab00 	.word	0x0800ab00
 800761c:	0800ab01 	.word	0x0800ab01
 8007620:	3ff00000 	.word	0x3ff00000
 8007624:	fffffc01 	.word	0xfffffc01
 8007628:	3ff80000 	.word	0x3ff80000
 800762c:	636f4361 	.word	0x636f4361
 8007630:	3fd287a7 	.word	0x3fd287a7
 8007634:	8b60c8b3 	.word	0x8b60c8b3
 8007638:	3fc68a28 	.word	0x3fc68a28
 800763c:	509f79fb 	.word	0x509f79fb
 8007640:	3fd34413 	.word	0x3fd34413
 8007644:	0800ac38 	.word	0x0800ac38
 8007648:	00000432 	.word	0x00000432
 800764c:	00000412 	.word	0x00000412
 8007650:	fe100000 	.word	0xfe100000
 8007654:	0800aba5 	.word	0x0800aba5
 8007658:	0800ac10 	.word	0x0800ac10
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	2402      	movs	r4, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d016      	beq.n	8007692 <_dtoa_r+0x3d2>
 8007664:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007666:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007668:	220f      	movs	r2, #15
 800766a:	425d      	negs	r5, r3
 800766c:	402a      	ands	r2, r5
 800766e:	4bdd      	ldr	r3, [pc, #884]	; (80079e4 <_dtoa_r+0x724>)
 8007670:	00d2      	lsls	r2, r2, #3
 8007672:	189b      	adds	r3, r3, r2
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f7fa f8c6 	bl	8001808 <__aeabi_dmul>
 800767c:	2701      	movs	r7, #1
 800767e:	2300      	movs	r3, #0
 8007680:	9008      	str	r0, [sp, #32]
 8007682:	9109      	str	r1, [sp, #36]	; 0x24
 8007684:	4ed8      	ldr	r6, [pc, #864]	; (80079e8 <_dtoa_r+0x728>)
 8007686:	112d      	asrs	r5, r5, #4
 8007688:	2d00      	cmp	r5, #0
 800768a:	d000      	beq.n	800768e <_dtoa_r+0x3ce>
 800768c:	e091      	b.n	80077b2 <_dtoa_r+0x4f2>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1a1      	bne.n	80075d6 <_dtoa_r+0x316>
 8007692:	9e08      	ldr	r6, [sp, #32]
 8007694:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007696:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007698:	2b00      	cmp	r3, #0
 800769a:	d100      	bne.n	800769e <_dtoa_r+0x3de>
 800769c:	e094      	b.n	80077c8 <_dtoa_r+0x508>
 800769e:	2200      	movs	r2, #0
 80076a0:	0030      	movs	r0, r6
 80076a2:	0039      	movs	r1, r7
 80076a4:	4bd1      	ldr	r3, [pc, #836]	; (80079ec <_dtoa_r+0x72c>)
 80076a6:	f7f8 fed5 	bl	8000454 <__aeabi_dcmplt>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d100      	bne.n	80076b0 <_dtoa_r+0x3f0>
 80076ae:	e08b      	b.n	80077c8 <_dtoa_r+0x508>
 80076b0:	9b07      	ldr	r3, [sp, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d100      	bne.n	80076b8 <_dtoa_r+0x3f8>
 80076b6:	e087      	b.n	80077c8 <_dtoa_r+0x508>
 80076b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dd45      	ble.n	800774a <_dtoa_r+0x48a>
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	3b01      	subs	r3, #1
 80076c4:	930e      	str	r3, [sp, #56]	; 0x38
 80076c6:	0030      	movs	r0, r6
 80076c8:	4bc9      	ldr	r3, [pc, #804]	; (80079f0 <_dtoa_r+0x730>)
 80076ca:	0039      	movs	r1, r7
 80076cc:	f7fa f89c 	bl	8001808 <__aeabi_dmul>
 80076d0:	9008      	str	r0, [sp, #32]
 80076d2:	9109      	str	r1, [sp, #36]	; 0x24
 80076d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d6:	3401      	adds	r4, #1
 80076d8:	0020      	movs	r0, r4
 80076da:	9e08      	ldr	r6, [sp, #32]
 80076dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80076de:	9312      	str	r3, [sp, #72]	; 0x48
 80076e0:	f7fa ff2a 	bl	8002538 <__aeabi_i2d>
 80076e4:	0032      	movs	r2, r6
 80076e6:	003b      	movs	r3, r7
 80076e8:	f7fa f88e 	bl	8001808 <__aeabi_dmul>
 80076ec:	2200      	movs	r2, #0
 80076ee:	4bc1      	ldr	r3, [pc, #772]	; (80079f4 <_dtoa_r+0x734>)
 80076f0:	f7f9 f930 	bl	8000954 <__aeabi_dadd>
 80076f4:	4ac0      	ldr	r2, [pc, #768]	; (80079f8 <_dtoa_r+0x738>)
 80076f6:	9014      	str	r0, [sp, #80]	; 0x50
 80076f8:	9115      	str	r1, [sp, #84]	; 0x54
 80076fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80076fe:	4694      	mov	ip, r2
 8007700:	9308      	str	r3, [sp, #32]
 8007702:	9409      	str	r4, [sp, #36]	; 0x24
 8007704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007706:	4463      	add	r3, ip
 8007708:	9318      	str	r3, [sp, #96]	; 0x60
 800770a:	9309      	str	r3, [sp, #36]	; 0x24
 800770c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800770e:	2b00      	cmp	r3, #0
 8007710:	d15e      	bne.n	80077d0 <_dtoa_r+0x510>
 8007712:	2200      	movs	r2, #0
 8007714:	4bb9      	ldr	r3, [pc, #740]	; (80079fc <_dtoa_r+0x73c>)
 8007716:	0030      	movs	r0, r6
 8007718:	0039      	movs	r1, r7
 800771a:	f7fa fb37 	bl	8001d8c <__aeabi_dsub>
 800771e:	9a08      	ldr	r2, [sp, #32]
 8007720:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007722:	0004      	movs	r4, r0
 8007724:	000d      	movs	r5, r1
 8007726:	f7f8 fea9 	bl	800047c <__aeabi_dcmpgt>
 800772a:	2800      	cmp	r0, #0
 800772c:	d000      	beq.n	8007730 <_dtoa_r+0x470>
 800772e:	e2b3      	b.n	8007c98 <_dtoa_r+0x9d8>
 8007730:	48b3      	ldr	r0, [pc, #716]	; (8007a00 <_dtoa_r+0x740>)
 8007732:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007734:	4684      	mov	ip, r0
 8007736:	4461      	add	r1, ip
 8007738:	000b      	movs	r3, r1
 800773a:	0020      	movs	r0, r4
 800773c:	0029      	movs	r1, r5
 800773e:	9a08      	ldr	r2, [sp, #32]
 8007740:	f7f8 fe88 	bl	8000454 <__aeabi_dcmplt>
 8007744:	2800      	cmp	r0, #0
 8007746:	d000      	beq.n	800774a <_dtoa_r+0x48a>
 8007748:	e2a3      	b.n	8007c92 <_dtoa_r+0x9d2>
 800774a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800774c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800774e:	9308      	str	r3, [sp, #32]
 8007750:	9409      	str	r4, [sp, #36]	; 0x24
 8007752:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007754:	2b00      	cmp	r3, #0
 8007756:	da00      	bge.n	800775a <_dtoa_r+0x49a>
 8007758:	e179      	b.n	8007a4e <_dtoa_r+0x78e>
 800775a:	9a03      	ldr	r2, [sp, #12]
 800775c:	2a0e      	cmp	r2, #14
 800775e:	dd00      	ble.n	8007762 <_dtoa_r+0x4a2>
 8007760:	e175      	b.n	8007a4e <_dtoa_r+0x78e>
 8007762:	4ba0      	ldr	r3, [pc, #640]	; (80079e4 <_dtoa_r+0x724>)
 8007764:	00d2      	lsls	r2, r2, #3
 8007766:	189b      	adds	r3, r3, r2
 8007768:	681e      	ldr	r6, [r3, #0]
 800776a:	685f      	ldr	r7, [r3, #4]
 800776c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800776e:	2b00      	cmp	r3, #0
 8007770:	db00      	blt.n	8007774 <_dtoa_r+0x4b4>
 8007772:	e0e5      	b.n	8007940 <_dtoa_r+0x680>
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	2b00      	cmp	r3, #0
 8007778:	dd00      	ble.n	800777c <_dtoa_r+0x4bc>
 800777a:	e0e1      	b.n	8007940 <_dtoa_r+0x680>
 800777c:	d000      	beq.n	8007780 <_dtoa_r+0x4c0>
 800777e:	e288      	b.n	8007c92 <_dtoa_r+0x9d2>
 8007780:	2200      	movs	r2, #0
 8007782:	0030      	movs	r0, r6
 8007784:	0039      	movs	r1, r7
 8007786:	4b9d      	ldr	r3, [pc, #628]	; (80079fc <_dtoa_r+0x73c>)
 8007788:	f7fa f83e 	bl	8001808 <__aeabi_dmul>
 800778c:	9a08      	ldr	r2, [sp, #32]
 800778e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007790:	f7f8 fe7e 	bl	8000490 <__aeabi_dcmpge>
 8007794:	9e07      	ldr	r6, [sp, #28]
 8007796:	0037      	movs	r7, r6
 8007798:	2800      	cmp	r0, #0
 800779a:	d000      	beq.n	800779e <_dtoa_r+0x4de>
 800779c:	e25f      	b.n	8007c5e <_dtoa_r+0x99e>
 800779e:	9b06      	ldr	r3, [sp, #24]
 80077a0:	9a06      	ldr	r2, [sp, #24]
 80077a2:	3301      	adds	r3, #1
 80077a4:	9308      	str	r3, [sp, #32]
 80077a6:	2331      	movs	r3, #49	; 0x31
 80077a8:	7013      	strb	r3, [r2, #0]
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	3301      	adds	r3, #1
 80077ae:	9303      	str	r3, [sp, #12]
 80077b0:	e25a      	b.n	8007c68 <_dtoa_r+0x9a8>
 80077b2:	423d      	tst	r5, r7
 80077b4:	d005      	beq.n	80077c2 <_dtoa_r+0x502>
 80077b6:	6832      	ldr	r2, [r6, #0]
 80077b8:	6873      	ldr	r3, [r6, #4]
 80077ba:	f7fa f825 	bl	8001808 <__aeabi_dmul>
 80077be:	003b      	movs	r3, r7
 80077c0:	3401      	adds	r4, #1
 80077c2:	106d      	asrs	r5, r5, #1
 80077c4:	3608      	adds	r6, #8
 80077c6:	e75f      	b.n	8007688 <_dtoa_r+0x3c8>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	930e      	str	r3, [sp, #56]	; 0x38
 80077cc:	9b07      	ldr	r3, [sp, #28]
 80077ce:	e783      	b.n	80076d8 <_dtoa_r+0x418>
 80077d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077d2:	4b84      	ldr	r3, [pc, #528]	; (80079e4 <_dtoa_r+0x724>)
 80077d4:	3a01      	subs	r2, #1
 80077d6:	00d2      	lsls	r2, r2, #3
 80077d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077da:	189b      	adds	r3, r3, r2
 80077dc:	9c08      	ldr	r4, [sp, #32]
 80077de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2900      	cmp	r1, #0
 80077e6:	d051      	beq.n	800788c <_dtoa_r+0x5cc>
 80077e8:	2000      	movs	r0, #0
 80077ea:	4986      	ldr	r1, [pc, #536]	; (8007a04 <_dtoa_r+0x744>)
 80077ec:	f7f9 fc12 	bl	8001014 <__aeabi_ddiv>
 80077f0:	0022      	movs	r2, r4
 80077f2:	002b      	movs	r3, r5
 80077f4:	f7fa faca 	bl	8001d8c <__aeabi_dsub>
 80077f8:	9a06      	ldr	r2, [sp, #24]
 80077fa:	0004      	movs	r4, r0
 80077fc:	4694      	mov	ip, r2
 80077fe:	000d      	movs	r5, r1
 8007800:	9b06      	ldr	r3, [sp, #24]
 8007802:	9314      	str	r3, [sp, #80]	; 0x50
 8007804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007806:	4463      	add	r3, ip
 8007808:	9318      	str	r3, [sp, #96]	; 0x60
 800780a:	0039      	movs	r1, r7
 800780c:	0030      	movs	r0, r6
 800780e:	f7fa fe5d 	bl	80024cc <__aeabi_d2iz>
 8007812:	9012      	str	r0, [sp, #72]	; 0x48
 8007814:	f7fa fe90 	bl	8002538 <__aeabi_i2d>
 8007818:	0002      	movs	r2, r0
 800781a:	000b      	movs	r3, r1
 800781c:	0030      	movs	r0, r6
 800781e:	0039      	movs	r1, r7
 8007820:	f7fa fab4 	bl	8001d8c <__aeabi_dsub>
 8007824:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007826:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007828:	3301      	adds	r3, #1
 800782a:	9308      	str	r3, [sp, #32]
 800782c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800782e:	0006      	movs	r6, r0
 8007830:	3330      	adds	r3, #48	; 0x30
 8007832:	7013      	strb	r3, [r2, #0]
 8007834:	0022      	movs	r2, r4
 8007836:	002b      	movs	r3, r5
 8007838:	000f      	movs	r7, r1
 800783a:	f7f8 fe0b 	bl	8000454 <__aeabi_dcmplt>
 800783e:	2800      	cmp	r0, #0
 8007840:	d174      	bne.n	800792c <_dtoa_r+0x66c>
 8007842:	0032      	movs	r2, r6
 8007844:	003b      	movs	r3, r7
 8007846:	2000      	movs	r0, #0
 8007848:	4968      	ldr	r1, [pc, #416]	; (80079ec <_dtoa_r+0x72c>)
 800784a:	f7fa fa9f 	bl	8001d8c <__aeabi_dsub>
 800784e:	0022      	movs	r2, r4
 8007850:	002b      	movs	r3, r5
 8007852:	f7f8 fdff 	bl	8000454 <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	d000      	beq.n	800785c <_dtoa_r+0x59c>
 800785a:	e0d7      	b.n	8007a0c <_dtoa_r+0x74c>
 800785c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800785e:	9a08      	ldr	r2, [sp, #32]
 8007860:	4293      	cmp	r3, r2
 8007862:	d100      	bne.n	8007866 <_dtoa_r+0x5a6>
 8007864:	e771      	b.n	800774a <_dtoa_r+0x48a>
 8007866:	2200      	movs	r2, #0
 8007868:	0020      	movs	r0, r4
 800786a:	0029      	movs	r1, r5
 800786c:	4b60      	ldr	r3, [pc, #384]	; (80079f0 <_dtoa_r+0x730>)
 800786e:	f7f9 ffcb 	bl	8001808 <__aeabi_dmul>
 8007872:	4b5f      	ldr	r3, [pc, #380]	; (80079f0 <_dtoa_r+0x730>)
 8007874:	0004      	movs	r4, r0
 8007876:	000d      	movs	r5, r1
 8007878:	0030      	movs	r0, r6
 800787a:	0039      	movs	r1, r7
 800787c:	2200      	movs	r2, #0
 800787e:	f7f9 ffc3 	bl	8001808 <__aeabi_dmul>
 8007882:	9b08      	ldr	r3, [sp, #32]
 8007884:	0006      	movs	r6, r0
 8007886:	000f      	movs	r7, r1
 8007888:	9314      	str	r3, [sp, #80]	; 0x50
 800788a:	e7be      	b.n	800780a <_dtoa_r+0x54a>
 800788c:	0020      	movs	r0, r4
 800788e:	0029      	movs	r1, r5
 8007890:	f7f9 ffba 	bl	8001808 <__aeabi_dmul>
 8007894:	9a06      	ldr	r2, [sp, #24]
 8007896:	9b06      	ldr	r3, [sp, #24]
 8007898:	4694      	mov	ip, r2
 800789a:	9308      	str	r3, [sp, #32]
 800789c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800789e:	9014      	str	r0, [sp, #80]	; 0x50
 80078a0:	9115      	str	r1, [sp, #84]	; 0x54
 80078a2:	4463      	add	r3, ip
 80078a4:	9319      	str	r3, [sp, #100]	; 0x64
 80078a6:	0030      	movs	r0, r6
 80078a8:	0039      	movs	r1, r7
 80078aa:	f7fa fe0f 	bl	80024cc <__aeabi_d2iz>
 80078ae:	9018      	str	r0, [sp, #96]	; 0x60
 80078b0:	f7fa fe42 	bl	8002538 <__aeabi_i2d>
 80078b4:	0002      	movs	r2, r0
 80078b6:	000b      	movs	r3, r1
 80078b8:	0030      	movs	r0, r6
 80078ba:	0039      	movs	r1, r7
 80078bc:	f7fa fa66 	bl	8001d8c <__aeabi_dsub>
 80078c0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	3630      	adds	r6, #48	; 0x30
 80078c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078c8:	701e      	strb	r6, [r3, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	0004      	movs	r4, r0
 80078ce:	000d      	movs	r5, r1
 80078d0:	9308      	str	r3, [sp, #32]
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d12d      	bne.n	8007932 <_dtoa_r+0x672>
 80078d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80078d8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80078da:	9a06      	ldr	r2, [sp, #24]
 80078dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078de:	4694      	mov	ip, r2
 80078e0:	4463      	add	r3, ip
 80078e2:	2200      	movs	r2, #0
 80078e4:	9308      	str	r3, [sp, #32]
 80078e6:	4b47      	ldr	r3, [pc, #284]	; (8007a04 <_dtoa_r+0x744>)
 80078e8:	f7f9 f834 	bl	8000954 <__aeabi_dadd>
 80078ec:	0002      	movs	r2, r0
 80078ee:	000b      	movs	r3, r1
 80078f0:	0020      	movs	r0, r4
 80078f2:	0029      	movs	r1, r5
 80078f4:	f7f8 fdc2 	bl	800047c <__aeabi_dcmpgt>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d000      	beq.n	80078fe <_dtoa_r+0x63e>
 80078fc:	e086      	b.n	8007a0c <_dtoa_r+0x74c>
 80078fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007902:	2000      	movs	r0, #0
 8007904:	493f      	ldr	r1, [pc, #252]	; (8007a04 <_dtoa_r+0x744>)
 8007906:	f7fa fa41 	bl	8001d8c <__aeabi_dsub>
 800790a:	0002      	movs	r2, r0
 800790c:	000b      	movs	r3, r1
 800790e:	0020      	movs	r0, r4
 8007910:	0029      	movs	r1, r5
 8007912:	f7f8 fd9f 	bl	8000454 <__aeabi_dcmplt>
 8007916:	2800      	cmp	r0, #0
 8007918:	d100      	bne.n	800791c <_dtoa_r+0x65c>
 800791a:	e716      	b.n	800774a <_dtoa_r+0x48a>
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	001a      	movs	r2, r3
 8007920:	3a01      	subs	r2, #1
 8007922:	9208      	str	r2, [sp, #32]
 8007924:	7812      	ldrb	r2, [r2, #0]
 8007926:	2a30      	cmp	r2, #48	; 0x30
 8007928:	d0f8      	beq.n	800791c <_dtoa_r+0x65c>
 800792a:	9308      	str	r3, [sp, #32]
 800792c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800792e:	9303      	str	r3, [sp, #12]
 8007930:	e046      	b.n	80079c0 <_dtoa_r+0x700>
 8007932:	2200      	movs	r2, #0
 8007934:	4b2e      	ldr	r3, [pc, #184]	; (80079f0 <_dtoa_r+0x730>)
 8007936:	f7f9 ff67 	bl	8001808 <__aeabi_dmul>
 800793a:	0006      	movs	r6, r0
 800793c:	000f      	movs	r7, r1
 800793e:	e7b2      	b.n	80078a6 <_dtoa_r+0x5e6>
 8007940:	9b06      	ldr	r3, [sp, #24]
 8007942:	9a06      	ldr	r2, [sp, #24]
 8007944:	930a      	str	r3, [sp, #40]	; 0x28
 8007946:	9b07      	ldr	r3, [sp, #28]
 8007948:	9c08      	ldr	r4, [sp, #32]
 800794a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800794c:	3b01      	subs	r3, #1
 800794e:	189b      	adds	r3, r3, r2
 8007950:	930b      	str	r3, [sp, #44]	; 0x2c
 8007952:	0032      	movs	r2, r6
 8007954:	003b      	movs	r3, r7
 8007956:	0020      	movs	r0, r4
 8007958:	0029      	movs	r1, r5
 800795a:	f7f9 fb5b 	bl	8001014 <__aeabi_ddiv>
 800795e:	f7fa fdb5 	bl	80024cc <__aeabi_d2iz>
 8007962:	9007      	str	r0, [sp, #28]
 8007964:	f7fa fde8 	bl	8002538 <__aeabi_i2d>
 8007968:	0032      	movs	r2, r6
 800796a:	003b      	movs	r3, r7
 800796c:	f7f9 ff4c 	bl	8001808 <__aeabi_dmul>
 8007970:	0002      	movs	r2, r0
 8007972:	000b      	movs	r3, r1
 8007974:	0020      	movs	r0, r4
 8007976:	0029      	movs	r1, r5
 8007978:	f7fa fa08 	bl	8001d8c <__aeabi_dsub>
 800797c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797e:	001a      	movs	r2, r3
 8007980:	3201      	adds	r2, #1
 8007982:	920a      	str	r2, [sp, #40]	; 0x28
 8007984:	9208      	str	r2, [sp, #32]
 8007986:	9a07      	ldr	r2, [sp, #28]
 8007988:	3230      	adds	r2, #48	; 0x30
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800798e:	429a      	cmp	r2, r3
 8007990:	d14f      	bne.n	8007a32 <_dtoa_r+0x772>
 8007992:	0002      	movs	r2, r0
 8007994:	000b      	movs	r3, r1
 8007996:	f7f8 ffdd 	bl	8000954 <__aeabi_dadd>
 800799a:	0032      	movs	r2, r6
 800799c:	003b      	movs	r3, r7
 800799e:	0004      	movs	r4, r0
 80079a0:	000d      	movs	r5, r1
 80079a2:	f7f8 fd6b 	bl	800047c <__aeabi_dcmpgt>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d12e      	bne.n	8007a08 <_dtoa_r+0x748>
 80079aa:	0032      	movs	r2, r6
 80079ac:	003b      	movs	r3, r7
 80079ae:	0020      	movs	r0, r4
 80079b0:	0029      	movs	r1, r5
 80079b2:	f7f8 fd49 	bl	8000448 <__aeabi_dcmpeq>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d002      	beq.n	80079c0 <_dtoa_r+0x700>
 80079ba:	9b07      	ldr	r3, [sp, #28]
 80079bc:	07de      	lsls	r6, r3, #31
 80079be:	d423      	bmi.n	8007a08 <_dtoa_r+0x748>
 80079c0:	9905      	ldr	r1, [sp, #20]
 80079c2:	9804      	ldr	r0, [sp, #16]
 80079c4:	f000 fbd6 	bl	8008174 <_Bfree>
 80079c8:	2300      	movs	r3, #0
 80079ca:	9a08      	ldr	r2, [sp, #32]
 80079cc:	7013      	strb	r3, [r2, #0]
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80079d2:	3301      	adds	r3, #1
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d100      	bne.n	80079de <_dtoa_r+0x71e>
 80079dc:	e4ba      	b.n	8007354 <_dtoa_r+0x94>
 80079de:	9a08      	ldr	r2, [sp, #32]
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	e4b7      	b.n	8007354 <_dtoa_r+0x94>
 80079e4:	0800ac38 	.word	0x0800ac38
 80079e8:	0800ac10 	.word	0x0800ac10
 80079ec:	3ff00000 	.word	0x3ff00000
 80079f0:	40240000 	.word	0x40240000
 80079f4:	401c0000 	.word	0x401c0000
 80079f8:	fcc00000 	.word	0xfcc00000
 80079fc:	40140000 	.word	0x40140000
 8007a00:	7cc00000 	.word	0x7cc00000
 8007a04:	3fe00000 	.word	0x3fe00000
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	930e      	str	r3, [sp, #56]	; 0x38
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	9308      	str	r3, [sp, #32]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	781a      	ldrb	r2, [r3, #0]
 8007a14:	2a39      	cmp	r2, #57	; 0x39
 8007a16:	d108      	bne.n	8007a2a <_dtoa_r+0x76a>
 8007a18:	9a06      	ldr	r2, [sp, #24]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d1f7      	bne.n	8007a0e <_dtoa_r+0x74e>
 8007a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a20:	9906      	ldr	r1, [sp, #24]
 8007a22:	3201      	adds	r2, #1
 8007a24:	920e      	str	r2, [sp, #56]	; 0x38
 8007a26:	2230      	movs	r2, #48	; 0x30
 8007a28:	700a      	strb	r2, [r1, #0]
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	3201      	adds	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e77c      	b.n	800792c <_dtoa_r+0x66c>
 8007a32:	2200      	movs	r2, #0
 8007a34:	4ba9      	ldr	r3, [pc, #676]	; (8007cdc <_dtoa_r+0xa1c>)
 8007a36:	f7f9 fee7 	bl	8001808 <__aeabi_dmul>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	0004      	movs	r4, r0
 8007a40:	000d      	movs	r5, r1
 8007a42:	f7f8 fd01 	bl	8000448 <__aeabi_dcmpeq>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d100      	bne.n	8007a4c <_dtoa_r+0x78c>
 8007a4a:	e782      	b.n	8007952 <_dtoa_r+0x692>
 8007a4c:	e7b8      	b.n	80079c0 <_dtoa_r+0x700>
 8007a4e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007a50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007a52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a54:	2f00      	cmp	r7, #0
 8007a56:	d012      	beq.n	8007a7e <_dtoa_r+0x7be>
 8007a58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a5a:	2a01      	cmp	r2, #1
 8007a5c:	dc6e      	bgt.n	8007b3c <_dtoa_r+0x87c>
 8007a5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d065      	beq.n	8007b30 <_dtoa_r+0x870>
 8007a64:	4a9e      	ldr	r2, [pc, #632]	; (8007ce0 <_dtoa_r+0xa20>)
 8007a66:	189b      	adds	r3, r3, r2
 8007a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	18d2      	adds	r2, r2, r3
 8007a6e:	920a      	str	r2, [sp, #40]	; 0x28
 8007a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a72:	9804      	ldr	r0, [sp, #16]
 8007a74:	18d3      	adds	r3, r2, r3
 8007a76:	930c      	str	r3, [sp, #48]	; 0x30
 8007a78:	f000 fc78 	bl	800836c <__i2b>
 8007a7c:	0007      	movs	r7, r0
 8007a7e:	2c00      	cmp	r4, #0
 8007a80:	d00e      	beq.n	8007aa0 <_dtoa_r+0x7e0>
 8007a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dd0b      	ble.n	8007aa0 <_dtoa_r+0x7e0>
 8007a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a8a:	0023      	movs	r3, r4
 8007a8c:	4294      	cmp	r4, r2
 8007a8e:	dd00      	ble.n	8007a92 <_dtoa_r+0x7d2>
 8007a90:	0013      	movs	r3, r2
 8007a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a94:	1ae4      	subs	r4, r4, r3
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	920a      	str	r2, [sp, #40]	; 0x28
 8007a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8007aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d01e      	beq.n	8007ae4 <_dtoa_r+0x824>
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d05c      	beq.n	8007b66 <_dtoa_r+0x8a6>
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	dd10      	ble.n	8007ad2 <_dtoa_r+0x812>
 8007ab0:	0039      	movs	r1, r7
 8007ab2:	002a      	movs	r2, r5
 8007ab4:	9804      	ldr	r0, [sp, #16]
 8007ab6:	f000 fd21 	bl	80084fc <__pow5mult>
 8007aba:	9a05      	ldr	r2, [sp, #20]
 8007abc:	0001      	movs	r1, r0
 8007abe:	0007      	movs	r7, r0
 8007ac0:	9804      	ldr	r0, [sp, #16]
 8007ac2:	f000 fc6b 	bl	800839c <__multiply>
 8007ac6:	0006      	movs	r6, r0
 8007ac8:	9905      	ldr	r1, [sp, #20]
 8007aca:	9804      	ldr	r0, [sp, #16]
 8007acc:	f000 fb52 	bl	8008174 <_Bfree>
 8007ad0:	9605      	str	r6, [sp, #20]
 8007ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad4:	1b5a      	subs	r2, r3, r5
 8007ad6:	42ab      	cmp	r3, r5
 8007ad8:	d004      	beq.n	8007ae4 <_dtoa_r+0x824>
 8007ada:	9905      	ldr	r1, [sp, #20]
 8007adc:	9804      	ldr	r0, [sp, #16]
 8007ade:	f000 fd0d 	bl	80084fc <__pow5mult>
 8007ae2:	9005      	str	r0, [sp, #20]
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	9804      	ldr	r0, [sp, #16]
 8007ae8:	f000 fc40 	bl	800836c <__i2b>
 8007aec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007aee:	0006      	movs	r6, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	dd3a      	ble.n	8007b6a <_dtoa_r+0x8aa>
 8007af4:	001a      	movs	r2, r3
 8007af6:	0001      	movs	r1, r0
 8007af8:	9804      	ldr	r0, [sp, #16]
 8007afa:	f000 fcff 	bl	80084fc <__pow5mult>
 8007afe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b00:	0006      	movs	r6, r0
 8007b02:	2500      	movs	r5, #0
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	dc38      	bgt.n	8007b7a <_dtoa_r+0x8ba>
 8007b08:	2500      	movs	r5, #0
 8007b0a:	9b08      	ldr	r3, [sp, #32]
 8007b0c:	42ab      	cmp	r3, r5
 8007b0e:	d130      	bne.n	8007b72 <_dtoa_r+0x8b2>
 8007b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b12:	031b      	lsls	r3, r3, #12
 8007b14:	42ab      	cmp	r3, r5
 8007b16:	d12c      	bne.n	8007b72 <_dtoa_r+0x8b2>
 8007b18:	4b72      	ldr	r3, [pc, #456]	; (8007ce4 <_dtoa_r+0xa24>)
 8007b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b1c:	4213      	tst	r3, r2
 8007b1e:	d028      	beq.n	8007b72 <_dtoa_r+0x8b2>
 8007b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b22:	3501      	adds	r5, #1
 8007b24:	3301      	adds	r3, #1
 8007b26:	930a      	str	r3, [sp, #40]	; 0x28
 8007b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b2e:	e020      	b.n	8007b72 <_dtoa_r+0x8b2>
 8007b30:	2336      	movs	r3, #54	; 0x36
 8007b32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007b36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b38:	1a9b      	subs	r3, r3, r2
 8007b3a:	e795      	b.n	8007a68 <_dtoa_r+0x7a8>
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	1e5d      	subs	r5, r3, #1
 8007b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b42:	42ab      	cmp	r3, r5
 8007b44:	db07      	blt.n	8007b56 <_dtoa_r+0x896>
 8007b46:	1b5d      	subs	r5, r3, r5
 8007b48:	9b07      	ldr	r3, [sp, #28]
 8007b4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da8b      	bge.n	8007a68 <_dtoa_r+0x7a8>
 8007b50:	1ae4      	subs	r4, r4, r3
 8007b52:	2300      	movs	r3, #0
 8007b54:	e788      	b.n	8007a68 <_dtoa_r+0x7a8>
 8007b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b5a:	1aeb      	subs	r3, r5, r3
 8007b5c:	18d3      	adds	r3, r2, r3
 8007b5e:	950d      	str	r5, [sp, #52]	; 0x34
 8007b60:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b62:	2500      	movs	r5, #0
 8007b64:	e7f0      	b.n	8007b48 <_dtoa_r+0x888>
 8007b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b68:	e7b7      	b.n	8007ada <_dtoa_r+0x81a>
 8007b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b6c:	2500      	movs	r5, #0
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	ddca      	ble.n	8007b08 <_dtoa_r+0x848>
 8007b72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b74:	2001      	movs	r0, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <_dtoa_r+0x8cc>
 8007b7a:	6933      	ldr	r3, [r6, #16]
 8007b7c:	3303      	adds	r3, #3
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	18f3      	adds	r3, r6, r3
 8007b82:	6858      	ldr	r0, [r3, #4]
 8007b84:	f000 fbaa 	bl	80082dc <__hi0bits>
 8007b88:	2320      	movs	r3, #32
 8007b8a:	1a18      	subs	r0, r3, r0
 8007b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b8e:	1818      	adds	r0, r3, r0
 8007b90:	0002      	movs	r2, r0
 8007b92:	231f      	movs	r3, #31
 8007b94:	401a      	ands	r2, r3
 8007b96:	4218      	tst	r0, r3
 8007b98:	d047      	beq.n	8007c2a <_dtoa_r+0x96a>
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	dd3f      	ble.n	8007c22 <_dtoa_r+0x962>
 8007ba2:	231c      	movs	r3, #28
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ba8:	18e4      	adds	r4, r4, r3
 8007baa:	18d2      	adds	r2, r2, r3
 8007bac:	920a      	str	r2, [sp, #40]	; 0x28
 8007bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bb0:	18d3      	adds	r3, r2, r3
 8007bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8007bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd05      	ble.n	8007bc6 <_dtoa_r+0x906>
 8007bba:	001a      	movs	r2, r3
 8007bbc:	9905      	ldr	r1, [sp, #20]
 8007bbe:	9804      	ldr	r0, [sp, #16]
 8007bc0:	f000 fcf8 	bl	80085b4 <__lshift>
 8007bc4:	9005      	str	r0, [sp, #20]
 8007bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dd05      	ble.n	8007bd8 <_dtoa_r+0x918>
 8007bcc:	0031      	movs	r1, r6
 8007bce:	001a      	movs	r2, r3
 8007bd0:	9804      	ldr	r0, [sp, #16]
 8007bd2:	f000 fcef 	bl	80085b4 <__lshift>
 8007bd6:	0006      	movs	r6, r0
 8007bd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d027      	beq.n	8007c2e <_dtoa_r+0x96e>
 8007bde:	0031      	movs	r1, r6
 8007be0:	9805      	ldr	r0, [sp, #20]
 8007be2:	f000 fd55 	bl	8008690 <__mcmp>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	da21      	bge.n	8007c2e <_dtoa_r+0x96e>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	220a      	movs	r2, #10
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	9303      	str	r3, [sp, #12]
 8007bf2:	9905      	ldr	r1, [sp, #20]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9804      	ldr	r0, [sp, #16]
 8007bf8:	f000 fae0 	bl	80081bc <__multadd>
 8007bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bfe:	9005      	str	r0, [sp, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d100      	bne.n	8007c06 <_dtoa_r+0x946>
 8007c04:	e15d      	b.n	8007ec2 <_dtoa_r+0xc02>
 8007c06:	2300      	movs	r3, #0
 8007c08:	0039      	movs	r1, r7
 8007c0a:	220a      	movs	r2, #10
 8007c0c:	9804      	ldr	r0, [sp, #16]
 8007c0e:	f000 fad5 	bl	80081bc <__multadd>
 8007c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c14:	0007      	movs	r7, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	dc49      	bgt.n	8007cae <_dtoa_r+0x9ee>
 8007c1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	dc0e      	bgt.n	8007c3e <_dtoa_r+0x97e>
 8007c20:	e045      	b.n	8007cae <_dtoa_r+0x9ee>
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d0c6      	beq.n	8007bb4 <_dtoa_r+0x8f4>
 8007c26:	331c      	adds	r3, #28
 8007c28:	e7bd      	b.n	8007ba6 <_dtoa_r+0x8e6>
 8007c2a:	0013      	movs	r3, r2
 8007c2c:	e7fb      	b.n	8007c26 <_dtoa_r+0x966>
 8007c2e:	9b07      	ldr	r3, [sp, #28]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dc36      	bgt.n	8007ca2 <_dtoa_r+0x9e2>
 8007c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	dd33      	ble.n	8007ca2 <_dtoa_r+0x9e2>
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10c      	bne.n	8007c5e <_dtoa_r+0x99e>
 8007c44:	0031      	movs	r1, r6
 8007c46:	2205      	movs	r2, #5
 8007c48:	9804      	ldr	r0, [sp, #16]
 8007c4a:	f000 fab7 	bl	80081bc <__multadd>
 8007c4e:	0006      	movs	r6, r0
 8007c50:	0001      	movs	r1, r0
 8007c52:	9805      	ldr	r0, [sp, #20]
 8007c54:	f000 fd1c 	bl	8008690 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	dd00      	ble.n	8007c5e <_dtoa_r+0x99e>
 8007c5c:	e59f      	b.n	800779e <_dtoa_r+0x4de>
 8007c5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c60:	43db      	mvns	r3, r3
 8007c62:	9303      	str	r3, [sp, #12]
 8007c64:	9b06      	ldr	r3, [sp, #24]
 8007c66:	9308      	str	r3, [sp, #32]
 8007c68:	2500      	movs	r5, #0
 8007c6a:	0031      	movs	r1, r6
 8007c6c:	9804      	ldr	r0, [sp, #16]
 8007c6e:	f000 fa81 	bl	8008174 <_Bfree>
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	d100      	bne.n	8007c78 <_dtoa_r+0x9b8>
 8007c76:	e6a3      	b.n	80079c0 <_dtoa_r+0x700>
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	d005      	beq.n	8007c88 <_dtoa_r+0x9c8>
 8007c7c:	42bd      	cmp	r5, r7
 8007c7e:	d003      	beq.n	8007c88 <_dtoa_r+0x9c8>
 8007c80:	0029      	movs	r1, r5
 8007c82:	9804      	ldr	r0, [sp, #16]
 8007c84:	f000 fa76 	bl	8008174 <_Bfree>
 8007c88:	0039      	movs	r1, r7
 8007c8a:	9804      	ldr	r0, [sp, #16]
 8007c8c:	f000 fa72 	bl	8008174 <_Bfree>
 8007c90:	e696      	b.n	80079c0 <_dtoa_r+0x700>
 8007c92:	2600      	movs	r6, #0
 8007c94:	0037      	movs	r7, r6
 8007c96:	e7e2      	b.n	8007c5e <_dtoa_r+0x99e>
 8007c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c9a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007c9c:	9303      	str	r3, [sp, #12]
 8007c9e:	0037      	movs	r7, r6
 8007ca0:	e57d      	b.n	800779e <_dtoa_r+0x4de>
 8007ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d100      	bne.n	8007caa <_dtoa_r+0x9ea>
 8007ca8:	e0c3      	b.n	8007e32 <_dtoa_r+0xb72>
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	dd05      	ble.n	8007cbe <_dtoa_r+0x9fe>
 8007cb2:	0039      	movs	r1, r7
 8007cb4:	0022      	movs	r2, r4
 8007cb6:	9804      	ldr	r0, [sp, #16]
 8007cb8:	f000 fc7c 	bl	80085b4 <__lshift>
 8007cbc:	0007      	movs	r7, r0
 8007cbe:	0038      	movs	r0, r7
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	d024      	beq.n	8007d0e <_dtoa_r+0xa4e>
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	9804      	ldr	r0, [sp, #16]
 8007cc8:	f000 fa10 	bl	80080ec <_Balloc>
 8007ccc:	1e04      	subs	r4, r0, #0
 8007cce:	d111      	bne.n	8007cf4 <_dtoa_r+0xa34>
 8007cd0:	0022      	movs	r2, r4
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <_dtoa_r+0xa28>)
 8007cd4:	4805      	ldr	r0, [pc, #20]	; (8007cec <_dtoa_r+0xa2c>)
 8007cd6:	4906      	ldr	r1, [pc, #24]	; (8007cf0 <_dtoa_r+0xa30>)
 8007cd8:	f7ff fb07 	bl	80072ea <_dtoa_r+0x2a>
 8007cdc:	40240000 	.word	0x40240000
 8007ce0:	00000433 	.word	0x00000433
 8007ce4:	7ff00000 	.word	0x7ff00000
 8007ce8:	0800aba5 	.word	0x0800aba5
 8007cec:	0800ab4d 	.word	0x0800ab4d
 8007cf0:	000002ef 	.word	0x000002ef
 8007cf4:	0039      	movs	r1, r7
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	310c      	adds	r1, #12
 8007cfa:	3202      	adds	r2, #2
 8007cfc:	0092      	lsls	r2, r2, #2
 8007cfe:	300c      	adds	r0, #12
 8007d00:	f001 ffb2 	bl	8009c68 <memcpy>
 8007d04:	2201      	movs	r2, #1
 8007d06:	0021      	movs	r1, r4
 8007d08:	9804      	ldr	r0, [sp, #16]
 8007d0a:	f000 fc53 	bl	80085b4 <__lshift>
 8007d0e:	9b06      	ldr	r3, [sp, #24]
 8007d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d12:	9307      	str	r3, [sp, #28]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	189b      	adds	r3, r3, r2
 8007d18:	2201      	movs	r2, #1
 8007d1a:	003d      	movs	r5, r7
 8007d1c:	0007      	movs	r7, r0
 8007d1e:	930e      	str	r3, [sp, #56]	; 0x38
 8007d20:	9b08      	ldr	r3, [sp, #32]
 8007d22:	4013      	ands	r3, r2
 8007d24:	930d      	str	r3, [sp, #52]	; 0x34
 8007d26:	0031      	movs	r1, r6
 8007d28:	9805      	ldr	r0, [sp, #20]
 8007d2a:	f7ff fa39 	bl	80071a0 <quorem>
 8007d2e:	0029      	movs	r1, r5
 8007d30:	0004      	movs	r4, r0
 8007d32:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d34:	9805      	ldr	r0, [sp, #20]
 8007d36:	f000 fcab 	bl	8008690 <__mcmp>
 8007d3a:	003a      	movs	r2, r7
 8007d3c:	900c      	str	r0, [sp, #48]	; 0x30
 8007d3e:	0031      	movs	r1, r6
 8007d40:	9804      	ldr	r0, [sp, #16]
 8007d42:	f000 fcc1 	bl	80086c8 <__mdiff>
 8007d46:	2201      	movs	r2, #1
 8007d48:	68c3      	ldr	r3, [r0, #12]
 8007d4a:	3430      	adds	r4, #48	; 0x30
 8007d4c:	9008      	str	r0, [sp, #32]
 8007d4e:	920a      	str	r2, [sp, #40]	; 0x28
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <_dtoa_r+0xa9e>
 8007d54:	0001      	movs	r1, r0
 8007d56:	9805      	ldr	r0, [sp, #20]
 8007d58:	f000 fc9a 	bl	8008690 <__mcmp>
 8007d5c:	900a      	str	r0, [sp, #40]	; 0x28
 8007d5e:	9908      	ldr	r1, [sp, #32]
 8007d60:	9804      	ldr	r0, [sp, #16]
 8007d62:	f000 fa07 	bl	8008174 <_Bfree>
 8007d66:	9b07      	ldr	r3, [sp, #28]
 8007d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	9308      	str	r3, [sp, #32]
 8007d6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d70:	4313      	orrs	r3, r2
 8007d72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d74:	4313      	orrs	r3, r2
 8007d76:	d109      	bne.n	8007d8c <_dtoa_r+0xacc>
 8007d78:	2c39      	cmp	r4, #57	; 0x39
 8007d7a:	d022      	beq.n	8007dc2 <_dtoa_r+0xb02>
 8007d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dd01      	ble.n	8007d86 <_dtoa_r+0xac6>
 8007d82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007d84:	3431      	adds	r4, #49	; 0x31
 8007d86:	9b07      	ldr	r3, [sp, #28]
 8007d88:	701c      	strb	r4, [r3, #0]
 8007d8a:	e76e      	b.n	8007c6a <_dtoa_r+0x9aa>
 8007d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	db04      	blt.n	8007d9c <_dtoa_r+0xadc>
 8007d92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d94:	4313      	orrs	r3, r2
 8007d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d11e      	bne.n	8007dda <_dtoa_r+0xb1a>
 8007d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	ddf1      	ble.n	8007d86 <_dtoa_r+0xac6>
 8007da2:	9905      	ldr	r1, [sp, #20]
 8007da4:	2201      	movs	r2, #1
 8007da6:	9804      	ldr	r0, [sp, #16]
 8007da8:	f000 fc04 	bl	80085b4 <__lshift>
 8007dac:	0031      	movs	r1, r6
 8007dae:	9005      	str	r0, [sp, #20]
 8007db0:	f000 fc6e 	bl	8008690 <__mcmp>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	dc02      	bgt.n	8007dbe <_dtoa_r+0xafe>
 8007db8:	d1e5      	bne.n	8007d86 <_dtoa_r+0xac6>
 8007dba:	07e3      	lsls	r3, r4, #31
 8007dbc:	d5e3      	bpl.n	8007d86 <_dtoa_r+0xac6>
 8007dbe:	2c39      	cmp	r4, #57	; 0x39
 8007dc0:	d1df      	bne.n	8007d82 <_dtoa_r+0xac2>
 8007dc2:	2339      	movs	r3, #57	; 0x39
 8007dc4:	9a07      	ldr	r2, [sp, #28]
 8007dc6:	7013      	strb	r3, [r2, #0]
 8007dc8:	9b08      	ldr	r3, [sp, #32]
 8007dca:	9308      	str	r3, [sp, #32]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	781a      	ldrb	r2, [r3, #0]
 8007dd0:	2a39      	cmp	r2, #57	; 0x39
 8007dd2:	d063      	beq.n	8007e9c <_dtoa_r+0xbdc>
 8007dd4:	3201      	adds	r2, #1
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	e747      	b.n	8007c6a <_dtoa_r+0x9aa>
 8007dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dd03      	ble.n	8007de8 <_dtoa_r+0xb28>
 8007de0:	2c39      	cmp	r4, #57	; 0x39
 8007de2:	d0ee      	beq.n	8007dc2 <_dtoa_r+0xb02>
 8007de4:	3401      	adds	r4, #1
 8007de6:	e7ce      	b.n	8007d86 <_dtoa_r+0xac6>
 8007de8:	9b07      	ldr	r3, [sp, #28]
 8007dea:	9a07      	ldr	r2, [sp, #28]
 8007dec:	701c      	strb	r4, [r3, #0]
 8007dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d03e      	beq.n	8007e72 <_dtoa_r+0xbb2>
 8007df4:	2300      	movs	r3, #0
 8007df6:	220a      	movs	r2, #10
 8007df8:	9905      	ldr	r1, [sp, #20]
 8007dfa:	9804      	ldr	r0, [sp, #16]
 8007dfc:	f000 f9de 	bl	80081bc <__multadd>
 8007e00:	2300      	movs	r3, #0
 8007e02:	9005      	str	r0, [sp, #20]
 8007e04:	220a      	movs	r2, #10
 8007e06:	0029      	movs	r1, r5
 8007e08:	9804      	ldr	r0, [sp, #16]
 8007e0a:	42bd      	cmp	r5, r7
 8007e0c:	d106      	bne.n	8007e1c <_dtoa_r+0xb5c>
 8007e0e:	f000 f9d5 	bl	80081bc <__multadd>
 8007e12:	0005      	movs	r5, r0
 8007e14:	0007      	movs	r7, r0
 8007e16:	9b08      	ldr	r3, [sp, #32]
 8007e18:	9307      	str	r3, [sp, #28]
 8007e1a:	e784      	b.n	8007d26 <_dtoa_r+0xa66>
 8007e1c:	f000 f9ce 	bl	80081bc <__multadd>
 8007e20:	0039      	movs	r1, r7
 8007e22:	0005      	movs	r5, r0
 8007e24:	2300      	movs	r3, #0
 8007e26:	220a      	movs	r2, #10
 8007e28:	9804      	ldr	r0, [sp, #16]
 8007e2a:	f000 f9c7 	bl	80081bc <__multadd>
 8007e2e:	0007      	movs	r7, r0
 8007e30:	e7f1      	b.n	8007e16 <_dtoa_r+0xb56>
 8007e32:	9b07      	ldr	r3, [sp, #28]
 8007e34:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e36:	2500      	movs	r5, #0
 8007e38:	0031      	movs	r1, r6
 8007e3a:	9805      	ldr	r0, [sp, #20]
 8007e3c:	f7ff f9b0 	bl	80071a0 <quorem>
 8007e40:	9b06      	ldr	r3, [sp, #24]
 8007e42:	3030      	adds	r0, #48	; 0x30
 8007e44:	5558      	strb	r0, [r3, r5]
 8007e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e48:	3501      	adds	r5, #1
 8007e4a:	0004      	movs	r4, r0
 8007e4c:	42ab      	cmp	r3, r5
 8007e4e:	dd07      	ble.n	8007e60 <_dtoa_r+0xba0>
 8007e50:	2300      	movs	r3, #0
 8007e52:	220a      	movs	r2, #10
 8007e54:	9905      	ldr	r1, [sp, #20]
 8007e56:	9804      	ldr	r0, [sp, #16]
 8007e58:	f000 f9b0 	bl	80081bc <__multadd>
 8007e5c:	9005      	str	r0, [sp, #20]
 8007e5e:	e7eb      	b.n	8007e38 <_dtoa_r+0xb78>
 8007e60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e62:	2301      	movs	r3, #1
 8007e64:	2a00      	cmp	r2, #0
 8007e66:	dd00      	ble.n	8007e6a <_dtoa_r+0xbaa>
 8007e68:	0013      	movs	r3, r2
 8007e6a:	2500      	movs	r5, #0
 8007e6c:	9a06      	ldr	r2, [sp, #24]
 8007e6e:	18d3      	adds	r3, r2, r3
 8007e70:	9308      	str	r3, [sp, #32]
 8007e72:	9905      	ldr	r1, [sp, #20]
 8007e74:	2201      	movs	r2, #1
 8007e76:	9804      	ldr	r0, [sp, #16]
 8007e78:	f000 fb9c 	bl	80085b4 <__lshift>
 8007e7c:	0031      	movs	r1, r6
 8007e7e:	9005      	str	r0, [sp, #20]
 8007e80:	f000 fc06 	bl	8008690 <__mcmp>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	dc9f      	bgt.n	8007dc8 <_dtoa_r+0xb08>
 8007e88:	d101      	bne.n	8007e8e <_dtoa_r+0xbce>
 8007e8a:	07e4      	lsls	r4, r4, #31
 8007e8c:	d49c      	bmi.n	8007dc8 <_dtoa_r+0xb08>
 8007e8e:	9b08      	ldr	r3, [sp, #32]
 8007e90:	9308      	str	r3, [sp, #32]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	781a      	ldrb	r2, [r3, #0]
 8007e96:	2a30      	cmp	r2, #48	; 0x30
 8007e98:	d0fa      	beq.n	8007e90 <_dtoa_r+0xbd0>
 8007e9a:	e6e6      	b.n	8007c6a <_dtoa_r+0x9aa>
 8007e9c:	9a06      	ldr	r2, [sp, #24]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d193      	bne.n	8007dca <_dtoa_r+0xb0a>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	2331      	movs	r3, #49	; 0x31
 8007eaa:	7013      	strb	r3, [r2, #0]
 8007eac:	e6dd      	b.n	8007c6a <_dtoa_r+0x9aa>
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <_dtoa_r+0xc14>)
 8007eb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007eb2:	9306      	str	r3, [sp, #24]
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <_dtoa_r+0xc18>)
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	d001      	beq.n	8007ebe <_dtoa_r+0xbfe>
 8007eba:	f7ff fa49 	bl	8007350 <_dtoa_r+0x90>
 8007ebe:	f7ff fa49 	bl	8007354 <_dtoa_r+0x94>
 8007ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dcb6      	bgt.n	8007e36 <_dtoa_r+0xb76>
 8007ec8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	dd00      	ble.n	8007ed0 <_dtoa_r+0xc10>
 8007ece:	e6b6      	b.n	8007c3e <_dtoa_r+0x97e>
 8007ed0:	e7b1      	b.n	8007e36 <_dtoa_r+0xb76>
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	0800ab29 	.word	0x0800ab29
 8007ed8:	0800ab31 	.word	0x0800ab31

08007edc <_free_r>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	0005      	movs	r5, r0
 8007ee0:	2900      	cmp	r1, #0
 8007ee2:	d010      	beq.n	8007f06 <_free_r+0x2a>
 8007ee4:	1f0c      	subs	r4, r1, #4
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da00      	bge.n	8007eee <_free_r+0x12>
 8007eec:	18e4      	adds	r4, r4, r3
 8007eee:	0028      	movs	r0, r5
 8007ef0:	f000 f8ec 	bl	80080cc <__malloc_lock>
 8007ef4:	4a1d      	ldr	r2, [pc, #116]	; (8007f6c <_free_r+0x90>)
 8007ef6:	6813      	ldr	r3, [r2, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d105      	bne.n	8007f08 <_free_r+0x2c>
 8007efc:	6063      	str	r3, [r4, #4]
 8007efe:	6014      	str	r4, [r2, #0]
 8007f00:	0028      	movs	r0, r5
 8007f02:	f000 f8eb 	bl	80080dc <__malloc_unlock>
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d908      	bls.n	8007f1e <_free_r+0x42>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428b      	cmp	r3, r1
 8007f12:	d1f3      	bne.n	8007efc <_free_r+0x20>
 8007f14:	6819      	ldr	r1, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	1809      	adds	r1, r1, r0
 8007f1a:	6021      	str	r1, [r4, #0]
 8007f1c:	e7ee      	b.n	8007efc <_free_r+0x20>
 8007f1e:	001a      	movs	r2, r3
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <_free_r+0x4e>
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	d9f9      	bls.n	8007f1e <_free_r+0x42>
 8007f2a:	6811      	ldr	r1, [r2, #0]
 8007f2c:	1850      	adds	r0, r2, r1
 8007f2e:	42a0      	cmp	r0, r4
 8007f30:	d10b      	bne.n	8007f4a <_free_r+0x6e>
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	1809      	adds	r1, r1, r0
 8007f36:	1850      	adds	r0, r2, r1
 8007f38:	6011      	str	r1, [r2, #0]
 8007f3a:	4283      	cmp	r3, r0
 8007f3c:	d1e0      	bne.n	8007f00 <_free_r+0x24>
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	1841      	adds	r1, r0, r1
 8007f44:	6011      	str	r1, [r2, #0]
 8007f46:	6053      	str	r3, [r2, #4]
 8007f48:	e7da      	b.n	8007f00 <_free_r+0x24>
 8007f4a:	42a0      	cmp	r0, r4
 8007f4c:	d902      	bls.n	8007f54 <_free_r+0x78>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	e7d5      	b.n	8007f00 <_free_r+0x24>
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	1821      	adds	r1, r4, r0
 8007f58:	428b      	cmp	r3, r1
 8007f5a:	d103      	bne.n	8007f64 <_free_r+0x88>
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	1809      	adds	r1, r1, r0
 8007f62:	6021      	str	r1, [r4, #0]
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6054      	str	r4, [r2, #4]
 8007f68:	e7ca      	b.n	8007f00 <_free_r+0x24>
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	200004cc 	.word	0x200004cc

08007f70 <malloc>:
 8007f70:	b510      	push	{r4, lr}
 8007f72:	4b03      	ldr	r3, [pc, #12]	; (8007f80 <malloc+0x10>)
 8007f74:	0001      	movs	r1, r0
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	f000 f826 	bl	8007fc8 <_malloc_r>
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	20000064 	.word	0x20000064

08007f84 <sbrk_aligned>:
 8007f84:	b570      	push	{r4, r5, r6, lr}
 8007f86:	4e0f      	ldr	r6, [pc, #60]	; (8007fc4 <sbrk_aligned+0x40>)
 8007f88:	000d      	movs	r5, r1
 8007f8a:	6831      	ldr	r1, [r6, #0]
 8007f8c:	0004      	movs	r4, r0
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d102      	bne.n	8007f98 <sbrk_aligned+0x14>
 8007f92:	f001 fe57 	bl	8009c44 <_sbrk_r>
 8007f96:	6030      	str	r0, [r6, #0]
 8007f98:	0029      	movs	r1, r5
 8007f9a:	0020      	movs	r0, r4
 8007f9c:	f001 fe52 	bl	8009c44 <_sbrk_r>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d00a      	beq.n	8007fba <sbrk_aligned+0x36>
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	1cc5      	adds	r5, r0, #3
 8007fa8:	439d      	bics	r5, r3
 8007faa:	42a8      	cmp	r0, r5
 8007fac:	d007      	beq.n	8007fbe <sbrk_aligned+0x3a>
 8007fae:	1a29      	subs	r1, r5, r0
 8007fb0:	0020      	movs	r0, r4
 8007fb2:	f001 fe47 	bl	8009c44 <_sbrk_r>
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d101      	bne.n	8007fbe <sbrk_aligned+0x3a>
 8007fba:	2501      	movs	r5, #1
 8007fbc:	426d      	negs	r5, r5
 8007fbe:	0028      	movs	r0, r5
 8007fc0:	bd70      	pop	{r4, r5, r6, pc}
 8007fc2:	46c0      	nop			; (mov r8, r8)
 8007fc4:	200004d0 	.word	0x200004d0

08007fc8 <_malloc_r>:
 8007fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fca:	2203      	movs	r2, #3
 8007fcc:	1ccb      	adds	r3, r1, #3
 8007fce:	4393      	bics	r3, r2
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	0006      	movs	r6, r0
 8007fd4:	001f      	movs	r7, r3
 8007fd6:	2b0c      	cmp	r3, #12
 8007fd8:	d238      	bcs.n	800804c <_malloc_r+0x84>
 8007fda:	270c      	movs	r7, #12
 8007fdc:	42b9      	cmp	r1, r7
 8007fde:	d837      	bhi.n	8008050 <_malloc_r+0x88>
 8007fe0:	0030      	movs	r0, r6
 8007fe2:	f000 f873 	bl	80080cc <__malloc_lock>
 8007fe6:	4b38      	ldr	r3, [pc, #224]	; (80080c8 <_malloc_r+0x100>)
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	001c      	movs	r4, r3
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	d133      	bne.n	800805a <_malloc_r+0x92>
 8007ff2:	0039      	movs	r1, r7
 8007ff4:	0030      	movs	r0, r6
 8007ff6:	f7ff ffc5 	bl	8007f84 <sbrk_aligned>
 8007ffa:	0004      	movs	r4, r0
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d15e      	bne.n	80080be <_malloc_r+0xf6>
 8008000:	9b00      	ldr	r3, [sp, #0]
 8008002:	681c      	ldr	r4, [r3, #0]
 8008004:	0025      	movs	r5, r4
 8008006:	2d00      	cmp	r5, #0
 8008008:	d14e      	bne.n	80080a8 <_malloc_r+0xe0>
 800800a:	2c00      	cmp	r4, #0
 800800c:	d051      	beq.n	80080b2 <_malloc_r+0xea>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	0029      	movs	r1, r5
 8008012:	18e3      	adds	r3, r4, r3
 8008014:	0030      	movs	r0, r6
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	f001 fe14 	bl	8009c44 <_sbrk_r>
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	4283      	cmp	r3, r0
 8008020:	d147      	bne.n	80080b2 <_malloc_r+0xea>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	0030      	movs	r0, r6
 8008026:	1aff      	subs	r7, r7, r3
 8008028:	0039      	movs	r1, r7
 800802a:	f7ff ffab 	bl	8007f84 <sbrk_aligned>
 800802e:	3001      	adds	r0, #1
 8008030:	d03f      	beq.n	80080b2 <_malloc_r+0xea>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	19db      	adds	r3, r3, r7
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	9b00      	ldr	r3, [sp, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d040      	beq.n	80080c2 <_malloc_r+0xfa>
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	42a2      	cmp	r2, r4
 8008044:	d133      	bne.n	80080ae <_malloc_r+0xe6>
 8008046:	2200      	movs	r2, #0
 8008048:	605a      	str	r2, [r3, #4]
 800804a:	e014      	b.n	8008076 <_malloc_r+0xae>
 800804c:	2b00      	cmp	r3, #0
 800804e:	dac5      	bge.n	8007fdc <_malloc_r+0x14>
 8008050:	230c      	movs	r3, #12
 8008052:	2500      	movs	r5, #0
 8008054:	6033      	str	r3, [r6, #0]
 8008056:	0028      	movs	r0, r5
 8008058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800805a:	6821      	ldr	r1, [r4, #0]
 800805c:	1bc9      	subs	r1, r1, r7
 800805e:	d420      	bmi.n	80080a2 <_malloc_r+0xda>
 8008060:	290b      	cmp	r1, #11
 8008062:	d918      	bls.n	8008096 <_malloc_r+0xce>
 8008064:	19e2      	adds	r2, r4, r7
 8008066:	6027      	str	r7, [r4, #0]
 8008068:	42a3      	cmp	r3, r4
 800806a:	d112      	bne.n	8008092 <_malloc_r+0xca>
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	6863      	ldr	r3, [r4, #4]
 8008072:	6011      	str	r1, [r2, #0]
 8008074:	6053      	str	r3, [r2, #4]
 8008076:	0030      	movs	r0, r6
 8008078:	0025      	movs	r5, r4
 800807a:	f000 f82f 	bl	80080dc <__malloc_unlock>
 800807e:	2207      	movs	r2, #7
 8008080:	350b      	adds	r5, #11
 8008082:	1d23      	adds	r3, r4, #4
 8008084:	4395      	bics	r5, r2
 8008086:	1aea      	subs	r2, r5, r3
 8008088:	429d      	cmp	r5, r3
 800808a:	d0e4      	beq.n	8008056 <_malloc_r+0x8e>
 800808c:	1b5b      	subs	r3, r3, r5
 800808e:	50a3      	str	r3, [r4, r2]
 8008090:	e7e1      	b.n	8008056 <_malloc_r+0x8e>
 8008092:	605a      	str	r2, [r3, #4]
 8008094:	e7ec      	b.n	8008070 <_malloc_r+0xa8>
 8008096:	6862      	ldr	r2, [r4, #4]
 8008098:	42a3      	cmp	r3, r4
 800809a:	d1d5      	bne.n	8008048 <_malloc_r+0x80>
 800809c:	9b00      	ldr	r3, [sp, #0]
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	e7e9      	b.n	8008076 <_malloc_r+0xae>
 80080a2:	0023      	movs	r3, r4
 80080a4:	6864      	ldr	r4, [r4, #4]
 80080a6:	e7a2      	b.n	8007fee <_malloc_r+0x26>
 80080a8:	002c      	movs	r4, r5
 80080aa:	686d      	ldr	r5, [r5, #4]
 80080ac:	e7ab      	b.n	8008006 <_malloc_r+0x3e>
 80080ae:	0013      	movs	r3, r2
 80080b0:	e7c4      	b.n	800803c <_malloc_r+0x74>
 80080b2:	230c      	movs	r3, #12
 80080b4:	0030      	movs	r0, r6
 80080b6:	6033      	str	r3, [r6, #0]
 80080b8:	f000 f810 	bl	80080dc <__malloc_unlock>
 80080bc:	e7cb      	b.n	8008056 <_malloc_r+0x8e>
 80080be:	6027      	str	r7, [r4, #0]
 80080c0:	e7d9      	b.n	8008076 <_malloc_r+0xae>
 80080c2:	605b      	str	r3, [r3, #4]
 80080c4:	deff      	udf	#255	; 0xff
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	200004cc 	.word	0x200004cc

080080cc <__malloc_lock>:
 80080cc:	b510      	push	{r4, lr}
 80080ce:	4802      	ldr	r0, [pc, #8]	; (80080d8 <__malloc_lock+0xc>)
 80080d0:	f7ff f855 	bl	800717e <__retarget_lock_acquire_recursive>
 80080d4:	bd10      	pop	{r4, pc}
 80080d6:	46c0      	nop			; (mov r8, r8)
 80080d8:	200004c8 	.word	0x200004c8

080080dc <__malloc_unlock>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	4802      	ldr	r0, [pc, #8]	; (80080e8 <__malloc_unlock+0xc>)
 80080e0:	f7ff f84e 	bl	8007180 <__retarget_lock_release_recursive>
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	200004c8 	.word	0x200004c8

080080ec <_Balloc>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	69c5      	ldr	r5, [r0, #28]
 80080f0:	0006      	movs	r6, r0
 80080f2:	000c      	movs	r4, r1
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	d10e      	bne.n	8008116 <_Balloc+0x2a>
 80080f8:	2010      	movs	r0, #16
 80080fa:	f7ff ff39 	bl	8007f70 <malloc>
 80080fe:	1e02      	subs	r2, r0, #0
 8008100:	61f0      	str	r0, [r6, #28]
 8008102:	d104      	bne.n	800810e <_Balloc+0x22>
 8008104:	216b      	movs	r1, #107	; 0x6b
 8008106:	4b19      	ldr	r3, [pc, #100]	; (800816c <_Balloc+0x80>)
 8008108:	4819      	ldr	r0, [pc, #100]	; (8008170 <_Balloc+0x84>)
 800810a:	f001 fdbd 	bl	8009c88 <__assert_func>
 800810e:	6045      	str	r5, [r0, #4]
 8008110:	6085      	str	r5, [r0, #8]
 8008112:	6005      	str	r5, [r0, #0]
 8008114:	60c5      	str	r5, [r0, #12]
 8008116:	69f5      	ldr	r5, [r6, #28]
 8008118:	68eb      	ldr	r3, [r5, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d013      	beq.n	8008146 <_Balloc+0x5a>
 800811e:	69f3      	ldr	r3, [r6, #28]
 8008120:	00a2      	lsls	r2, r4, #2
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	189b      	adds	r3, r3, r2
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	2800      	cmp	r0, #0
 800812a:	d118      	bne.n	800815e <_Balloc+0x72>
 800812c:	2101      	movs	r1, #1
 800812e:	000d      	movs	r5, r1
 8008130:	40a5      	lsls	r5, r4
 8008132:	1d6a      	adds	r2, r5, #5
 8008134:	0030      	movs	r0, r6
 8008136:	0092      	lsls	r2, r2, #2
 8008138:	f001 fdc4 	bl	8009cc4 <_calloc_r>
 800813c:	2800      	cmp	r0, #0
 800813e:	d00c      	beq.n	800815a <_Balloc+0x6e>
 8008140:	6044      	str	r4, [r0, #4]
 8008142:	6085      	str	r5, [r0, #8]
 8008144:	e00d      	b.n	8008162 <_Balloc+0x76>
 8008146:	2221      	movs	r2, #33	; 0x21
 8008148:	2104      	movs	r1, #4
 800814a:	0030      	movs	r0, r6
 800814c:	f001 fdba 	bl	8009cc4 <_calloc_r>
 8008150:	69f3      	ldr	r3, [r6, #28]
 8008152:	60e8      	str	r0, [r5, #12]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e1      	bne.n	800811e <_Balloc+0x32>
 800815a:	2000      	movs	r0, #0
 800815c:	bd70      	pop	{r4, r5, r6, pc}
 800815e:	6802      	ldr	r2, [r0, #0]
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	6103      	str	r3, [r0, #16]
 8008166:	60c3      	str	r3, [r0, #12]
 8008168:	e7f8      	b.n	800815c <_Balloc+0x70>
 800816a:	46c0      	nop			; (mov r8, r8)
 800816c:	0800ab36 	.word	0x0800ab36
 8008170:	0800abb6 	.word	0x0800abb6

08008174 <_Bfree>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	69c6      	ldr	r6, [r0, #28]
 8008178:	0005      	movs	r5, r0
 800817a:	000c      	movs	r4, r1
 800817c:	2e00      	cmp	r6, #0
 800817e:	d10e      	bne.n	800819e <_Bfree+0x2a>
 8008180:	2010      	movs	r0, #16
 8008182:	f7ff fef5 	bl	8007f70 <malloc>
 8008186:	1e02      	subs	r2, r0, #0
 8008188:	61e8      	str	r0, [r5, #28]
 800818a:	d104      	bne.n	8008196 <_Bfree+0x22>
 800818c:	218f      	movs	r1, #143	; 0x8f
 800818e:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <_Bfree+0x40>)
 8008190:	4809      	ldr	r0, [pc, #36]	; (80081b8 <_Bfree+0x44>)
 8008192:	f001 fd79 	bl	8009c88 <__assert_func>
 8008196:	6046      	str	r6, [r0, #4]
 8008198:	6086      	str	r6, [r0, #8]
 800819a:	6006      	str	r6, [r0, #0]
 800819c:	60c6      	str	r6, [r0, #12]
 800819e:	2c00      	cmp	r4, #0
 80081a0:	d007      	beq.n	80081b2 <_Bfree+0x3e>
 80081a2:	69eb      	ldr	r3, [r5, #28]
 80081a4:	6862      	ldr	r2, [r4, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	189b      	adds	r3, r3, r2
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	6022      	str	r2, [r4, #0]
 80081b0:	601c      	str	r4, [r3, #0]
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	0800ab36 	.word	0x0800ab36
 80081b8:	0800abb6 	.word	0x0800abb6

080081bc <__multadd>:
 80081bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081be:	000e      	movs	r6, r1
 80081c0:	9001      	str	r0, [sp, #4]
 80081c2:	000c      	movs	r4, r1
 80081c4:	001d      	movs	r5, r3
 80081c6:	2000      	movs	r0, #0
 80081c8:	690f      	ldr	r7, [r1, #16]
 80081ca:	3614      	adds	r6, #20
 80081cc:	6833      	ldr	r3, [r6, #0]
 80081ce:	3001      	adds	r0, #1
 80081d0:	b299      	uxth	r1, r3
 80081d2:	4351      	muls	r1, r2
 80081d4:	0c1b      	lsrs	r3, r3, #16
 80081d6:	4353      	muls	r3, r2
 80081d8:	1949      	adds	r1, r1, r5
 80081da:	0c0d      	lsrs	r5, r1, #16
 80081dc:	195b      	adds	r3, r3, r5
 80081de:	0c1d      	lsrs	r5, r3, #16
 80081e0:	b289      	uxth	r1, r1
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	185b      	adds	r3, r3, r1
 80081e6:	c608      	stmia	r6!, {r3}
 80081e8:	4287      	cmp	r7, r0
 80081ea:	dcef      	bgt.n	80081cc <__multadd+0x10>
 80081ec:	2d00      	cmp	r5, #0
 80081ee:	d022      	beq.n	8008236 <__multadd+0x7a>
 80081f0:	68a3      	ldr	r3, [r4, #8]
 80081f2:	42bb      	cmp	r3, r7
 80081f4:	dc19      	bgt.n	800822a <__multadd+0x6e>
 80081f6:	6861      	ldr	r1, [r4, #4]
 80081f8:	9801      	ldr	r0, [sp, #4]
 80081fa:	3101      	adds	r1, #1
 80081fc:	f7ff ff76 	bl	80080ec <_Balloc>
 8008200:	1e06      	subs	r6, r0, #0
 8008202:	d105      	bne.n	8008210 <__multadd+0x54>
 8008204:	0032      	movs	r2, r6
 8008206:	21ba      	movs	r1, #186	; 0xba
 8008208:	4b0c      	ldr	r3, [pc, #48]	; (800823c <__multadd+0x80>)
 800820a:	480d      	ldr	r0, [pc, #52]	; (8008240 <__multadd+0x84>)
 800820c:	f001 fd3c 	bl	8009c88 <__assert_func>
 8008210:	0021      	movs	r1, r4
 8008212:	6922      	ldr	r2, [r4, #16]
 8008214:	310c      	adds	r1, #12
 8008216:	3202      	adds	r2, #2
 8008218:	0092      	lsls	r2, r2, #2
 800821a:	300c      	adds	r0, #12
 800821c:	f001 fd24 	bl	8009c68 <memcpy>
 8008220:	0021      	movs	r1, r4
 8008222:	9801      	ldr	r0, [sp, #4]
 8008224:	f7ff ffa6 	bl	8008174 <_Bfree>
 8008228:	0034      	movs	r4, r6
 800822a:	1d3b      	adds	r3, r7, #4
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	18e3      	adds	r3, r4, r3
 8008230:	605d      	str	r5, [r3, #4]
 8008232:	1c7b      	adds	r3, r7, #1
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	0020      	movs	r0, r4
 8008238:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	0800aba5 	.word	0x0800aba5
 8008240:	0800abb6 	.word	0x0800abb6

08008244 <__s2b>:
 8008244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008246:	0006      	movs	r6, r0
 8008248:	0018      	movs	r0, r3
 800824a:	000c      	movs	r4, r1
 800824c:	3008      	adds	r0, #8
 800824e:	2109      	movs	r1, #9
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	0015      	movs	r5, r2
 8008254:	f7f7 fffc 	bl	8000250 <__divsi3>
 8008258:	2301      	movs	r3, #1
 800825a:	2100      	movs	r1, #0
 800825c:	4283      	cmp	r3, r0
 800825e:	db0a      	blt.n	8008276 <__s2b+0x32>
 8008260:	0030      	movs	r0, r6
 8008262:	f7ff ff43 	bl	80080ec <_Balloc>
 8008266:	1e01      	subs	r1, r0, #0
 8008268:	d108      	bne.n	800827c <__s2b+0x38>
 800826a:	000a      	movs	r2, r1
 800826c:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <__s2b+0x90>)
 800826e:	481a      	ldr	r0, [pc, #104]	; (80082d8 <__s2b+0x94>)
 8008270:	31d3      	adds	r1, #211	; 0xd3
 8008272:	f001 fd09 	bl	8009c88 <__assert_func>
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	3101      	adds	r1, #1
 800827a:	e7ef      	b.n	800825c <__s2b+0x18>
 800827c:	9b08      	ldr	r3, [sp, #32]
 800827e:	6143      	str	r3, [r0, #20]
 8008280:	2301      	movs	r3, #1
 8008282:	6103      	str	r3, [r0, #16]
 8008284:	2d09      	cmp	r5, #9
 8008286:	dd18      	ble.n	80082ba <__s2b+0x76>
 8008288:	0023      	movs	r3, r4
 800828a:	3309      	adds	r3, #9
 800828c:	001f      	movs	r7, r3
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	1964      	adds	r4, r4, r5
 8008292:	783b      	ldrb	r3, [r7, #0]
 8008294:	220a      	movs	r2, #10
 8008296:	0030      	movs	r0, r6
 8008298:	3b30      	subs	r3, #48	; 0x30
 800829a:	f7ff ff8f 	bl	80081bc <__multadd>
 800829e:	3701      	adds	r7, #1
 80082a0:	0001      	movs	r1, r0
 80082a2:	42a7      	cmp	r7, r4
 80082a4:	d1f5      	bne.n	8008292 <__s2b+0x4e>
 80082a6:	002c      	movs	r4, r5
 80082a8:	9b00      	ldr	r3, [sp, #0]
 80082aa:	3c08      	subs	r4, #8
 80082ac:	191c      	adds	r4, r3, r4
 80082ae:	002f      	movs	r7, r5
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	429f      	cmp	r7, r3
 80082b4:	db04      	blt.n	80082c0 <__s2b+0x7c>
 80082b6:	0008      	movs	r0, r1
 80082b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082ba:	2509      	movs	r5, #9
 80082bc:	340a      	adds	r4, #10
 80082be:	e7f6      	b.n	80082ae <__s2b+0x6a>
 80082c0:	1b63      	subs	r3, r4, r5
 80082c2:	5ddb      	ldrb	r3, [r3, r7]
 80082c4:	220a      	movs	r2, #10
 80082c6:	0030      	movs	r0, r6
 80082c8:	3b30      	subs	r3, #48	; 0x30
 80082ca:	f7ff ff77 	bl	80081bc <__multadd>
 80082ce:	3701      	adds	r7, #1
 80082d0:	0001      	movs	r1, r0
 80082d2:	e7ed      	b.n	80082b0 <__s2b+0x6c>
 80082d4:	0800aba5 	.word	0x0800aba5
 80082d8:	0800abb6 	.word	0x0800abb6

080082dc <__hi0bits>:
 80082dc:	0003      	movs	r3, r0
 80082de:	0c02      	lsrs	r2, r0, #16
 80082e0:	2000      	movs	r0, #0
 80082e2:	4282      	cmp	r2, r0
 80082e4:	d101      	bne.n	80082ea <__hi0bits+0xe>
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	3010      	adds	r0, #16
 80082ea:	0e1a      	lsrs	r2, r3, #24
 80082ec:	d101      	bne.n	80082f2 <__hi0bits+0x16>
 80082ee:	3008      	adds	r0, #8
 80082f0:	021b      	lsls	r3, r3, #8
 80082f2:	0f1a      	lsrs	r2, r3, #28
 80082f4:	d101      	bne.n	80082fa <__hi0bits+0x1e>
 80082f6:	3004      	adds	r0, #4
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	0f9a      	lsrs	r2, r3, #30
 80082fc:	d101      	bne.n	8008302 <__hi0bits+0x26>
 80082fe:	3002      	adds	r0, #2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	db03      	blt.n	800830e <__hi0bits+0x32>
 8008306:	3001      	adds	r0, #1
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	d400      	bmi.n	800830e <__hi0bits+0x32>
 800830c:	2020      	movs	r0, #32
 800830e:	4770      	bx	lr

08008310 <__lo0bits>:
 8008310:	6803      	ldr	r3, [r0, #0]
 8008312:	0001      	movs	r1, r0
 8008314:	2207      	movs	r2, #7
 8008316:	0018      	movs	r0, r3
 8008318:	4010      	ands	r0, r2
 800831a:	4213      	tst	r3, r2
 800831c:	d00d      	beq.n	800833a <__lo0bits+0x2a>
 800831e:	3a06      	subs	r2, #6
 8008320:	2000      	movs	r0, #0
 8008322:	4213      	tst	r3, r2
 8008324:	d105      	bne.n	8008332 <__lo0bits+0x22>
 8008326:	3002      	adds	r0, #2
 8008328:	4203      	tst	r3, r0
 800832a:	d003      	beq.n	8008334 <__lo0bits+0x24>
 800832c:	40d3      	lsrs	r3, r2
 800832e:	0010      	movs	r0, r2
 8008330:	600b      	str	r3, [r1, #0]
 8008332:	4770      	bx	lr
 8008334:	089b      	lsrs	r3, r3, #2
 8008336:	600b      	str	r3, [r1, #0]
 8008338:	e7fb      	b.n	8008332 <__lo0bits+0x22>
 800833a:	b29a      	uxth	r2, r3
 800833c:	2a00      	cmp	r2, #0
 800833e:	d101      	bne.n	8008344 <__lo0bits+0x34>
 8008340:	2010      	movs	r0, #16
 8008342:	0c1b      	lsrs	r3, r3, #16
 8008344:	b2da      	uxtb	r2, r3
 8008346:	2a00      	cmp	r2, #0
 8008348:	d101      	bne.n	800834e <__lo0bits+0x3e>
 800834a:	3008      	adds	r0, #8
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	071a      	lsls	r2, r3, #28
 8008350:	d101      	bne.n	8008356 <__lo0bits+0x46>
 8008352:	3004      	adds	r0, #4
 8008354:	091b      	lsrs	r3, r3, #4
 8008356:	079a      	lsls	r2, r3, #30
 8008358:	d101      	bne.n	800835e <__lo0bits+0x4e>
 800835a:	3002      	adds	r0, #2
 800835c:	089b      	lsrs	r3, r3, #2
 800835e:	07da      	lsls	r2, r3, #31
 8008360:	d4e9      	bmi.n	8008336 <__lo0bits+0x26>
 8008362:	3001      	adds	r0, #1
 8008364:	085b      	lsrs	r3, r3, #1
 8008366:	d1e6      	bne.n	8008336 <__lo0bits+0x26>
 8008368:	2020      	movs	r0, #32
 800836a:	e7e2      	b.n	8008332 <__lo0bits+0x22>

0800836c <__i2b>:
 800836c:	b510      	push	{r4, lr}
 800836e:	000c      	movs	r4, r1
 8008370:	2101      	movs	r1, #1
 8008372:	f7ff febb 	bl	80080ec <_Balloc>
 8008376:	2800      	cmp	r0, #0
 8008378:	d107      	bne.n	800838a <__i2b+0x1e>
 800837a:	2146      	movs	r1, #70	; 0x46
 800837c:	4c05      	ldr	r4, [pc, #20]	; (8008394 <__i2b+0x28>)
 800837e:	0002      	movs	r2, r0
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <__i2b+0x2c>)
 8008382:	0020      	movs	r0, r4
 8008384:	31ff      	adds	r1, #255	; 0xff
 8008386:	f001 fc7f 	bl	8009c88 <__assert_func>
 800838a:	2301      	movs	r3, #1
 800838c:	6144      	str	r4, [r0, #20]
 800838e:	6103      	str	r3, [r0, #16]
 8008390:	bd10      	pop	{r4, pc}
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	0800abb6 	.word	0x0800abb6
 8008398:	0800aba5 	.word	0x0800aba5

0800839c <__multiply>:
 800839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800839e:	0015      	movs	r5, r2
 80083a0:	690a      	ldr	r2, [r1, #16]
 80083a2:	692b      	ldr	r3, [r5, #16]
 80083a4:	000c      	movs	r4, r1
 80083a6:	b08b      	sub	sp, #44	; 0x2c
 80083a8:	429a      	cmp	r2, r3
 80083aa:	da01      	bge.n	80083b0 <__multiply+0x14>
 80083ac:	002c      	movs	r4, r5
 80083ae:	000d      	movs	r5, r1
 80083b0:	6927      	ldr	r7, [r4, #16]
 80083b2:	692e      	ldr	r6, [r5, #16]
 80083b4:	6861      	ldr	r1, [r4, #4]
 80083b6:	19bb      	adds	r3, r7, r6
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	19ba      	adds	r2, r7, r6
 80083be:	4293      	cmp	r3, r2
 80083c0:	da00      	bge.n	80083c4 <__multiply+0x28>
 80083c2:	3101      	adds	r1, #1
 80083c4:	f7ff fe92 	bl	80080ec <_Balloc>
 80083c8:	9002      	str	r0, [sp, #8]
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d106      	bne.n	80083dc <__multiply+0x40>
 80083ce:	21b1      	movs	r1, #177	; 0xb1
 80083d0:	4b48      	ldr	r3, [pc, #288]	; (80084f4 <__multiply+0x158>)
 80083d2:	4849      	ldr	r0, [pc, #292]	; (80084f8 <__multiply+0x15c>)
 80083d4:	9a02      	ldr	r2, [sp, #8]
 80083d6:	0049      	lsls	r1, r1, #1
 80083d8:	f001 fc56 	bl	8009c88 <__assert_func>
 80083dc:	9b02      	ldr	r3, [sp, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	3314      	adds	r3, #20
 80083e2:	469c      	mov	ip, r3
 80083e4:	19bb      	adds	r3, r7, r6
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4463      	add	r3, ip
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	4663      	mov	r3, ip
 80083ee:	9904      	ldr	r1, [sp, #16]
 80083f0:	428b      	cmp	r3, r1
 80083f2:	d32a      	bcc.n	800844a <__multiply+0xae>
 80083f4:	0023      	movs	r3, r4
 80083f6:	00bf      	lsls	r7, r7, #2
 80083f8:	3314      	adds	r3, #20
 80083fa:	3514      	adds	r5, #20
 80083fc:	9308      	str	r3, [sp, #32]
 80083fe:	00b6      	lsls	r6, r6, #2
 8008400:	19db      	adds	r3, r3, r7
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	19ab      	adds	r3, r5, r6
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	2304      	movs	r3, #4
 800840a:	9306      	str	r3, [sp, #24]
 800840c:	0023      	movs	r3, r4
 800840e:	9a05      	ldr	r2, [sp, #20]
 8008410:	3315      	adds	r3, #21
 8008412:	9501      	str	r5, [sp, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d305      	bcc.n	8008424 <__multiply+0x88>
 8008418:	1b13      	subs	r3, r2, r4
 800841a:	3b15      	subs	r3, #21
 800841c:	089b      	lsrs	r3, r3, #2
 800841e:	3301      	adds	r3, #1
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	9306      	str	r3, [sp, #24]
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008428:	4293      	cmp	r3, r2
 800842a:	d310      	bcc.n	800844e <__multiply+0xb2>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd05      	ble.n	800843e <__multiply+0xa2>
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	3b04      	subs	r3, #4
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d056      	beq.n	80084ec <__multiply+0x150>
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	9a03      	ldr	r2, [sp, #12]
 8008442:	0018      	movs	r0, r3
 8008444:	611a      	str	r2, [r3, #16]
 8008446:	b00b      	add	sp, #44	; 0x2c
 8008448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800844a:	c304      	stmia	r3!, {r2}
 800844c:	e7cf      	b.n	80083ee <__multiply+0x52>
 800844e:	9b01      	ldr	r3, [sp, #4]
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	b280      	uxth	r0, r0
 8008454:	2800      	cmp	r0, #0
 8008456:	d01e      	beq.n	8008496 <__multiply+0xfa>
 8008458:	4667      	mov	r7, ip
 800845a:	2500      	movs	r5, #0
 800845c:	9e08      	ldr	r6, [sp, #32]
 800845e:	ce02      	ldmia	r6!, {r1}
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	9307      	str	r3, [sp, #28]
 8008464:	b28b      	uxth	r3, r1
 8008466:	4343      	muls	r3, r0
 8008468:	001a      	movs	r2, r3
 800846a:	466b      	mov	r3, sp
 800846c:	8b9b      	ldrh	r3, [r3, #28]
 800846e:	18d3      	adds	r3, r2, r3
 8008470:	195b      	adds	r3, r3, r5
 8008472:	0c0d      	lsrs	r5, r1, #16
 8008474:	4345      	muls	r5, r0
 8008476:	9a07      	ldr	r2, [sp, #28]
 8008478:	0c11      	lsrs	r1, r2, #16
 800847a:	1869      	adds	r1, r5, r1
 800847c:	0c1a      	lsrs	r2, r3, #16
 800847e:	188a      	adds	r2, r1, r2
 8008480:	b29b      	uxth	r3, r3
 8008482:	0c15      	lsrs	r5, r2, #16
 8008484:	0412      	lsls	r2, r2, #16
 8008486:	431a      	orrs	r2, r3
 8008488:	9b05      	ldr	r3, [sp, #20]
 800848a:	c704      	stmia	r7!, {r2}
 800848c:	42b3      	cmp	r3, r6
 800848e:	d8e6      	bhi.n	800845e <__multiply+0xc2>
 8008490:	4663      	mov	r3, ip
 8008492:	9a06      	ldr	r2, [sp, #24]
 8008494:	509d      	str	r5, [r3, r2]
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	0c00      	lsrs	r0, r0, #16
 800849c:	d020      	beq.n	80084e0 <__multiply+0x144>
 800849e:	4663      	mov	r3, ip
 80084a0:	0025      	movs	r5, r4
 80084a2:	4661      	mov	r1, ip
 80084a4:	2700      	movs	r7, #0
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3514      	adds	r5, #20
 80084aa:	682a      	ldr	r2, [r5, #0]
 80084ac:	680e      	ldr	r6, [r1, #0]
 80084ae:	b292      	uxth	r2, r2
 80084b0:	4342      	muls	r2, r0
 80084b2:	0c36      	lsrs	r6, r6, #16
 80084b4:	1992      	adds	r2, r2, r6
 80084b6:	19d2      	adds	r2, r2, r7
 80084b8:	0416      	lsls	r6, r2, #16
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	431e      	orrs	r6, r3
 80084be:	600e      	str	r6, [r1, #0]
 80084c0:	cd40      	ldmia	r5!, {r6}
 80084c2:	684b      	ldr	r3, [r1, #4]
 80084c4:	0c36      	lsrs	r6, r6, #16
 80084c6:	4346      	muls	r6, r0
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	0c12      	lsrs	r2, r2, #16
 80084cc:	18f3      	adds	r3, r6, r3
 80084ce:	189b      	adds	r3, r3, r2
 80084d0:	9a05      	ldr	r2, [sp, #20]
 80084d2:	0c1f      	lsrs	r7, r3, #16
 80084d4:	3104      	adds	r1, #4
 80084d6:	42aa      	cmp	r2, r5
 80084d8:	d8e7      	bhi.n	80084aa <__multiply+0x10e>
 80084da:	4662      	mov	r2, ip
 80084dc:	9906      	ldr	r1, [sp, #24]
 80084de:	5053      	str	r3, [r2, r1]
 80084e0:	9b01      	ldr	r3, [sp, #4]
 80084e2:	3304      	adds	r3, #4
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	2304      	movs	r3, #4
 80084e8:	449c      	add	ip, r3
 80084ea:	e79b      	b.n	8008424 <__multiply+0x88>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	e79b      	b.n	800842c <__multiply+0x90>
 80084f4:	0800aba5 	.word	0x0800aba5
 80084f8:	0800abb6 	.word	0x0800abb6

080084fc <__pow5mult>:
 80084fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fe:	2303      	movs	r3, #3
 8008500:	0015      	movs	r5, r2
 8008502:	0007      	movs	r7, r0
 8008504:	000e      	movs	r6, r1
 8008506:	401a      	ands	r2, r3
 8008508:	421d      	tst	r5, r3
 800850a:	d008      	beq.n	800851e <__pow5mult+0x22>
 800850c:	4925      	ldr	r1, [pc, #148]	; (80085a4 <__pow5mult+0xa8>)
 800850e:	3a01      	subs	r2, #1
 8008510:	0092      	lsls	r2, r2, #2
 8008512:	5852      	ldr	r2, [r2, r1]
 8008514:	2300      	movs	r3, #0
 8008516:	0031      	movs	r1, r6
 8008518:	f7ff fe50 	bl	80081bc <__multadd>
 800851c:	0006      	movs	r6, r0
 800851e:	10ad      	asrs	r5, r5, #2
 8008520:	d03d      	beq.n	800859e <__pow5mult+0xa2>
 8008522:	69fc      	ldr	r4, [r7, #28]
 8008524:	2c00      	cmp	r4, #0
 8008526:	d10f      	bne.n	8008548 <__pow5mult+0x4c>
 8008528:	2010      	movs	r0, #16
 800852a:	f7ff fd21 	bl	8007f70 <malloc>
 800852e:	1e02      	subs	r2, r0, #0
 8008530:	61f8      	str	r0, [r7, #28]
 8008532:	d105      	bne.n	8008540 <__pow5mult+0x44>
 8008534:	21b4      	movs	r1, #180	; 0xb4
 8008536:	4b1c      	ldr	r3, [pc, #112]	; (80085a8 <__pow5mult+0xac>)
 8008538:	481c      	ldr	r0, [pc, #112]	; (80085ac <__pow5mult+0xb0>)
 800853a:	31ff      	adds	r1, #255	; 0xff
 800853c:	f001 fba4 	bl	8009c88 <__assert_func>
 8008540:	6044      	str	r4, [r0, #4]
 8008542:	6084      	str	r4, [r0, #8]
 8008544:	6004      	str	r4, [r0, #0]
 8008546:	60c4      	str	r4, [r0, #12]
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	689c      	ldr	r4, [r3, #8]
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	2c00      	cmp	r4, #0
 8008550:	d108      	bne.n	8008564 <__pow5mult+0x68>
 8008552:	0038      	movs	r0, r7
 8008554:	4916      	ldr	r1, [pc, #88]	; (80085b0 <__pow5mult+0xb4>)
 8008556:	f7ff ff09 	bl	800836c <__i2b>
 800855a:	9b01      	ldr	r3, [sp, #4]
 800855c:	0004      	movs	r4, r0
 800855e:	6098      	str	r0, [r3, #8]
 8008560:	2300      	movs	r3, #0
 8008562:	6003      	str	r3, [r0, #0]
 8008564:	2301      	movs	r3, #1
 8008566:	421d      	tst	r5, r3
 8008568:	d00a      	beq.n	8008580 <__pow5mult+0x84>
 800856a:	0031      	movs	r1, r6
 800856c:	0022      	movs	r2, r4
 800856e:	0038      	movs	r0, r7
 8008570:	f7ff ff14 	bl	800839c <__multiply>
 8008574:	0031      	movs	r1, r6
 8008576:	9001      	str	r0, [sp, #4]
 8008578:	0038      	movs	r0, r7
 800857a:	f7ff fdfb 	bl	8008174 <_Bfree>
 800857e:	9e01      	ldr	r6, [sp, #4]
 8008580:	106d      	asrs	r5, r5, #1
 8008582:	d00c      	beq.n	800859e <__pow5mult+0xa2>
 8008584:	6820      	ldr	r0, [r4, #0]
 8008586:	2800      	cmp	r0, #0
 8008588:	d107      	bne.n	800859a <__pow5mult+0x9e>
 800858a:	0022      	movs	r2, r4
 800858c:	0021      	movs	r1, r4
 800858e:	0038      	movs	r0, r7
 8008590:	f7ff ff04 	bl	800839c <__multiply>
 8008594:	2300      	movs	r3, #0
 8008596:	6020      	str	r0, [r4, #0]
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	0004      	movs	r4, r0
 800859c:	e7e2      	b.n	8008564 <__pow5mult+0x68>
 800859e:	0030      	movs	r0, r6
 80085a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085a2:	46c0      	nop			; (mov r8, r8)
 80085a4:	0800ad00 	.word	0x0800ad00
 80085a8:	0800ab36 	.word	0x0800ab36
 80085ac:	0800abb6 	.word	0x0800abb6
 80085b0:	00000271 	.word	0x00000271

080085b4 <__lshift>:
 80085b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b6:	000c      	movs	r4, r1
 80085b8:	0017      	movs	r7, r2
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	1155      	asrs	r5, r2, #5
 80085be:	b087      	sub	sp, #28
 80085c0:	18eb      	adds	r3, r5, r3
 80085c2:	9302      	str	r3, [sp, #8]
 80085c4:	3301      	adds	r3, #1
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	6849      	ldr	r1, [r1, #4]
 80085ca:	68a3      	ldr	r3, [r4, #8]
 80085cc:	9004      	str	r0, [sp, #16]
 80085ce:	9a01      	ldr	r2, [sp, #4]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	db10      	blt.n	80085f6 <__lshift+0x42>
 80085d4:	9804      	ldr	r0, [sp, #16]
 80085d6:	f7ff fd89 	bl	80080ec <_Balloc>
 80085da:	2300      	movs	r3, #0
 80085dc:	0002      	movs	r2, r0
 80085de:	0006      	movs	r6, r0
 80085e0:	0019      	movs	r1, r3
 80085e2:	3214      	adds	r2, #20
 80085e4:	4298      	cmp	r0, r3
 80085e6:	d10c      	bne.n	8008602 <__lshift+0x4e>
 80085e8:	31df      	adds	r1, #223	; 0xdf
 80085ea:	0032      	movs	r2, r6
 80085ec:	4b26      	ldr	r3, [pc, #152]	; (8008688 <__lshift+0xd4>)
 80085ee:	4827      	ldr	r0, [pc, #156]	; (800868c <__lshift+0xd8>)
 80085f0:	31ff      	adds	r1, #255	; 0xff
 80085f2:	f001 fb49 	bl	8009c88 <__assert_func>
 80085f6:	3101      	adds	r1, #1
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	e7e8      	b.n	80085ce <__lshift+0x1a>
 80085fc:	0098      	lsls	r0, r3, #2
 80085fe:	5011      	str	r1, [r2, r0]
 8008600:	3301      	adds	r3, #1
 8008602:	42ab      	cmp	r3, r5
 8008604:	dbfa      	blt.n	80085fc <__lshift+0x48>
 8008606:	43eb      	mvns	r3, r5
 8008608:	17db      	asrs	r3, r3, #31
 800860a:	401d      	ands	r5, r3
 800860c:	211f      	movs	r1, #31
 800860e:	0023      	movs	r3, r4
 8008610:	0038      	movs	r0, r7
 8008612:	00ad      	lsls	r5, r5, #2
 8008614:	1955      	adds	r5, r2, r5
 8008616:	6922      	ldr	r2, [r4, #16]
 8008618:	3314      	adds	r3, #20
 800861a:	0092      	lsls	r2, r2, #2
 800861c:	4008      	ands	r0, r1
 800861e:	4684      	mov	ip, r0
 8008620:	189a      	adds	r2, r3, r2
 8008622:	420f      	tst	r7, r1
 8008624:	d02a      	beq.n	800867c <__lshift+0xc8>
 8008626:	3101      	adds	r1, #1
 8008628:	1a09      	subs	r1, r1, r0
 800862a:	9105      	str	r1, [sp, #20]
 800862c:	2100      	movs	r1, #0
 800862e:	9503      	str	r5, [sp, #12]
 8008630:	4667      	mov	r7, ip
 8008632:	6818      	ldr	r0, [r3, #0]
 8008634:	40b8      	lsls	r0, r7
 8008636:	4308      	orrs	r0, r1
 8008638:	9903      	ldr	r1, [sp, #12]
 800863a:	c101      	stmia	r1!, {r0}
 800863c:	9103      	str	r1, [sp, #12]
 800863e:	9805      	ldr	r0, [sp, #20]
 8008640:	cb02      	ldmia	r3!, {r1}
 8008642:	40c1      	lsrs	r1, r0
 8008644:	429a      	cmp	r2, r3
 8008646:	d8f3      	bhi.n	8008630 <__lshift+0x7c>
 8008648:	0020      	movs	r0, r4
 800864a:	3015      	adds	r0, #21
 800864c:	2304      	movs	r3, #4
 800864e:	4282      	cmp	r2, r0
 8008650:	d304      	bcc.n	800865c <__lshift+0xa8>
 8008652:	1b13      	subs	r3, r2, r4
 8008654:	3b15      	subs	r3, #21
 8008656:	089b      	lsrs	r3, r3, #2
 8008658:	3301      	adds	r3, #1
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	50e9      	str	r1, [r5, r3]
 800865e:	2900      	cmp	r1, #0
 8008660:	d002      	beq.n	8008668 <__lshift+0xb4>
 8008662:	9b02      	ldr	r3, [sp, #8]
 8008664:	3302      	adds	r3, #2
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	9804      	ldr	r0, [sp, #16]
 800866c:	3b01      	subs	r3, #1
 800866e:	0021      	movs	r1, r4
 8008670:	6133      	str	r3, [r6, #16]
 8008672:	f7ff fd7f 	bl	8008174 <_Bfree>
 8008676:	0030      	movs	r0, r6
 8008678:	b007      	add	sp, #28
 800867a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867c:	cb02      	ldmia	r3!, {r1}
 800867e:	c502      	stmia	r5!, {r1}
 8008680:	429a      	cmp	r2, r3
 8008682:	d8fb      	bhi.n	800867c <__lshift+0xc8>
 8008684:	e7f0      	b.n	8008668 <__lshift+0xb4>
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	0800aba5 	.word	0x0800aba5
 800868c:	0800abb6 	.word	0x0800abb6

08008690 <__mcmp>:
 8008690:	b530      	push	{r4, r5, lr}
 8008692:	690b      	ldr	r3, [r1, #16]
 8008694:	6904      	ldr	r4, [r0, #16]
 8008696:	0002      	movs	r2, r0
 8008698:	1ae0      	subs	r0, r4, r3
 800869a:	429c      	cmp	r4, r3
 800869c:	d10e      	bne.n	80086bc <__mcmp+0x2c>
 800869e:	3214      	adds	r2, #20
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	3114      	adds	r1, #20
 80086a4:	0014      	movs	r4, r2
 80086a6:	18c9      	adds	r1, r1, r3
 80086a8:	18d2      	adds	r2, r2, r3
 80086aa:	3a04      	subs	r2, #4
 80086ac:	3904      	subs	r1, #4
 80086ae:	6815      	ldr	r5, [r2, #0]
 80086b0:	680b      	ldr	r3, [r1, #0]
 80086b2:	429d      	cmp	r5, r3
 80086b4:	d003      	beq.n	80086be <__mcmp+0x2e>
 80086b6:	2001      	movs	r0, #1
 80086b8:	429d      	cmp	r5, r3
 80086ba:	d303      	bcc.n	80086c4 <__mcmp+0x34>
 80086bc:	bd30      	pop	{r4, r5, pc}
 80086be:	4294      	cmp	r4, r2
 80086c0:	d3f3      	bcc.n	80086aa <__mcmp+0x1a>
 80086c2:	e7fb      	b.n	80086bc <__mcmp+0x2c>
 80086c4:	4240      	negs	r0, r0
 80086c6:	e7f9      	b.n	80086bc <__mcmp+0x2c>

080086c8 <__mdiff>:
 80086c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ca:	000e      	movs	r6, r1
 80086cc:	0007      	movs	r7, r0
 80086ce:	0011      	movs	r1, r2
 80086d0:	0030      	movs	r0, r6
 80086d2:	b087      	sub	sp, #28
 80086d4:	0014      	movs	r4, r2
 80086d6:	f7ff ffdb 	bl	8008690 <__mcmp>
 80086da:	1e05      	subs	r5, r0, #0
 80086dc:	d110      	bne.n	8008700 <__mdiff+0x38>
 80086de:	0001      	movs	r1, r0
 80086e0:	0038      	movs	r0, r7
 80086e2:	f7ff fd03 	bl	80080ec <_Balloc>
 80086e6:	1e02      	subs	r2, r0, #0
 80086e8:	d104      	bne.n	80086f4 <__mdiff+0x2c>
 80086ea:	4b3f      	ldr	r3, [pc, #252]	; (80087e8 <__mdiff+0x120>)
 80086ec:	483f      	ldr	r0, [pc, #252]	; (80087ec <__mdiff+0x124>)
 80086ee:	4940      	ldr	r1, [pc, #256]	; (80087f0 <__mdiff+0x128>)
 80086f0:	f001 faca 	bl	8009c88 <__assert_func>
 80086f4:	2301      	movs	r3, #1
 80086f6:	6145      	str	r5, [r0, #20]
 80086f8:	6103      	str	r3, [r0, #16]
 80086fa:	0010      	movs	r0, r2
 80086fc:	b007      	add	sp, #28
 80086fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008700:	2301      	movs	r3, #1
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	2800      	cmp	r0, #0
 8008706:	db04      	blt.n	8008712 <__mdiff+0x4a>
 8008708:	0023      	movs	r3, r4
 800870a:	0034      	movs	r4, r6
 800870c:	001e      	movs	r6, r3
 800870e:	2300      	movs	r3, #0
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	0038      	movs	r0, r7
 8008714:	6861      	ldr	r1, [r4, #4]
 8008716:	f7ff fce9 	bl	80080ec <_Balloc>
 800871a:	1e02      	subs	r2, r0, #0
 800871c:	d103      	bne.n	8008726 <__mdiff+0x5e>
 800871e:	4b32      	ldr	r3, [pc, #200]	; (80087e8 <__mdiff+0x120>)
 8008720:	4832      	ldr	r0, [pc, #200]	; (80087ec <__mdiff+0x124>)
 8008722:	4934      	ldr	r1, [pc, #208]	; (80087f4 <__mdiff+0x12c>)
 8008724:	e7e4      	b.n	80086f0 <__mdiff+0x28>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	2700      	movs	r7, #0
 800872a:	60c3      	str	r3, [r0, #12]
 800872c:	6920      	ldr	r0, [r4, #16]
 800872e:	3414      	adds	r4, #20
 8008730:	0083      	lsls	r3, r0, #2
 8008732:	18e3      	adds	r3, r4, r3
 8008734:	0021      	movs	r1, r4
 8008736:	9401      	str	r4, [sp, #4]
 8008738:	0034      	movs	r4, r6
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	6933      	ldr	r3, [r6, #16]
 800873e:	3414      	adds	r4, #20
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	18e3      	adds	r3, r4, r3
 8008744:	9303      	str	r3, [sp, #12]
 8008746:	0013      	movs	r3, r2
 8008748:	3314      	adds	r3, #20
 800874a:	469c      	mov	ip, r3
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	9104      	str	r1, [sp, #16]
 8008750:	9b04      	ldr	r3, [sp, #16]
 8008752:	cc02      	ldmia	r4!, {r1}
 8008754:	cb20      	ldmia	r3!, {r5}
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	b2ab      	uxth	r3, r5
 800875a:	19df      	adds	r7, r3, r7
 800875c:	b28b      	uxth	r3, r1
 800875e:	1afb      	subs	r3, r7, r3
 8008760:	0c09      	lsrs	r1, r1, #16
 8008762:	0c2d      	lsrs	r5, r5, #16
 8008764:	1a6d      	subs	r5, r5, r1
 8008766:	1419      	asrs	r1, r3, #16
 8008768:	1869      	adds	r1, r5, r1
 800876a:	b29b      	uxth	r3, r3
 800876c:	140f      	asrs	r7, r1, #16
 800876e:	0409      	lsls	r1, r1, #16
 8008770:	4319      	orrs	r1, r3
 8008772:	4663      	mov	r3, ip
 8008774:	c302      	stmia	r3!, {r1}
 8008776:	469c      	mov	ip, r3
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	42a3      	cmp	r3, r4
 800877c:	d8e8      	bhi.n	8008750 <__mdiff+0x88>
 800877e:	0031      	movs	r1, r6
 8008780:	9c03      	ldr	r4, [sp, #12]
 8008782:	3115      	adds	r1, #21
 8008784:	2304      	movs	r3, #4
 8008786:	428c      	cmp	r4, r1
 8008788:	d304      	bcc.n	8008794 <__mdiff+0xcc>
 800878a:	1ba3      	subs	r3, r4, r6
 800878c:	3b15      	subs	r3, #21
 800878e:	089b      	lsrs	r3, r3, #2
 8008790:	3301      	adds	r3, #1
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	9901      	ldr	r1, [sp, #4]
 8008796:	18cd      	adds	r5, r1, r3
 8008798:	9905      	ldr	r1, [sp, #20]
 800879a:	002e      	movs	r6, r5
 800879c:	18cb      	adds	r3, r1, r3
 800879e:	469c      	mov	ip, r3
 80087a0:	9902      	ldr	r1, [sp, #8]
 80087a2:	428e      	cmp	r6, r1
 80087a4:	d310      	bcc.n	80087c8 <__mdiff+0x100>
 80087a6:	9e02      	ldr	r6, [sp, #8]
 80087a8:	1ee9      	subs	r1, r5, #3
 80087aa:	2400      	movs	r4, #0
 80087ac:	428e      	cmp	r6, r1
 80087ae:	d304      	bcc.n	80087ba <__mdiff+0xf2>
 80087b0:	0031      	movs	r1, r6
 80087b2:	3103      	adds	r1, #3
 80087b4:	1b49      	subs	r1, r1, r5
 80087b6:	0889      	lsrs	r1, r1, #2
 80087b8:	008c      	lsls	r4, r1, #2
 80087ba:	191b      	adds	r3, r3, r4
 80087bc:	3b04      	subs	r3, #4
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	2900      	cmp	r1, #0
 80087c2:	d00f      	beq.n	80087e4 <__mdiff+0x11c>
 80087c4:	6110      	str	r0, [r2, #16]
 80087c6:	e798      	b.n	80086fa <__mdiff+0x32>
 80087c8:	ce02      	ldmia	r6!, {r1}
 80087ca:	b28c      	uxth	r4, r1
 80087cc:	19e4      	adds	r4, r4, r7
 80087ce:	0c0f      	lsrs	r7, r1, #16
 80087d0:	1421      	asrs	r1, r4, #16
 80087d2:	1879      	adds	r1, r7, r1
 80087d4:	b2a4      	uxth	r4, r4
 80087d6:	140f      	asrs	r7, r1, #16
 80087d8:	0409      	lsls	r1, r1, #16
 80087da:	4321      	orrs	r1, r4
 80087dc:	4664      	mov	r4, ip
 80087de:	c402      	stmia	r4!, {r1}
 80087e0:	46a4      	mov	ip, r4
 80087e2:	e7dd      	b.n	80087a0 <__mdiff+0xd8>
 80087e4:	3801      	subs	r0, #1
 80087e6:	e7e9      	b.n	80087bc <__mdiff+0xf4>
 80087e8:	0800aba5 	.word	0x0800aba5
 80087ec:	0800abb6 	.word	0x0800abb6
 80087f0:	00000237 	.word	0x00000237
 80087f4:	00000245 	.word	0x00000245

080087f8 <__ulp>:
 80087f8:	2000      	movs	r0, #0
 80087fa:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <__ulp+0x30>)
 80087fc:	4019      	ands	r1, r3
 80087fe:	4b0b      	ldr	r3, [pc, #44]	; (800882c <__ulp+0x34>)
 8008800:	18c9      	adds	r1, r1, r3
 8008802:	4281      	cmp	r1, r0
 8008804:	dc06      	bgt.n	8008814 <__ulp+0x1c>
 8008806:	4249      	negs	r1, r1
 8008808:	150b      	asrs	r3, r1, #20
 800880a:	2b13      	cmp	r3, #19
 800880c:	dc03      	bgt.n	8008816 <__ulp+0x1e>
 800880e:	2180      	movs	r1, #128	; 0x80
 8008810:	0309      	lsls	r1, r1, #12
 8008812:	4119      	asrs	r1, r3
 8008814:	4770      	bx	lr
 8008816:	3b14      	subs	r3, #20
 8008818:	2001      	movs	r0, #1
 800881a:	2b1e      	cmp	r3, #30
 800881c:	dc02      	bgt.n	8008824 <__ulp+0x2c>
 800881e:	2080      	movs	r0, #128	; 0x80
 8008820:	0600      	lsls	r0, r0, #24
 8008822:	40d8      	lsrs	r0, r3
 8008824:	2100      	movs	r1, #0
 8008826:	e7f5      	b.n	8008814 <__ulp+0x1c>
 8008828:	7ff00000 	.word	0x7ff00000
 800882c:	fcc00000 	.word	0xfcc00000

08008830 <__b2d>:
 8008830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008832:	0006      	movs	r6, r0
 8008834:	6903      	ldr	r3, [r0, #16]
 8008836:	3614      	adds	r6, #20
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	18f3      	adds	r3, r6, r3
 800883c:	1f1d      	subs	r5, r3, #4
 800883e:	682c      	ldr	r4, [r5, #0]
 8008840:	000f      	movs	r7, r1
 8008842:	0020      	movs	r0, r4
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	f7ff fd49 	bl	80082dc <__hi0bits>
 800884a:	2220      	movs	r2, #32
 800884c:	1a12      	subs	r2, r2, r0
 800884e:	603a      	str	r2, [r7, #0]
 8008850:	0003      	movs	r3, r0
 8008852:	4a1c      	ldr	r2, [pc, #112]	; (80088c4 <__b2d+0x94>)
 8008854:	280a      	cmp	r0, #10
 8008856:	dc15      	bgt.n	8008884 <__b2d+0x54>
 8008858:	210b      	movs	r1, #11
 800885a:	0027      	movs	r7, r4
 800885c:	1a09      	subs	r1, r1, r0
 800885e:	40cf      	lsrs	r7, r1
 8008860:	433a      	orrs	r2, r7
 8008862:	468c      	mov	ip, r1
 8008864:	0011      	movs	r1, r2
 8008866:	2200      	movs	r2, #0
 8008868:	42ae      	cmp	r6, r5
 800886a:	d202      	bcs.n	8008872 <__b2d+0x42>
 800886c:	9a01      	ldr	r2, [sp, #4]
 800886e:	3a08      	subs	r2, #8
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	3315      	adds	r3, #21
 8008874:	409c      	lsls	r4, r3
 8008876:	4663      	mov	r3, ip
 8008878:	0027      	movs	r7, r4
 800887a:	40da      	lsrs	r2, r3
 800887c:	4317      	orrs	r7, r2
 800887e:	0038      	movs	r0, r7
 8008880:	b003      	add	sp, #12
 8008882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008884:	2700      	movs	r7, #0
 8008886:	42ae      	cmp	r6, r5
 8008888:	d202      	bcs.n	8008890 <__b2d+0x60>
 800888a:	9d01      	ldr	r5, [sp, #4]
 800888c:	3d08      	subs	r5, #8
 800888e:	682f      	ldr	r7, [r5, #0]
 8008890:	210b      	movs	r1, #11
 8008892:	4249      	negs	r1, r1
 8008894:	468c      	mov	ip, r1
 8008896:	449c      	add	ip, r3
 8008898:	2b0b      	cmp	r3, #11
 800889a:	d010      	beq.n	80088be <__b2d+0x8e>
 800889c:	4661      	mov	r1, ip
 800889e:	2320      	movs	r3, #32
 80088a0:	408c      	lsls	r4, r1
 80088a2:	1a5b      	subs	r3, r3, r1
 80088a4:	0039      	movs	r1, r7
 80088a6:	40d9      	lsrs	r1, r3
 80088a8:	430c      	orrs	r4, r1
 80088aa:	4322      	orrs	r2, r4
 80088ac:	0011      	movs	r1, r2
 80088ae:	2200      	movs	r2, #0
 80088b0:	42b5      	cmp	r5, r6
 80088b2:	d901      	bls.n	80088b8 <__b2d+0x88>
 80088b4:	3d04      	subs	r5, #4
 80088b6:	682a      	ldr	r2, [r5, #0]
 80088b8:	4664      	mov	r4, ip
 80088ba:	40a7      	lsls	r7, r4
 80088bc:	e7dd      	b.n	800887a <__b2d+0x4a>
 80088be:	4322      	orrs	r2, r4
 80088c0:	0011      	movs	r1, r2
 80088c2:	e7dc      	b.n	800887e <__b2d+0x4e>
 80088c4:	3ff00000 	.word	0x3ff00000

080088c8 <__d2b>:
 80088c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ca:	2101      	movs	r1, #1
 80088cc:	0014      	movs	r4, r2
 80088ce:	001d      	movs	r5, r3
 80088d0:	9f08      	ldr	r7, [sp, #32]
 80088d2:	f7ff fc0b 	bl	80080ec <_Balloc>
 80088d6:	1e06      	subs	r6, r0, #0
 80088d8:	d105      	bne.n	80088e6 <__d2b+0x1e>
 80088da:	0032      	movs	r2, r6
 80088dc:	4b24      	ldr	r3, [pc, #144]	; (8008970 <__d2b+0xa8>)
 80088de:	4825      	ldr	r0, [pc, #148]	; (8008974 <__d2b+0xac>)
 80088e0:	4925      	ldr	r1, [pc, #148]	; (8008978 <__d2b+0xb0>)
 80088e2:	f001 f9d1 	bl	8009c88 <__assert_func>
 80088e6:	032b      	lsls	r3, r5, #12
 80088e8:	006d      	lsls	r5, r5, #1
 80088ea:	0b1b      	lsrs	r3, r3, #12
 80088ec:	0d6d      	lsrs	r5, r5, #21
 80088ee:	d125      	bne.n	800893c <__d2b+0x74>
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	2c00      	cmp	r4, #0
 80088f4:	d028      	beq.n	8008948 <__d2b+0x80>
 80088f6:	4668      	mov	r0, sp
 80088f8:	9400      	str	r4, [sp, #0]
 80088fa:	f7ff fd09 	bl	8008310 <__lo0bits>
 80088fe:	9b01      	ldr	r3, [sp, #4]
 8008900:	9900      	ldr	r1, [sp, #0]
 8008902:	2800      	cmp	r0, #0
 8008904:	d01e      	beq.n	8008944 <__d2b+0x7c>
 8008906:	2220      	movs	r2, #32
 8008908:	001c      	movs	r4, r3
 800890a:	1a12      	subs	r2, r2, r0
 800890c:	4094      	lsls	r4, r2
 800890e:	0022      	movs	r2, r4
 8008910:	40c3      	lsrs	r3, r0
 8008912:	430a      	orrs	r2, r1
 8008914:	6172      	str	r2, [r6, #20]
 8008916:	9301      	str	r3, [sp, #4]
 8008918:	9c01      	ldr	r4, [sp, #4]
 800891a:	61b4      	str	r4, [r6, #24]
 800891c:	1e63      	subs	r3, r4, #1
 800891e:	419c      	sbcs	r4, r3
 8008920:	3401      	adds	r4, #1
 8008922:	6134      	str	r4, [r6, #16]
 8008924:	2d00      	cmp	r5, #0
 8008926:	d017      	beq.n	8008958 <__d2b+0x90>
 8008928:	2435      	movs	r4, #53	; 0x35
 800892a:	4b14      	ldr	r3, [pc, #80]	; (800897c <__d2b+0xb4>)
 800892c:	18ed      	adds	r5, r5, r3
 800892e:	182d      	adds	r5, r5, r0
 8008930:	603d      	str	r5, [r7, #0]
 8008932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008934:	1a24      	subs	r4, r4, r0
 8008936:	601c      	str	r4, [r3, #0]
 8008938:	0030      	movs	r0, r6
 800893a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800893c:	2280      	movs	r2, #128	; 0x80
 800893e:	0352      	lsls	r2, r2, #13
 8008940:	4313      	orrs	r3, r2
 8008942:	e7d5      	b.n	80088f0 <__d2b+0x28>
 8008944:	6171      	str	r1, [r6, #20]
 8008946:	e7e7      	b.n	8008918 <__d2b+0x50>
 8008948:	a801      	add	r0, sp, #4
 800894a:	f7ff fce1 	bl	8008310 <__lo0bits>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	2401      	movs	r4, #1
 8008952:	6173      	str	r3, [r6, #20]
 8008954:	3020      	adds	r0, #32
 8008956:	e7e4      	b.n	8008922 <__d2b+0x5a>
 8008958:	4b09      	ldr	r3, [pc, #36]	; (8008980 <__d2b+0xb8>)
 800895a:	18c0      	adds	r0, r0, r3
 800895c:	4b09      	ldr	r3, [pc, #36]	; (8008984 <__d2b+0xbc>)
 800895e:	6038      	str	r0, [r7, #0]
 8008960:	18e3      	adds	r3, r4, r3
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	18f3      	adds	r3, r6, r3
 8008966:	6958      	ldr	r0, [r3, #20]
 8008968:	f7ff fcb8 	bl	80082dc <__hi0bits>
 800896c:	0164      	lsls	r4, r4, #5
 800896e:	e7e0      	b.n	8008932 <__d2b+0x6a>
 8008970:	0800aba5 	.word	0x0800aba5
 8008974:	0800abb6 	.word	0x0800abb6
 8008978:	0000030f 	.word	0x0000030f
 800897c:	fffffbcd 	.word	0xfffffbcd
 8008980:	fffffbce 	.word	0xfffffbce
 8008984:	3fffffff 	.word	0x3fffffff

08008988 <__ratio>:
 8008988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800898a:	b087      	sub	sp, #28
 800898c:	000f      	movs	r7, r1
 800898e:	a904      	add	r1, sp, #16
 8008990:	0006      	movs	r6, r0
 8008992:	f7ff ff4d 	bl	8008830 <__b2d>
 8008996:	9000      	str	r0, [sp, #0]
 8008998:	9101      	str	r1, [sp, #4]
 800899a:	9c00      	ldr	r4, [sp, #0]
 800899c:	9d01      	ldr	r5, [sp, #4]
 800899e:	0038      	movs	r0, r7
 80089a0:	a905      	add	r1, sp, #20
 80089a2:	f7ff ff45 	bl	8008830 <__b2d>
 80089a6:	9002      	str	r0, [sp, #8]
 80089a8:	9103      	str	r1, [sp, #12]
 80089aa:	9a02      	ldr	r2, [sp, #8]
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	6930      	ldr	r0, [r6, #16]
 80089b0:	6939      	ldr	r1, [r7, #16]
 80089b2:	9e04      	ldr	r6, [sp, #16]
 80089b4:	1a40      	subs	r0, r0, r1
 80089b6:	9905      	ldr	r1, [sp, #20]
 80089b8:	0140      	lsls	r0, r0, #5
 80089ba:	1a71      	subs	r1, r6, r1
 80089bc:	1841      	adds	r1, r0, r1
 80089be:	0508      	lsls	r0, r1, #20
 80089c0:	2900      	cmp	r1, #0
 80089c2:	dd07      	ble.n	80089d4 <__ratio+0x4c>
 80089c4:	9901      	ldr	r1, [sp, #4]
 80089c6:	1845      	adds	r5, r0, r1
 80089c8:	0020      	movs	r0, r4
 80089ca:	0029      	movs	r1, r5
 80089cc:	f7f8 fb22 	bl	8001014 <__aeabi_ddiv>
 80089d0:	b007      	add	sp, #28
 80089d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d4:	9903      	ldr	r1, [sp, #12]
 80089d6:	1a0b      	subs	r3, r1, r0
 80089d8:	e7f6      	b.n	80089c8 <__ratio+0x40>

080089da <__copybits>:
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	0014      	movs	r4, r2
 80089de:	0005      	movs	r5, r0
 80089e0:	3901      	subs	r1, #1
 80089e2:	6913      	ldr	r3, [r2, #16]
 80089e4:	1149      	asrs	r1, r1, #5
 80089e6:	3101      	adds	r1, #1
 80089e8:	0089      	lsls	r1, r1, #2
 80089ea:	3414      	adds	r4, #20
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	1841      	adds	r1, r0, r1
 80089f0:	18e3      	adds	r3, r4, r3
 80089f2:	42a3      	cmp	r3, r4
 80089f4:	d80d      	bhi.n	8008a12 <__copybits+0x38>
 80089f6:	0014      	movs	r4, r2
 80089f8:	3411      	adds	r4, #17
 80089fa:	2500      	movs	r5, #0
 80089fc:	429c      	cmp	r4, r3
 80089fe:	d803      	bhi.n	8008a08 <__copybits+0x2e>
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	3b11      	subs	r3, #17
 8008a04:	089b      	lsrs	r3, r3, #2
 8008a06:	009d      	lsls	r5, r3, #2
 8008a08:	2300      	movs	r3, #0
 8008a0a:	1940      	adds	r0, r0, r5
 8008a0c:	4281      	cmp	r1, r0
 8008a0e:	d803      	bhi.n	8008a18 <__copybits+0x3e>
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	cc40      	ldmia	r4!, {r6}
 8008a14:	c540      	stmia	r5!, {r6}
 8008a16:	e7ec      	b.n	80089f2 <__copybits+0x18>
 8008a18:	c008      	stmia	r0!, {r3}
 8008a1a:	e7f7      	b.n	8008a0c <__copybits+0x32>

08008a1c <__any_on>:
 8008a1c:	0002      	movs	r2, r0
 8008a1e:	6900      	ldr	r0, [r0, #16]
 8008a20:	b510      	push	{r4, lr}
 8008a22:	3214      	adds	r2, #20
 8008a24:	114b      	asrs	r3, r1, #5
 8008a26:	4298      	cmp	r0, r3
 8008a28:	db13      	blt.n	8008a52 <__any_on+0x36>
 8008a2a:	dd0c      	ble.n	8008a46 <__any_on+0x2a>
 8008a2c:	241f      	movs	r4, #31
 8008a2e:	0008      	movs	r0, r1
 8008a30:	4020      	ands	r0, r4
 8008a32:	4221      	tst	r1, r4
 8008a34:	d007      	beq.n	8008a46 <__any_on+0x2a>
 8008a36:	0099      	lsls	r1, r3, #2
 8008a38:	588c      	ldr	r4, [r1, r2]
 8008a3a:	0021      	movs	r1, r4
 8008a3c:	40c1      	lsrs	r1, r0
 8008a3e:	4081      	lsls	r1, r0
 8008a40:	2001      	movs	r0, #1
 8008a42:	428c      	cmp	r4, r1
 8008a44:	d104      	bne.n	8008a50 <__any_on+0x34>
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	18d3      	adds	r3, r2, r3
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d803      	bhi.n	8008a56 <__any_on+0x3a>
 8008a4e:	2000      	movs	r0, #0
 8008a50:	bd10      	pop	{r4, pc}
 8008a52:	0003      	movs	r3, r0
 8008a54:	e7f7      	b.n	8008a46 <__any_on+0x2a>
 8008a56:	3b04      	subs	r3, #4
 8008a58:	6819      	ldr	r1, [r3, #0]
 8008a5a:	2900      	cmp	r1, #0
 8008a5c:	d0f5      	beq.n	8008a4a <__any_on+0x2e>
 8008a5e:	2001      	movs	r0, #1
 8008a60:	e7f6      	b.n	8008a50 <__any_on+0x34>
	...

08008a64 <sulp>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	0016      	movs	r6, r2
 8008a68:	000d      	movs	r5, r1
 8008a6a:	f7ff fec5 	bl	80087f8 <__ulp>
 8008a6e:	2e00      	cmp	r6, #0
 8008a70:	d00d      	beq.n	8008a8e <sulp+0x2a>
 8008a72:	236b      	movs	r3, #107	; 0x6b
 8008a74:	006a      	lsls	r2, r5, #1
 8008a76:	0d52      	lsrs	r2, r2, #21
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dd07      	ble.n	8008a8e <sulp+0x2a>
 8008a7e:	2400      	movs	r4, #0
 8008a80:	4a03      	ldr	r2, [pc, #12]	; (8008a90 <sulp+0x2c>)
 8008a82:	051b      	lsls	r3, r3, #20
 8008a84:	189d      	adds	r5, r3, r2
 8008a86:	002b      	movs	r3, r5
 8008a88:	0022      	movs	r2, r4
 8008a8a:	f7f8 febd 	bl	8001808 <__aeabi_dmul>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	3ff00000 	.word	0x3ff00000

08008a94 <_strtod_l>:
 8008a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a96:	b0a1      	sub	sp, #132	; 0x84
 8008a98:	9219      	str	r2, [sp, #100]	; 0x64
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2600      	movs	r6, #0
 8008a9e:	2700      	movs	r7, #0
 8008aa0:	9004      	str	r0, [sp, #16]
 8008aa2:	9107      	str	r1, [sp, #28]
 8008aa4:	921c      	str	r2, [sp, #112]	; 0x70
 8008aa6:	911b      	str	r1, [sp, #108]	; 0x6c
 8008aa8:	780a      	ldrb	r2, [r1, #0]
 8008aaa:	2a2b      	cmp	r2, #43	; 0x2b
 8008aac:	d055      	beq.n	8008b5a <_strtod_l+0xc6>
 8008aae:	d841      	bhi.n	8008b34 <_strtod_l+0xa0>
 8008ab0:	2a0d      	cmp	r2, #13
 8008ab2:	d83b      	bhi.n	8008b2c <_strtod_l+0x98>
 8008ab4:	2a08      	cmp	r2, #8
 8008ab6:	d83b      	bhi.n	8008b30 <_strtod_l+0x9c>
 8008ab8:	2a00      	cmp	r2, #0
 8008aba:	d044      	beq.n	8008b46 <_strtod_l+0xb2>
 8008abc:	2200      	movs	r2, #0
 8008abe:	920f      	str	r2, [sp, #60]	; 0x3c
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008ac4:	9109      	str	r1, [sp, #36]	; 0x24
 8008ac6:	782a      	ldrb	r2, [r5, #0]
 8008ac8:	2a30      	cmp	r2, #48	; 0x30
 8008aca:	d000      	beq.n	8008ace <_strtod_l+0x3a>
 8008acc:	e085      	b.n	8008bda <_strtod_l+0x146>
 8008ace:	786a      	ldrb	r2, [r5, #1]
 8008ad0:	3120      	adds	r1, #32
 8008ad2:	438a      	bics	r2, r1
 8008ad4:	2a58      	cmp	r2, #88	; 0x58
 8008ad6:	d000      	beq.n	8008ada <_strtod_l+0x46>
 8008ad8:	e075      	b.n	8008bc6 <_strtod_l+0x132>
 8008ada:	9302      	str	r3, [sp, #8]
 8008adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ade:	4a97      	ldr	r2, [pc, #604]	; (8008d3c <_strtod_l+0x2a8>)
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	ab1c      	add	r3, sp, #112	; 0x70
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	9804      	ldr	r0, [sp, #16]
 8008ae8:	ab1d      	add	r3, sp, #116	; 0x74
 8008aea:	a91b      	add	r1, sp, #108	; 0x6c
 8008aec:	f001 f982 	bl	8009df4 <__gethex>
 8008af0:	230f      	movs	r3, #15
 8008af2:	0002      	movs	r2, r0
 8008af4:	401a      	ands	r2, r3
 8008af6:	0004      	movs	r4, r0
 8008af8:	9205      	str	r2, [sp, #20]
 8008afa:	4218      	tst	r0, r3
 8008afc:	d005      	beq.n	8008b0a <_strtod_l+0x76>
 8008afe:	2a06      	cmp	r2, #6
 8008b00:	d12d      	bne.n	8008b5e <_strtod_l+0xca>
 8008b02:	1c6b      	adds	r3, r5, #1
 8008b04:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b06:	2300      	movs	r3, #0
 8008b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <_strtod_l+0x82>
 8008b10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01b      	beq.n	8008b54 <_strtod_l+0xc0>
 8008b1c:	2380      	movs	r3, #128	; 0x80
 8008b1e:	0032      	movs	r2, r6
 8008b20:	061b      	lsls	r3, r3, #24
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	0010      	movs	r0, r2
 8008b26:	0019      	movs	r1, r3
 8008b28:	b021      	add	sp, #132	; 0x84
 8008b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b2c:	2a20      	cmp	r2, #32
 8008b2e:	d1c5      	bne.n	8008abc <_strtod_l+0x28>
 8008b30:	3101      	adds	r1, #1
 8008b32:	e7b8      	b.n	8008aa6 <_strtod_l+0x12>
 8008b34:	2a2d      	cmp	r2, #45	; 0x2d
 8008b36:	d1c1      	bne.n	8008abc <_strtod_l+0x28>
 8008b38:	3a2c      	subs	r2, #44	; 0x2c
 8008b3a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008b3c:	1c4a      	adds	r2, r1, #1
 8008b3e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b40:	784a      	ldrb	r2, [r1, #1]
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	d1bc      	bne.n	8008ac0 <_strtod_l+0x2c>
 8008b46:	9b07      	ldr	r3, [sp, #28]
 8008b48:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1dd      	bne.n	8008b10 <_strtod_l+0x7c>
 8008b54:	0032      	movs	r2, r6
 8008b56:	003b      	movs	r3, r7
 8008b58:	e7e4      	b.n	8008b24 <_strtod_l+0x90>
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	e7ed      	b.n	8008b3a <_strtod_l+0xa6>
 8008b5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b60:	2a00      	cmp	r2, #0
 8008b62:	d007      	beq.n	8008b74 <_strtod_l+0xe0>
 8008b64:	2135      	movs	r1, #53	; 0x35
 8008b66:	a81e      	add	r0, sp, #120	; 0x78
 8008b68:	f7ff ff37 	bl	80089da <__copybits>
 8008b6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b6e:	9804      	ldr	r0, [sp, #16]
 8008b70:	f7ff fb00 	bl	8008174 <_Bfree>
 8008b74:	9805      	ldr	r0, [sp, #20]
 8008b76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b78:	3801      	subs	r0, #1
 8008b7a:	2804      	cmp	r0, #4
 8008b7c:	d806      	bhi.n	8008b8c <_strtod_l+0xf8>
 8008b7e:	f7f7 fac9 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008b82:	0312      	.short	0x0312
 8008b84:	1e1c      	.short	0x1e1c
 8008b86:	12          	.byte	0x12
 8008b87:	00          	.byte	0x00
 8008b88:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008b8a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8008b8c:	05e4      	lsls	r4, r4, #23
 8008b8e:	d502      	bpl.n	8008b96 <_strtod_l+0x102>
 8008b90:	2380      	movs	r3, #128	; 0x80
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	431f      	orrs	r7, r3
 8008b96:	4b6a      	ldr	r3, [pc, #424]	; (8008d40 <_strtod_l+0x2ac>)
 8008b98:	423b      	tst	r3, r7
 8008b9a:	d1b6      	bne.n	8008b0a <_strtod_l+0x76>
 8008b9c:	f7fe fac4 	bl	8007128 <__errno>
 8008ba0:	2322      	movs	r3, #34	; 0x22
 8008ba2:	6003      	str	r3, [r0, #0]
 8008ba4:	e7b1      	b.n	8008b0a <_strtod_l+0x76>
 8008ba6:	4967      	ldr	r1, [pc, #412]	; (8008d44 <_strtod_l+0x2b0>)
 8008ba8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008baa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008bac:	400a      	ands	r2, r1
 8008bae:	4966      	ldr	r1, [pc, #408]	; (8008d48 <_strtod_l+0x2b4>)
 8008bb0:	185b      	adds	r3, r3, r1
 8008bb2:	051b      	lsls	r3, r3, #20
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	0017      	movs	r7, r2
 8008bb8:	e7e8      	b.n	8008b8c <_strtod_l+0xf8>
 8008bba:	4f61      	ldr	r7, [pc, #388]	; (8008d40 <_strtod_l+0x2ac>)
 8008bbc:	e7e6      	b.n	8008b8c <_strtod_l+0xf8>
 8008bbe:	2601      	movs	r6, #1
 8008bc0:	4f62      	ldr	r7, [pc, #392]	; (8008d4c <_strtod_l+0x2b8>)
 8008bc2:	4276      	negs	r6, r6
 8008bc4:	e7e2      	b.n	8008b8c <_strtod_l+0xf8>
 8008bc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	921b      	str	r2, [sp, #108]	; 0x6c
 8008bcc:	785b      	ldrb	r3, [r3, #1]
 8008bce:	2b30      	cmp	r3, #48	; 0x30
 8008bd0:	d0f9      	beq.n	8008bc6 <_strtod_l+0x132>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d099      	beq.n	8008b0a <_strtod_l+0x76>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bda:	2500      	movs	r5, #0
 8008bdc:	220a      	movs	r2, #10
 8008bde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008be0:	950d      	str	r5, [sp, #52]	; 0x34
 8008be2:	9310      	str	r3, [sp, #64]	; 0x40
 8008be4:	9508      	str	r5, [sp, #32]
 8008be6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008be8:	7804      	ldrb	r4, [r0, #0]
 8008bea:	0023      	movs	r3, r4
 8008bec:	3b30      	subs	r3, #48	; 0x30
 8008bee:	b2d9      	uxtb	r1, r3
 8008bf0:	2909      	cmp	r1, #9
 8008bf2:	d927      	bls.n	8008c44 <_strtod_l+0x1b0>
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	4956      	ldr	r1, [pc, #344]	; (8008d50 <_strtod_l+0x2bc>)
 8008bf8:	f001 f812 	bl	8009c20 <strncmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d031      	beq.n	8008c64 <_strtod_l+0x1d0>
 8008c00:	2000      	movs	r0, #0
 8008c02:	0023      	movs	r3, r4
 8008c04:	4684      	mov	ip, r0
 8008c06:	9a08      	ldr	r2, [sp, #32]
 8008c08:	900c      	str	r0, [sp, #48]	; 0x30
 8008c0a:	9205      	str	r2, [sp, #20]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	0019      	movs	r1, r3
 8008c10:	4391      	bics	r1, r2
 8008c12:	000a      	movs	r2, r1
 8008c14:	2100      	movs	r1, #0
 8008c16:	9106      	str	r1, [sp, #24]
 8008c18:	2a45      	cmp	r2, #69	; 0x45
 8008c1a:	d000      	beq.n	8008c1e <_strtod_l+0x18a>
 8008c1c:	e0c2      	b.n	8008da4 <_strtod_l+0x310>
 8008c1e:	9b05      	ldr	r3, [sp, #20]
 8008c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c22:	4303      	orrs	r3, r0
 8008c24:	4313      	orrs	r3, r2
 8008c26:	428b      	cmp	r3, r1
 8008c28:	d08d      	beq.n	8008b46 <_strtod_l+0xb2>
 8008c2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c2c:	9307      	str	r3, [sp, #28]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c32:	9b07      	ldr	r3, [sp, #28]
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b2b      	cmp	r3, #43	; 0x2b
 8008c38:	d071      	beq.n	8008d1e <_strtod_l+0x28a>
 8008c3a:	000c      	movs	r4, r1
 8008c3c:	2b2d      	cmp	r3, #45	; 0x2d
 8008c3e:	d174      	bne.n	8008d2a <_strtod_l+0x296>
 8008c40:	2401      	movs	r4, #1
 8008c42:	e06d      	b.n	8008d20 <_strtod_l+0x28c>
 8008c44:	9908      	ldr	r1, [sp, #32]
 8008c46:	2908      	cmp	r1, #8
 8008c48:	dc09      	bgt.n	8008c5e <_strtod_l+0x1ca>
 8008c4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c4c:	4351      	muls	r1, r2
 8008c4e:	185b      	adds	r3, r3, r1
 8008c50:	930d      	str	r3, [sp, #52]	; 0x34
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	3001      	adds	r0, #1
 8008c56:	3301      	adds	r3, #1
 8008c58:	9308      	str	r3, [sp, #32]
 8008c5a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008c5c:	e7c3      	b.n	8008be6 <_strtod_l+0x152>
 8008c5e:	4355      	muls	r5, r2
 8008c60:	195d      	adds	r5, r3, r5
 8008c62:	e7f6      	b.n	8008c52 <_strtod_l+0x1be>
 8008c64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c6a:	9a08      	ldr	r2, [sp, #32]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	d03a      	beq.n	8008ce8 <_strtod_l+0x254>
 8008c72:	900c      	str	r0, [sp, #48]	; 0x30
 8008c74:	9205      	str	r2, [sp, #20]
 8008c76:	001a      	movs	r2, r3
 8008c78:	3a30      	subs	r2, #48	; 0x30
 8008c7a:	2a09      	cmp	r2, #9
 8008c7c:	d912      	bls.n	8008ca4 <_strtod_l+0x210>
 8008c7e:	2201      	movs	r2, #1
 8008c80:	4694      	mov	ip, r2
 8008c82:	e7c3      	b.n	8008c0c <_strtod_l+0x178>
 8008c84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c86:	3001      	adds	r0, #1
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	2b30      	cmp	r3, #48	; 0x30
 8008c90:	d0f8      	beq.n	8008c84 <_strtod_l+0x1f0>
 8008c92:	001a      	movs	r2, r3
 8008c94:	3a31      	subs	r2, #49	; 0x31
 8008c96:	2a08      	cmp	r2, #8
 8008c98:	d83c      	bhi.n	8008d14 <_strtod_l+0x280>
 8008c9a:	900c      	str	r0, [sp, #48]	; 0x30
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ca0:	9005      	str	r0, [sp, #20]
 8008ca2:	9210      	str	r2, [sp, #64]	; 0x40
 8008ca4:	001a      	movs	r2, r3
 8008ca6:	1c41      	adds	r1, r0, #1
 8008ca8:	3a30      	subs	r2, #48	; 0x30
 8008caa:	2b30      	cmp	r3, #48	; 0x30
 8008cac:	d016      	beq.n	8008cdc <_strtod_l+0x248>
 8008cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cb0:	185b      	adds	r3, r3, r1
 8008cb2:	930c      	str	r3, [sp, #48]	; 0x30
 8008cb4:	9b05      	ldr	r3, [sp, #20]
 8008cb6:	210a      	movs	r1, #10
 8008cb8:	469c      	mov	ip, r3
 8008cba:	4484      	add	ip, r0
 8008cbc:	4563      	cmp	r3, ip
 8008cbe:	d115      	bne.n	8008cec <_strtod_l+0x258>
 8008cc0:	9905      	ldr	r1, [sp, #20]
 8008cc2:	9b05      	ldr	r3, [sp, #20]
 8008cc4:	3101      	adds	r1, #1
 8008cc6:	1809      	adds	r1, r1, r0
 8008cc8:	181b      	adds	r3, r3, r0
 8008cca:	9105      	str	r1, [sp, #20]
 8008ccc:	2b08      	cmp	r3, #8
 8008cce:	dc19      	bgt.n	8008d04 <_strtod_l+0x270>
 8008cd0:	230a      	movs	r3, #10
 8008cd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cd4:	434b      	muls	r3, r1
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	18d3      	adds	r3, r2, r3
 8008cda:	930d      	str	r3, [sp, #52]	; 0x34
 8008cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cde:	0008      	movs	r0, r1
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	921b      	str	r2, [sp, #108]	; 0x6c
 8008ce4:	785b      	ldrb	r3, [r3, #1]
 8008ce6:	e7c6      	b.n	8008c76 <_strtod_l+0x1e2>
 8008ce8:	9808      	ldr	r0, [sp, #32]
 8008cea:	e7d0      	b.n	8008c8e <_strtod_l+0x1fa>
 8008cec:	1c5c      	adds	r4, r3, #1
 8008cee:	2b08      	cmp	r3, #8
 8008cf0:	dc04      	bgt.n	8008cfc <_strtod_l+0x268>
 8008cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cf4:	434b      	muls	r3, r1
 8008cf6:	930d      	str	r3, [sp, #52]	; 0x34
 8008cf8:	0023      	movs	r3, r4
 8008cfa:	e7df      	b.n	8008cbc <_strtod_l+0x228>
 8008cfc:	2c10      	cmp	r4, #16
 8008cfe:	dcfb      	bgt.n	8008cf8 <_strtod_l+0x264>
 8008d00:	434d      	muls	r5, r1
 8008d02:	e7f9      	b.n	8008cf8 <_strtod_l+0x264>
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	2100      	movs	r1, #0
 8008d08:	2b10      	cmp	r3, #16
 8008d0a:	dce7      	bgt.n	8008cdc <_strtod_l+0x248>
 8008d0c:	230a      	movs	r3, #10
 8008d0e:	435d      	muls	r5, r3
 8008d10:	1955      	adds	r5, r2, r5
 8008d12:	e7e3      	b.n	8008cdc <_strtod_l+0x248>
 8008d14:	2200      	movs	r2, #0
 8008d16:	920c      	str	r2, [sp, #48]	; 0x30
 8008d18:	9205      	str	r2, [sp, #20]
 8008d1a:	3201      	adds	r2, #1
 8008d1c:	e7b0      	b.n	8008c80 <_strtod_l+0x1ec>
 8008d1e:	2400      	movs	r4, #0
 8008d20:	9b07      	ldr	r3, [sp, #28]
 8008d22:	3302      	adds	r3, #2
 8008d24:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d26:	9b07      	ldr	r3, [sp, #28]
 8008d28:	789b      	ldrb	r3, [r3, #2]
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	3a30      	subs	r2, #48	; 0x30
 8008d2e:	2a09      	cmp	r2, #9
 8008d30:	d914      	bls.n	8008d5c <_strtod_l+0x2c8>
 8008d32:	9a07      	ldr	r2, [sp, #28]
 8008d34:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d36:	2200      	movs	r2, #0
 8008d38:	e033      	b.n	8008da2 <_strtod_l+0x30e>
 8008d3a:	46c0      	nop			; (mov r8, r8)
 8008d3c:	0800ad10 	.word	0x0800ad10
 8008d40:	7ff00000 	.word	0x7ff00000
 8008d44:	ffefffff 	.word	0xffefffff
 8008d48:	00000433 	.word	0x00000433
 8008d4c:	7fffffff 	.word	0x7fffffff
 8008d50:	0800ad0c 	.word	0x0800ad0c
 8008d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d5a:	785b      	ldrb	r3, [r3, #1]
 8008d5c:	2b30      	cmp	r3, #48	; 0x30
 8008d5e:	d0f9      	beq.n	8008d54 <_strtod_l+0x2c0>
 8008d60:	2200      	movs	r2, #0
 8008d62:	9206      	str	r2, [sp, #24]
 8008d64:	001a      	movs	r2, r3
 8008d66:	3a31      	subs	r2, #49	; 0x31
 8008d68:	2a08      	cmp	r2, #8
 8008d6a:	d81b      	bhi.n	8008da4 <_strtod_l+0x310>
 8008d6c:	3b30      	subs	r3, #48	; 0x30
 8008d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d72:	9306      	str	r3, [sp, #24]
 8008d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	911b      	str	r1, [sp, #108]	; 0x6c
 8008d7a:	785b      	ldrb	r3, [r3, #1]
 8008d7c:	001a      	movs	r2, r3
 8008d7e:	3a30      	subs	r2, #48	; 0x30
 8008d80:	2a09      	cmp	r2, #9
 8008d82:	d93a      	bls.n	8008dfa <_strtod_l+0x366>
 8008d84:	9a06      	ldr	r2, [sp, #24]
 8008d86:	1a8a      	subs	r2, r1, r2
 8008d88:	49b2      	ldr	r1, [pc, #712]	; (8009054 <_strtod_l+0x5c0>)
 8008d8a:	9106      	str	r1, [sp, #24]
 8008d8c:	2a08      	cmp	r2, #8
 8008d8e:	dc04      	bgt.n	8008d9a <_strtod_l+0x306>
 8008d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d92:	9206      	str	r2, [sp, #24]
 8008d94:	428a      	cmp	r2, r1
 8008d96:	dd00      	ble.n	8008d9a <_strtod_l+0x306>
 8008d98:	9106      	str	r1, [sp, #24]
 8008d9a:	2c00      	cmp	r4, #0
 8008d9c:	d002      	beq.n	8008da4 <_strtod_l+0x310>
 8008d9e:	9a06      	ldr	r2, [sp, #24]
 8008da0:	4252      	negs	r2, r2
 8008da2:	9206      	str	r2, [sp, #24]
 8008da4:	9a05      	ldr	r2, [sp, #20]
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d14d      	bne.n	8008e46 <_strtod_l+0x3b2>
 8008daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dac:	4310      	orrs	r0, r2
 8008dae:	d000      	beq.n	8008db2 <_strtod_l+0x31e>
 8008db0:	e6ab      	b.n	8008b0a <_strtod_l+0x76>
 8008db2:	4662      	mov	r2, ip
 8008db4:	2a00      	cmp	r2, #0
 8008db6:	d000      	beq.n	8008dba <_strtod_l+0x326>
 8008db8:	e6c5      	b.n	8008b46 <_strtod_l+0xb2>
 8008dba:	2b69      	cmp	r3, #105	; 0x69
 8008dbc:	d027      	beq.n	8008e0e <_strtod_l+0x37a>
 8008dbe:	dc23      	bgt.n	8008e08 <_strtod_l+0x374>
 8008dc0:	2b49      	cmp	r3, #73	; 0x49
 8008dc2:	d024      	beq.n	8008e0e <_strtod_l+0x37a>
 8008dc4:	2b4e      	cmp	r3, #78	; 0x4e
 8008dc6:	d000      	beq.n	8008dca <_strtod_l+0x336>
 8008dc8:	e6bd      	b.n	8008b46 <_strtod_l+0xb2>
 8008dca:	49a3      	ldr	r1, [pc, #652]	; (8009058 <_strtod_l+0x5c4>)
 8008dcc:	a81b      	add	r0, sp, #108	; 0x6c
 8008dce:	f001 fa47 	bl	800a260 <__match>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d100      	bne.n	8008dd8 <_strtod_l+0x344>
 8008dd6:	e6b6      	b.n	8008b46 <_strtod_l+0xb2>
 8008dd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b28      	cmp	r3, #40	; 0x28
 8008dde:	d12c      	bne.n	8008e3a <_strtod_l+0x3a6>
 8008de0:	499e      	ldr	r1, [pc, #632]	; (800905c <_strtod_l+0x5c8>)
 8008de2:	aa1e      	add	r2, sp, #120	; 0x78
 8008de4:	a81b      	add	r0, sp, #108	; 0x6c
 8008de6:	f001 fa4f 	bl	800a288 <__hexnan>
 8008dea:	2805      	cmp	r0, #5
 8008dec:	d125      	bne.n	8008e3a <_strtod_l+0x3a6>
 8008dee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008df0:	4a9b      	ldr	r2, [pc, #620]	; (8009060 <_strtod_l+0x5cc>)
 8008df2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008df4:	431a      	orrs	r2, r3
 8008df6:	0017      	movs	r7, r2
 8008df8:	e687      	b.n	8008b0a <_strtod_l+0x76>
 8008dfa:	220a      	movs	r2, #10
 8008dfc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008dfe:	434a      	muls	r2, r1
 8008e00:	18d2      	adds	r2, r2, r3
 8008e02:	3a30      	subs	r2, #48	; 0x30
 8008e04:	920e      	str	r2, [sp, #56]	; 0x38
 8008e06:	e7b5      	b.n	8008d74 <_strtod_l+0x2e0>
 8008e08:	2b6e      	cmp	r3, #110	; 0x6e
 8008e0a:	d0de      	beq.n	8008dca <_strtod_l+0x336>
 8008e0c:	e69b      	b.n	8008b46 <_strtod_l+0xb2>
 8008e0e:	4995      	ldr	r1, [pc, #596]	; (8009064 <_strtod_l+0x5d0>)
 8008e10:	a81b      	add	r0, sp, #108	; 0x6c
 8008e12:	f001 fa25 	bl	800a260 <__match>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d100      	bne.n	8008e1c <_strtod_l+0x388>
 8008e1a:	e694      	b.n	8008b46 <_strtod_l+0xb2>
 8008e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e1e:	4992      	ldr	r1, [pc, #584]	; (8009068 <_strtod_l+0x5d4>)
 8008e20:	3b01      	subs	r3, #1
 8008e22:	a81b      	add	r0, sp, #108	; 0x6c
 8008e24:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e26:	f001 fa1b 	bl	800a260 <__match>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d102      	bne.n	8008e34 <_strtod_l+0x3a0>
 8008e2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e30:	3301      	adds	r3, #1
 8008e32:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e34:	2600      	movs	r6, #0
 8008e36:	4f8a      	ldr	r7, [pc, #552]	; (8009060 <_strtod_l+0x5cc>)
 8008e38:	e667      	b.n	8008b0a <_strtod_l+0x76>
 8008e3a:	488c      	ldr	r0, [pc, #560]	; (800906c <_strtod_l+0x5d8>)
 8008e3c:	f000 ff1e 	bl	8009c7c <nan>
 8008e40:	0006      	movs	r6, r0
 8008e42:	000f      	movs	r7, r1
 8008e44:	e661      	b.n	8008b0a <_strtod_l+0x76>
 8008e46:	9b06      	ldr	r3, [sp, #24]
 8008e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4e:	9b08      	ldr	r3, [sp, #32]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <_strtod_l+0x3c4>
 8008e54:	9b05      	ldr	r3, [sp, #20]
 8008e56:	9308      	str	r3, [sp, #32]
 8008e58:	9c05      	ldr	r4, [sp, #20]
 8008e5a:	2c10      	cmp	r4, #16
 8008e5c:	dd00      	ble.n	8008e60 <_strtod_l+0x3cc>
 8008e5e:	2410      	movs	r4, #16
 8008e60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e62:	f7f9 fb99 	bl	8002598 <__aeabi_ui2d>
 8008e66:	9b05      	ldr	r3, [sp, #20]
 8008e68:	0006      	movs	r6, r0
 8008e6a:	000f      	movs	r7, r1
 8008e6c:	2b09      	cmp	r3, #9
 8008e6e:	dd15      	ble.n	8008e9c <_strtod_l+0x408>
 8008e70:	0022      	movs	r2, r4
 8008e72:	4b7f      	ldr	r3, [pc, #508]	; (8009070 <_strtod_l+0x5dc>)
 8008e74:	3a09      	subs	r2, #9
 8008e76:	00d2      	lsls	r2, r2, #3
 8008e78:	189b      	adds	r3, r3, r2
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f7f8 fcc3 	bl	8001808 <__aeabi_dmul>
 8008e82:	0006      	movs	r6, r0
 8008e84:	0028      	movs	r0, r5
 8008e86:	000f      	movs	r7, r1
 8008e88:	f7f9 fb86 	bl	8002598 <__aeabi_ui2d>
 8008e8c:	0002      	movs	r2, r0
 8008e8e:	000b      	movs	r3, r1
 8008e90:	0030      	movs	r0, r6
 8008e92:	0039      	movs	r1, r7
 8008e94:	f7f7 fd5e 	bl	8000954 <__aeabi_dadd>
 8008e98:	0006      	movs	r6, r0
 8008e9a:	000f      	movs	r7, r1
 8008e9c:	9b05      	ldr	r3, [sp, #20]
 8008e9e:	2b0f      	cmp	r3, #15
 8008ea0:	dc39      	bgt.n	8008f16 <_strtod_l+0x482>
 8008ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d100      	bne.n	8008eaa <_strtod_l+0x416>
 8008ea8:	e62f      	b.n	8008b0a <_strtod_l+0x76>
 8008eaa:	dd24      	ble.n	8008ef6 <_strtod_l+0x462>
 8008eac:	2b16      	cmp	r3, #22
 8008eae:	dc09      	bgt.n	8008ec4 <_strtod_l+0x430>
 8008eb0:	496f      	ldr	r1, [pc, #444]	; (8009070 <_strtod_l+0x5dc>)
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	18c9      	adds	r1, r1, r3
 8008eb6:	0032      	movs	r2, r6
 8008eb8:	6808      	ldr	r0, [r1, #0]
 8008eba:	6849      	ldr	r1, [r1, #4]
 8008ebc:	003b      	movs	r3, r7
 8008ebe:	f7f8 fca3 	bl	8001808 <__aeabi_dmul>
 8008ec2:	e7bd      	b.n	8008e40 <_strtod_l+0x3ac>
 8008ec4:	2325      	movs	r3, #37	; 0x25
 8008ec6:	9a05      	ldr	r2, [sp, #20]
 8008ec8:	1a9b      	subs	r3, r3, r2
 8008eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	db22      	blt.n	8008f16 <_strtod_l+0x482>
 8008ed0:	240f      	movs	r4, #15
 8008ed2:	9b05      	ldr	r3, [sp, #20]
 8008ed4:	4d66      	ldr	r5, [pc, #408]	; (8009070 <_strtod_l+0x5dc>)
 8008ed6:	1ae4      	subs	r4, r4, r3
 8008ed8:	00e1      	lsls	r1, r4, #3
 8008eda:	1869      	adds	r1, r5, r1
 8008edc:	0032      	movs	r2, r6
 8008ede:	6808      	ldr	r0, [r1, #0]
 8008ee0:	6849      	ldr	r1, [r1, #4]
 8008ee2:	003b      	movs	r3, r7
 8008ee4:	f7f8 fc90 	bl	8001808 <__aeabi_dmul>
 8008ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eea:	1b1c      	subs	r4, r3, r4
 8008eec:	00e4      	lsls	r4, r4, #3
 8008eee:	192d      	adds	r5, r5, r4
 8008ef0:	682a      	ldr	r2, [r5, #0]
 8008ef2:	686b      	ldr	r3, [r5, #4]
 8008ef4:	e7e3      	b.n	8008ebe <_strtod_l+0x42a>
 8008ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef8:	3316      	adds	r3, #22
 8008efa:	db0c      	blt.n	8008f16 <_strtod_l+0x482>
 8008efc:	9906      	ldr	r1, [sp, #24]
 8008efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f00:	4b5b      	ldr	r3, [pc, #364]	; (8009070 <_strtod_l+0x5dc>)
 8008f02:	1a52      	subs	r2, r2, r1
 8008f04:	00d2      	lsls	r2, r2, #3
 8008f06:	189b      	adds	r3, r3, r2
 8008f08:	0030      	movs	r0, r6
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	0039      	movs	r1, r7
 8008f10:	f7f8 f880 	bl	8001014 <__aeabi_ddiv>
 8008f14:	e794      	b.n	8008e40 <_strtod_l+0x3ac>
 8008f16:	9b05      	ldr	r3, [sp, #20]
 8008f18:	1b1c      	subs	r4, r3, r4
 8008f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1c:	18e4      	adds	r4, r4, r3
 8008f1e:	2c00      	cmp	r4, #0
 8008f20:	dd72      	ble.n	8009008 <_strtod_l+0x574>
 8008f22:	220f      	movs	r2, #15
 8008f24:	0023      	movs	r3, r4
 8008f26:	4013      	ands	r3, r2
 8008f28:	4214      	tst	r4, r2
 8008f2a:	d00a      	beq.n	8008f42 <_strtod_l+0x4ae>
 8008f2c:	4950      	ldr	r1, [pc, #320]	; (8009070 <_strtod_l+0x5dc>)
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	18c9      	adds	r1, r1, r3
 8008f32:	0032      	movs	r2, r6
 8008f34:	6808      	ldr	r0, [r1, #0]
 8008f36:	6849      	ldr	r1, [r1, #4]
 8008f38:	003b      	movs	r3, r7
 8008f3a:	f7f8 fc65 	bl	8001808 <__aeabi_dmul>
 8008f3e:	0006      	movs	r6, r0
 8008f40:	000f      	movs	r7, r1
 8008f42:	230f      	movs	r3, #15
 8008f44:	439c      	bics	r4, r3
 8008f46:	d04a      	beq.n	8008fde <_strtod_l+0x54a>
 8008f48:	3326      	adds	r3, #38	; 0x26
 8008f4a:	33ff      	adds	r3, #255	; 0xff
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	dd22      	ble.n	8008f96 <_strtod_l+0x502>
 8008f50:	2300      	movs	r3, #0
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	9306      	str	r3, [sp, #24]
 8008f56:	930d      	str	r3, [sp, #52]	; 0x34
 8008f58:	9308      	str	r3, [sp, #32]
 8008f5a:	2322      	movs	r3, #34	; 0x22
 8008f5c:	2600      	movs	r6, #0
 8008f5e:	9a04      	ldr	r2, [sp, #16]
 8008f60:	4f3f      	ldr	r7, [pc, #252]	; (8009060 <_strtod_l+0x5cc>)
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f66:	42b3      	cmp	r3, r6
 8008f68:	d100      	bne.n	8008f6c <_strtod_l+0x4d8>
 8008f6a:	e5ce      	b.n	8008b0a <_strtod_l+0x76>
 8008f6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008f6e:	9804      	ldr	r0, [sp, #16]
 8008f70:	f7ff f900 	bl	8008174 <_Bfree>
 8008f74:	9908      	ldr	r1, [sp, #32]
 8008f76:	9804      	ldr	r0, [sp, #16]
 8008f78:	f7ff f8fc 	bl	8008174 <_Bfree>
 8008f7c:	9906      	ldr	r1, [sp, #24]
 8008f7e:	9804      	ldr	r0, [sp, #16]
 8008f80:	f7ff f8f8 	bl	8008174 <_Bfree>
 8008f84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f86:	9804      	ldr	r0, [sp, #16]
 8008f88:	f7ff f8f4 	bl	8008174 <_Bfree>
 8008f8c:	9905      	ldr	r1, [sp, #20]
 8008f8e:	9804      	ldr	r0, [sp, #16]
 8008f90:	f7ff f8f0 	bl	8008174 <_Bfree>
 8008f94:	e5b9      	b.n	8008b0a <_strtod_l+0x76>
 8008f96:	2300      	movs	r3, #0
 8008f98:	0030      	movs	r0, r6
 8008f9a:	0039      	movs	r1, r7
 8008f9c:	4d35      	ldr	r5, [pc, #212]	; (8009074 <_strtod_l+0x5e0>)
 8008f9e:	1124      	asrs	r4, r4, #4
 8008fa0:	9307      	str	r3, [sp, #28]
 8008fa2:	2c01      	cmp	r4, #1
 8008fa4:	dc1e      	bgt.n	8008fe4 <_strtod_l+0x550>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <_strtod_l+0x51a>
 8008faa:	0006      	movs	r6, r0
 8008fac:	000f      	movs	r7, r1
 8008fae:	4b32      	ldr	r3, [pc, #200]	; (8009078 <_strtod_l+0x5e4>)
 8008fb0:	9a07      	ldr	r2, [sp, #28]
 8008fb2:	18ff      	adds	r7, r7, r3
 8008fb4:	4b2f      	ldr	r3, [pc, #188]	; (8009074 <_strtod_l+0x5e0>)
 8008fb6:	00d2      	lsls	r2, r2, #3
 8008fb8:	189d      	adds	r5, r3, r2
 8008fba:	6828      	ldr	r0, [r5, #0]
 8008fbc:	6869      	ldr	r1, [r5, #4]
 8008fbe:	0032      	movs	r2, r6
 8008fc0:	003b      	movs	r3, r7
 8008fc2:	f7f8 fc21 	bl	8001808 <__aeabi_dmul>
 8008fc6:	4b26      	ldr	r3, [pc, #152]	; (8009060 <_strtod_l+0x5cc>)
 8008fc8:	4a2c      	ldr	r2, [pc, #176]	; (800907c <_strtod_l+0x5e8>)
 8008fca:	0006      	movs	r6, r0
 8008fcc:	400b      	ands	r3, r1
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d8be      	bhi.n	8008f50 <_strtod_l+0x4bc>
 8008fd2:	4a2b      	ldr	r2, [pc, #172]	; (8009080 <_strtod_l+0x5ec>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d913      	bls.n	8009000 <_strtod_l+0x56c>
 8008fd8:	2601      	movs	r6, #1
 8008fda:	4f2a      	ldr	r7, [pc, #168]	; (8009084 <_strtod_l+0x5f0>)
 8008fdc:	4276      	negs	r6, r6
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9307      	str	r3, [sp, #28]
 8008fe2:	e088      	b.n	80090f6 <_strtod_l+0x662>
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	4214      	tst	r4, r2
 8008fe8:	d004      	beq.n	8008ff4 <_strtod_l+0x560>
 8008fea:	682a      	ldr	r2, [r5, #0]
 8008fec:	686b      	ldr	r3, [r5, #4]
 8008fee:	f7f8 fc0b 	bl	8001808 <__aeabi_dmul>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	9a07      	ldr	r2, [sp, #28]
 8008ff6:	1064      	asrs	r4, r4, #1
 8008ff8:	3201      	adds	r2, #1
 8008ffa:	9207      	str	r2, [sp, #28]
 8008ffc:	3508      	adds	r5, #8
 8008ffe:	e7d0      	b.n	8008fa2 <_strtod_l+0x50e>
 8009000:	23d4      	movs	r3, #212	; 0xd4
 8009002:	049b      	lsls	r3, r3, #18
 8009004:	18cf      	adds	r7, r1, r3
 8009006:	e7ea      	b.n	8008fde <_strtod_l+0x54a>
 8009008:	2c00      	cmp	r4, #0
 800900a:	d0e8      	beq.n	8008fde <_strtod_l+0x54a>
 800900c:	4264      	negs	r4, r4
 800900e:	230f      	movs	r3, #15
 8009010:	0022      	movs	r2, r4
 8009012:	401a      	ands	r2, r3
 8009014:	421c      	tst	r4, r3
 8009016:	d00a      	beq.n	800902e <_strtod_l+0x59a>
 8009018:	4b15      	ldr	r3, [pc, #84]	; (8009070 <_strtod_l+0x5dc>)
 800901a:	00d2      	lsls	r2, r2, #3
 800901c:	189b      	adds	r3, r3, r2
 800901e:	0030      	movs	r0, r6
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	0039      	movs	r1, r7
 8009026:	f7f7 fff5 	bl	8001014 <__aeabi_ddiv>
 800902a:	0006      	movs	r6, r0
 800902c:	000f      	movs	r7, r1
 800902e:	1124      	asrs	r4, r4, #4
 8009030:	d0d5      	beq.n	8008fde <_strtod_l+0x54a>
 8009032:	2c1f      	cmp	r4, #31
 8009034:	dd28      	ble.n	8009088 <_strtod_l+0x5f4>
 8009036:	2300      	movs	r3, #0
 8009038:	9305      	str	r3, [sp, #20]
 800903a:	9306      	str	r3, [sp, #24]
 800903c:	930d      	str	r3, [sp, #52]	; 0x34
 800903e:	9308      	str	r3, [sp, #32]
 8009040:	2322      	movs	r3, #34	; 0x22
 8009042:	9a04      	ldr	r2, [sp, #16]
 8009044:	2600      	movs	r6, #0
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800904a:	2700      	movs	r7, #0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d18d      	bne.n	8008f6c <_strtod_l+0x4d8>
 8009050:	e55b      	b.n	8008b0a <_strtod_l+0x76>
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	00004e1f 	.word	0x00004e1f
 8009058:	0800aafd 	.word	0x0800aafd
 800905c:	0800ad24 	.word	0x0800ad24
 8009060:	7ff00000 	.word	0x7ff00000
 8009064:	0800aaf5 	.word	0x0800aaf5
 8009068:	0800ab2c 	.word	0x0800ab2c
 800906c:	0800aeb5 	.word	0x0800aeb5
 8009070:	0800ac38 	.word	0x0800ac38
 8009074:	0800ac10 	.word	0x0800ac10
 8009078:	fcb00000 	.word	0xfcb00000
 800907c:	7ca00000 	.word	0x7ca00000
 8009080:	7c900000 	.word	0x7c900000
 8009084:	7fefffff 	.word	0x7fefffff
 8009088:	2310      	movs	r3, #16
 800908a:	0022      	movs	r2, r4
 800908c:	401a      	ands	r2, r3
 800908e:	9207      	str	r2, [sp, #28]
 8009090:	421c      	tst	r4, r3
 8009092:	d001      	beq.n	8009098 <_strtod_l+0x604>
 8009094:	335a      	adds	r3, #90	; 0x5a
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	0030      	movs	r0, r6
 800909a:	0039      	movs	r1, r7
 800909c:	2300      	movs	r3, #0
 800909e:	4dc4      	ldr	r5, [pc, #784]	; (80093b0 <_strtod_l+0x91c>)
 80090a0:	2201      	movs	r2, #1
 80090a2:	4214      	tst	r4, r2
 80090a4:	d004      	beq.n	80090b0 <_strtod_l+0x61c>
 80090a6:	682a      	ldr	r2, [r5, #0]
 80090a8:	686b      	ldr	r3, [r5, #4]
 80090aa:	f7f8 fbad 	bl	8001808 <__aeabi_dmul>
 80090ae:	2301      	movs	r3, #1
 80090b0:	1064      	asrs	r4, r4, #1
 80090b2:	3508      	adds	r5, #8
 80090b4:	2c00      	cmp	r4, #0
 80090b6:	d1f3      	bne.n	80090a0 <_strtod_l+0x60c>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <_strtod_l+0x62c>
 80090bc:	0006      	movs	r6, r0
 80090be:	000f      	movs	r7, r1
 80090c0:	9b07      	ldr	r3, [sp, #28]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00f      	beq.n	80090e6 <_strtod_l+0x652>
 80090c6:	236b      	movs	r3, #107	; 0x6b
 80090c8:	007a      	lsls	r2, r7, #1
 80090ca:	0d52      	lsrs	r2, r2, #21
 80090cc:	0039      	movs	r1, r7
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	dd08      	ble.n	80090e6 <_strtod_l+0x652>
 80090d4:	2b1f      	cmp	r3, #31
 80090d6:	dc00      	bgt.n	80090da <_strtod_l+0x646>
 80090d8:	e121      	b.n	800931e <_strtod_l+0x88a>
 80090da:	2600      	movs	r6, #0
 80090dc:	2b34      	cmp	r3, #52	; 0x34
 80090de:	dc00      	bgt.n	80090e2 <_strtod_l+0x64e>
 80090e0:	e116      	b.n	8009310 <_strtod_l+0x87c>
 80090e2:	27dc      	movs	r7, #220	; 0xdc
 80090e4:	04bf      	lsls	r7, r7, #18
 80090e6:	2200      	movs	r2, #0
 80090e8:	2300      	movs	r3, #0
 80090ea:	0030      	movs	r0, r6
 80090ec:	0039      	movs	r1, r7
 80090ee:	f7f7 f9ab 	bl	8000448 <__aeabi_dcmpeq>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d19f      	bne.n	8009036 <_strtod_l+0x5a2>
 80090f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090f8:	9a08      	ldr	r2, [sp, #32]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	9804      	ldr	r0, [sp, #16]
 8009102:	f7ff f89f 	bl	8008244 <__s2b>
 8009106:	900d      	str	r0, [sp, #52]	; 0x34
 8009108:	2800      	cmp	r0, #0
 800910a:	d100      	bne.n	800910e <_strtod_l+0x67a>
 800910c:	e720      	b.n	8008f50 <_strtod_l+0x4bc>
 800910e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009110:	9906      	ldr	r1, [sp, #24]
 8009112:	17da      	asrs	r2, r3, #31
 8009114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009116:	1a5b      	subs	r3, r3, r1
 8009118:	401a      	ands	r2, r3
 800911a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911c:	9215      	str	r2, [sp, #84]	; 0x54
 800911e:	43db      	mvns	r3, r3
 8009120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009122:	17db      	asrs	r3, r3, #31
 8009124:	401a      	ands	r2, r3
 8009126:	2300      	movs	r3, #0
 8009128:	9218      	str	r2, [sp, #96]	; 0x60
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	9306      	str	r3, [sp, #24]
 800912e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009130:	9804      	ldr	r0, [sp, #16]
 8009132:	6859      	ldr	r1, [r3, #4]
 8009134:	f7fe ffda 	bl	80080ec <_Balloc>
 8009138:	9008      	str	r0, [sp, #32]
 800913a:	2800      	cmp	r0, #0
 800913c:	d100      	bne.n	8009140 <_strtod_l+0x6ac>
 800913e:	e70c      	b.n	8008f5a <_strtod_l+0x4c6>
 8009140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009142:	300c      	adds	r0, #12
 8009144:	0019      	movs	r1, r3
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	310c      	adds	r1, #12
 800914a:	3202      	adds	r2, #2
 800914c:	0092      	lsls	r2, r2, #2
 800914e:	f000 fd8b 	bl	8009c68 <memcpy>
 8009152:	ab1e      	add	r3, sp, #120	; 0x78
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	ab1d      	add	r3, sp, #116	; 0x74
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	0032      	movs	r2, r6
 800915c:	003b      	movs	r3, r7
 800915e:	9804      	ldr	r0, [sp, #16]
 8009160:	9610      	str	r6, [sp, #64]	; 0x40
 8009162:	9711      	str	r7, [sp, #68]	; 0x44
 8009164:	f7ff fbb0 	bl	80088c8 <__d2b>
 8009168:	901c      	str	r0, [sp, #112]	; 0x70
 800916a:	2800      	cmp	r0, #0
 800916c:	d100      	bne.n	8009170 <_strtod_l+0x6dc>
 800916e:	e6f4      	b.n	8008f5a <_strtod_l+0x4c6>
 8009170:	2101      	movs	r1, #1
 8009172:	9804      	ldr	r0, [sp, #16]
 8009174:	f7ff f8fa 	bl	800836c <__i2b>
 8009178:	9006      	str	r0, [sp, #24]
 800917a:	2800      	cmp	r0, #0
 800917c:	d100      	bne.n	8009180 <_strtod_l+0x6ec>
 800917e:	e6ec      	b.n	8008f5a <_strtod_l+0x4c6>
 8009180:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009182:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009184:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009186:	1ad4      	subs	r4, r2, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	db01      	blt.n	8009190 <_strtod_l+0x6fc>
 800918c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800918e:	195d      	adds	r5, r3, r5
 8009190:	9907      	ldr	r1, [sp, #28]
 8009192:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009194:	1a5b      	subs	r3, r3, r1
 8009196:	2136      	movs	r1, #54	; 0x36
 8009198:	189b      	adds	r3, r3, r2
 800919a:	1a8a      	subs	r2, r1, r2
 800919c:	4985      	ldr	r1, [pc, #532]	; (80093b4 <_strtod_l+0x920>)
 800919e:	2001      	movs	r0, #1
 80091a0:	468c      	mov	ip, r1
 80091a2:	2100      	movs	r1, #0
 80091a4:	3b01      	subs	r3, #1
 80091a6:	9114      	str	r1, [sp, #80]	; 0x50
 80091a8:	9012      	str	r0, [sp, #72]	; 0x48
 80091aa:	4563      	cmp	r3, ip
 80091ac:	da07      	bge.n	80091be <_strtod_l+0x72a>
 80091ae:	4661      	mov	r1, ip
 80091b0:	1ac9      	subs	r1, r1, r3
 80091b2:	1a52      	subs	r2, r2, r1
 80091b4:	291f      	cmp	r1, #31
 80091b6:	dd00      	ble.n	80091ba <_strtod_l+0x726>
 80091b8:	e0b6      	b.n	8009328 <_strtod_l+0x894>
 80091ba:	4088      	lsls	r0, r1
 80091bc:	9012      	str	r0, [sp, #72]	; 0x48
 80091be:	18ab      	adds	r3, r5, r2
 80091c0:	930c      	str	r3, [sp, #48]	; 0x30
 80091c2:	18a4      	adds	r4, r4, r2
 80091c4:	9b07      	ldr	r3, [sp, #28]
 80091c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091c8:	191c      	adds	r4, r3, r4
 80091ca:	002b      	movs	r3, r5
 80091cc:	4295      	cmp	r5, r2
 80091ce:	dd00      	ble.n	80091d2 <_strtod_l+0x73e>
 80091d0:	0013      	movs	r3, r2
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	dd00      	ble.n	80091d8 <_strtod_l+0x744>
 80091d6:	0023      	movs	r3, r4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	dd04      	ble.n	80091e6 <_strtod_l+0x752>
 80091dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091de:	1ae4      	subs	r4, r4, r3
 80091e0:	1ad2      	subs	r2, r2, r3
 80091e2:	920c      	str	r2, [sp, #48]	; 0x30
 80091e4:	1aed      	subs	r5, r5, r3
 80091e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dd17      	ble.n	800921c <_strtod_l+0x788>
 80091ec:	001a      	movs	r2, r3
 80091ee:	9906      	ldr	r1, [sp, #24]
 80091f0:	9804      	ldr	r0, [sp, #16]
 80091f2:	f7ff f983 	bl	80084fc <__pow5mult>
 80091f6:	9006      	str	r0, [sp, #24]
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d100      	bne.n	80091fe <_strtod_l+0x76a>
 80091fc:	e6ad      	b.n	8008f5a <_strtod_l+0x4c6>
 80091fe:	0001      	movs	r1, r0
 8009200:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009202:	9804      	ldr	r0, [sp, #16]
 8009204:	f7ff f8ca 	bl	800839c <__multiply>
 8009208:	900e      	str	r0, [sp, #56]	; 0x38
 800920a:	2800      	cmp	r0, #0
 800920c:	d100      	bne.n	8009210 <_strtod_l+0x77c>
 800920e:	e6a4      	b.n	8008f5a <_strtod_l+0x4c6>
 8009210:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009212:	9804      	ldr	r0, [sp, #16]
 8009214:	f7fe ffae 	bl	8008174 <_Bfree>
 8009218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800921a:	931c      	str	r3, [sp, #112]	; 0x70
 800921c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800921e:	2b00      	cmp	r3, #0
 8009220:	dd00      	ble.n	8009224 <_strtod_l+0x790>
 8009222:	e087      	b.n	8009334 <_strtod_l+0x8a0>
 8009224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009226:	2b00      	cmp	r3, #0
 8009228:	dd08      	ble.n	800923c <_strtod_l+0x7a8>
 800922a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800922c:	9908      	ldr	r1, [sp, #32]
 800922e:	9804      	ldr	r0, [sp, #16]
 8009230:	f7ff f964 	bl	80084fc <__pow5mult>
 8009234:	9008      	str	r0, [sp, #32]
 8009236:	2800      	cmp	r0, #0
 8009238:	d100      	bne.n	800923c <_strtod_l+0x7a8>
 800923a:	e68e      	b.n	8008f5a <_strtod_l+0x4c6>
 800923c:	2c00      	cmp	r4, #0
 800923e:	dd08      	ble.n	8009252 <_strtod_l+0x7be>
 8009240:	0022      	movs	r2, r4
 8009242:	9908      	ldr	r1, [sp, #32]
 8009244:	9804      	ldr	r0, [sp, #16]
 8009246:	f7ff f9b5 	bl	80085b4 <__lshift>
 800924a:	9008      	str	r0, [sp, #32]
 800924c:	2800      	cmp	r0, #0
 800924e:	d100      	bne.n	8009252 <_strtod_l+0x7be>
 8009250:	e683      	b.n	8008f5a <_strtod_l+0x4c6>
 8009252:	2d00      	cmp	r5, #0
 8009254:	dd08      	ble.n	8009268 <_strtod_l+0x7d4>
 8009256:	002a      	movs	r2, r5
 8009258:	9906      	ldr	r1, [sp, #24]
 800925a:	9804      	ldr	r0, [sp, #16]
 800925c:	f7ff f9aa 	bl	80085b4 <__lshift>
 8009260:	9006      	str	r0, [sp, #24]
 8009262:	2800      	cmp	r0, #0
 8009264:	d100      	bne.n	8009268 <_strtod_l+0x7d4>
 8009266:	e678      	b.n	8008f5a <_strtod_l+0x4c6>
 8009268:	9a08      	ldr	r2, [sp, #32]
 800926a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800926c:	9804      	ldr	r0, [sp, #16]
 800926e:	f7ff fa2b 	bl	80086c8 <__mdiff>
 8009272:	9005      	str	r0, [sp, #20]
 8009274:	2800      	cmp	r0, #0
 8009276:	d100      	bne.n	800927a <_strtod_l+0x7e6>
 8009278:	e66f      	b.n	8008f5a <_strtod_l+0x4c6>
 800927a:	2200      	movs	r2, #0
 800927c:	68c3      	ldr	r3, [r0, #12]
 800927e:	9906      	ldr	r1, [sp, #24]
 8009280:	60c2      	str	r2, [r0, #12]
 8009282:	930c      	str	r3, [sp, #48]	; 0x30
 8009284:	f7ff fa04 	bl	8008690 <__mcmp>
 8009288:	2800      	cmp	r0, #0
 800928a:	da5d      	bge.n	8009348 <_strtod_l+0x8b4>
 800928c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800928e:	4333      	orrs	r3, r6
 8009290:	d000      	beq.n	8009294 <_strtod_l+0x800>
 8009292:	e088      	b.n	80093a6 <_strtod_l+0x912>
 8009294:	033b      	lsls	r3, r7, #12
 8009296:	d000      	beq.n	800929a <_strtod_l+0x806>
 8009298:	e085      	b.n	80093a6 <_strtod_l+0x912>
 800929a:	22d6      	movs	r2, #214	; 0xd6
 800929c:	4b46      	ldr	r3, [pc, #280]	; (80093b8 <_strtod_l+0x924>)
 800929e:	04d2      	lsls	r2, r2, #19
 80092a0:	403b      	ands	r3, r7
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d97f      	bls.n	80093a6 <_strtod_l+0x912>
 80092a6:	9b05      	ldr	r3, [sp, #20]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d103      	bne.n	80092b6 <_strtod_l+0x822>
 80092ae:	9b05      	ldr	r3, [sp, #20]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	dd77      	ble.n	80093a6 <_strtod_l+0x912>
 80092b6:	9905      	ldr	r1, [sp, #20]
 80092b8:	2201      	movs	r2, #1
 80092ba:	9804      	ldr	r0, [sp, #16]
 80092bc:	f7ff f97a 	bl	80085b4 <__lshift>
 80092c0:	9906      	ldr	r1, [sp, #24]
 80092c2:	9005      	str	r0, [sp, #20]
 80092c4:	f7ff f9e4 	bl	8008690 <__mcmp>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	dd6c      	ble.n	80093a6 <_strtod_l+0x912>
 80092cc:	9907      	ldr	r1, [sp, #28]
 80092ce:	003b      	movs	r3, r7
 80092d0:	4a39      	ldr	r2, [pc, #228]	; (80093b8 <_strtod_l+0x924>)
 80092d2:	2900      	cmp	r1, #0
 80092d4:	d100      	bne.n	80092d8 <_strtod_l+0x844>
 80092d6:	e094      	b.n	8009402 <_strtod_l+0x96e>
 80092d8:	0011      	movs	r1, r2
 80092da:	20d6      	movs	r0, #214	; 0xd6
 80092dc:	4039      	ands	r1, r7
 80092de:	04c0      	lsls	r0, r0, #19
 80092e0:	4281      	cmp	r1, r0
 80092e2:	dd00      	ble.n	80092e6 <_strtod_l+0x852>
 80092e4:	e08d      	b.n	8009402 <_strtod_l+0x96e>
 80092e6:	23dc      	movs	r3, #220	; 0xdc
 80092e8:	049b      	lsls	r3, r3, #18
 80092ea:	4299      	cmp	r1, r3
 80092ec:	dc00      	bgt.n	80092f0 <_strtod_l+0x85c>
 80092ee:	e6a7      	b.n	8009040 <_strtod_l+0x5ac>
 80092f0:	0030      	movs	r0, r6
 80092f2:	0039      	movs	r1, r7
 80092f4:	4b31      	ldr	r3, [pc, #196]	; (80093bc <_strtod_l+0x928>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	f7f8 fa86 	bl	8001808 <__aeabi_dmul>
 80092fc:	4b2e      	ldr	r3, [pc, #184]	; (80093b8 <_strtod_l+0x924>)
 80092fe:	0006      	movs	r6, r0
 8009300:	000f      	movs	r7, r1
 8009302:	420b      	tst	r3, r1
 8009304:	d000      	beq.n	8009308 <_strtod_l+0x874>
 8009306:	e631      	b.n	8008f6c <_strtod_l+0x4d8>
 8009308:	2322      	movs	r3, #34	; 0x22
 800930a:	9a04      	ldr	r2, [sp, #16]
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	e62d      	b.n	8008f6c <_strtod_l+0x4d8>
 8009310:	234b      	movs	r3, #75	; 0x4b
 8009312:	1a9a      	subs	r2, r3, r2
 8009314:	3b4c      	subs	r3, #76	; 0x4c
 8009316:	4093      	lsls	r3, r2
 8009318:	4019      	ands	r1, r3
 800931a:	000f      	movs	r7, r1
 800931c:	e6e3      	b.n	80090e6 <_strtod_l+0x652>
 800931e:	2201      	movs	r2, #1
 8009320:	4252      	negs	r2, r2
 8009322:	409a      	lsls	r2, r3
 8009324:	4016      	ands	r6, r2
 8009326:	e6de      	b.n	80090e6 <_strtod_l+0x652>
 8009328:	4925      	ldr	r1, [pc, #148]	; (80093c0 <_strtod_l+0x92c>)
 800932a:	1acb      	subs	r3, r1, r3
 800932c:	0001      	movs	r1, r0
 800932e:	4099      	lsls	r1, r3
 8009330:	9114      	str	r1, [sp, #80]	; 0x50
 8009332:	e743      	b.n	80091bc <_strtod_l+0x728>
 8009334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009336:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009338:	9804      	ldr	r0, [sp, #16]
 800933a:	f7ff f93b 	bl	80085b4 <__lshift>
 800933e:	901c      	str	r0, [sp, #112]	; 0x70
 8009340:	2800      	cmp	r0, #0
 8009342:	d000      	beq.n	8009346 <_strtod_l+0x8b2>
 8009344:	e76e      	b.n	8009224 <_strtod_l+0x790>
 8009346:	e608      	b.n	8008f5a <_strtod_l+0x4c6>
 8009348:	970e      	str	r7, [sp, #56]	; 0x38
 800934a:	2800      	cmp	r0, #0
 800934c:	d177      	bne.n	800943e <_strtod_l+0x9aa>
 800934e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009350:	033b      	lsls	r3, r7, #12
 8009352:	0b1b      	lsrs	r3, r3, #12
 8009354:	2a00      	cmp	r2, #0
 8009356:	d039      	beq.n	80093cc <_strtod_l+0x938>
 8009358:	4a1a      	ldr	r2, [pc, #104]	; (80093c4 <_strtod_l+0x930>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d139      	bne.n	80093d2 <_strtod_l+0x93e>
 800935e:	2101      	movs	r1, #1
 8009360:	9b07      	ldr	r3, [sp, #28]
 8009362:	4249      	negs	r1, r1
 8009364:	0032      	movs	r2, r6
 8009366:	0008      	movs	r0, r1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <_strtod_l+0x8f0>
 800936c:	24d4      	movs	r4, #212	; 0xd4
 800936e:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <_strtod_l+0x924>)
 8009370:	0008      	movs	r0, r1
 8009372:	403b      	ands	r3, r7
 8009374:	04e4      	lsls	r4, r4, #19
 8009376:	42a3      	cmp	r3, r4
 8009378:	d804      	bhi.n	8009384 <_strtod_l+0x8f0>
 800937a:	306c      	adds	r0, #108	; 0x6c
 800937c:	0d1b      	lsrs	r3, r3, #20
 800937e:	1ac3      	subs	r3, r0, r3
 8009380:	4099      	lsls	r1, r3
 8009382:	0008      	movs	r0, r1
 8009384:	4282      	cmp	r2, r0
 8009386:	d124      	bne.n	80093d2 <_strtod_l+0x93e>
 8009388:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <_strtod_l+0x934>)
 800938a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800938c:	4299      	cmp	r1, r3
 800938e:	d102      	bne.n	8009396 <_strtod_l+0x902>
 8009390:	3201      	adds	r2, #1
 8009392:	d100      	bne.n	8009396 <_strtod_l+0x902>
 8009394:	e5e1      	b.n	8008f5a <_strtod_l+0x4c6>
 8009396:	4b08      	ldr	r3, [pc, #32]	; (80093b8 <_strtod_l+0x924>)
 8009398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800939a:	2600      	movs	r6, #0
 800939c:	401a      	ands	r2, r3
 800939e:	0013      	movs	r3, r2
 80093a0:	2280      	movs	r2, #128	; 0x80
 80093a2:	0352      	lsls	r2, r2, #13
 80093a4:	189f      	adds	r7, r3, r2
 80093a6:	9b07      	ldr	r3, [sp, #28]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1a1      	bne.n	80092f0 <_strtod_l+0x85c>
 80093ac:	e5de      	b.n	8008f6c <_strtod_l+0x4d8>
 80093ae:	46c0      	nop			; (mov r8, r8)
 80093b0:	0800ad38 	.word	0x0800ad38
 80093b4:	fffffc02 	.word	0xfffffc02
 80093b8:	7ff00000 	.word	0x7ff00000
 80093bc:	39500000 	.word	0x39500000
 80093c0:	fffffbe2 	.word	0xfffffbe2
 80093c4:	000fffff 	.word	0x000fffff
 80093c8:	7fefffff 	.word	0x7fefffff
 80093cc:	4333      	orrs	r3, r6
 80093ce:	d100      	bne.n	80093d2 <_strtod_l+0x93e>
 80093d0:	e77c      	b.n	80092cc <_strtod_l+0x838>
 80093d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01d      	beq.n	8009414 <_strtod_l+0x980>
 80093d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093dc:	4213      	tst	r3, r2
 80093de:	d0e2      	beq.n	80093a6 <_strtod_l+0x912>
 80093e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093e2:	0030      	movs	r0, r6
 80093e4:	0039      	movs	r1, r7
 80093e6:	9a07      	ldr	r2, [sp, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d017      	beq.n	800941c <_strtod_l+0x988>
 80093ec:	f7ff fb3a 	bl	8008a64 <sulp>
 80093f0:	0002      	movs	r2, r0
 80093f2:	000b      	movs	r3, r1
 80093f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80093f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80093f8:	f7f7 faac 	bl	8000954 <__aeabi_dadd>
 80093fc:	0006      	movs	r6, r0
 80093fe:	000f      	movs	r7, r1
 8009400:	e7d1      	b.n	80093a6 <_strtod_l+0x912>
 8009402:	2601      	movs	r6, #1
 8009404:	4013      	ands	r3, r2
 8009406:	4a98      	ldr	r2, [pc, #608]	; (8009668 <_strtod_l+0xbd4>)
 8009408:	4276      	negs	r6, r6
 800940a:	189b      	adds	r3, r3, r2
 800940c:	4a97      	ldr	r2, [pc, #604]	; (800966c <_strtod_l+0xbd8>)
 800940e:	431a      	orrs	r2, r3
 8009410:	0017      	movs	r7, r2
 8009412:	e7c8      	b.n	80093a6 <_strtod_l+0x912>
 8009414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009416:	4233      	tst	r3, r6
 8009418:	d0c5      	beq.n	80093a6 <_strtod_l+0x912>
 800941a:	e7e1      	b.n	80093e0 <_strtod_l+0x94c>
 800941c:	f7ff fb22 	bl	8008a64 <sulp>
 8009420:	0002      	movs	r2, r0
 8009422:	000b      	movs	r3, r1
 8009424:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009426:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009428:	f7f8 fcb0 	bl	8001d8c <__aeabi_dsub>
 800942c:	2200      	movs	r2, #0
 800942e:	2300      	movs	r3, #0
 8009430:	0006      	movs	r6, r0
 8009432:	000f      	movs	r7, r1
 8009434:	f7f7 f808 	bl	8000448 <__aeabi_dcmpeq>
 8009438:	2800      	cmp	r0, #0
 800943a:	d0b4      	beq.n	80093a6 <_strtod_l+0x912>
 800943c:	e600      	b.n	8009040 <_strtod_l+0x5ac>
 800943e:	9906      	ldr	r1, [sp, #24]
 8009440:	9805      	ldr	r0, [sp, #20]
 8009442:	f7ff faa1 	bl	8008988 <__ratio>
 8009446:	2380      	movs	r3, #128	; 0x80
 8009448:	2200      	movs	r2, #0
 800944a:	05db      	lsls	r3, r3, #23
 800944c:	0004      	movs	r4, r0
 800944e:	000d      	movs	r5, r1
 8009450:	f7f7 f80a 	bl	8000468 <__aeabi_dcmple>
 8009454:	2800      	cmp	r0, #0
 8009456:	d06d      	beq.n	8009534 <_strtod_l+0xaa0>
 8009458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800945a:	2b00      	cmp	r3, #0
 800945c:	d000      	beq.n	8009460 <_strtod_l+0x9cc>
 800945e:	e07e      	b.n	800955e <_strtod_l+0xaca>
 8009460:	2e00      	cmp	r6, #0
 8009462:	d158      	bne.n	8009516 <_strtod_l+0xa82>
 8009464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009466:	031b      	lsls	r3, r3, #12
 8009468:	d000      	beq.n	800946c <_strtod_l+0x9d8>
 800946a:	e07f      	b.n	800956c <_strtod_l+0xad8>
 800946c:	2200      	movs	r2, #0
 800946e:	0020      	movs	r0, r4
 8009470:	0029      	movs	r1, r5
 8009472:	4b7f      	ldr	r3, [pc, #508]	; (8009670 <_strtod_l+0xbdc>)
 8009474:	f7f6 ffee 	bl	8000454 <__aeabi_dcmplt>
 8009478:	2800      	cmp	r0, #0
 800947a:	d158      	bne.n	800952e <_strtod_l+0xa9a>
 800947c:	0020      	movs	r0, r4
 800947e:	0029      	movs	r1, r5
 8009480:	2200      	movs	r2, #0
 8009482:	4b7c      	ldr	r3, [pc, #496]	; (8009674 <_strtod_l+0xbe0>)
 8009484:	f7f8 f9c0 	bl	8001808 <__aeabi_dmul>
 8009488:	0004      	movs	r4, r0
 800948a:	000d      	movs	r5, r1
 800948c:	2380      	movs	r3, #128	; 0x80
 800948e:	061b      	lsls	r3, r3, #24
 8009490:	940a      	str	r4, [sp, #40]	; 0x28
 8009492:	18eb      	adds	r3, r5, r3
 8009494:	930b      	str	r3, [sp, #44]	; 0x2c
 8009496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800949a:	9212      	str	r2, [sp, #72]	; 0x48
 800949c:	9313      	str	r3, [sp, #76]	; 0x4c
 800949e:	4a76      	ldr	r2, [pc, #472]	; (8009678 <_strtod_l+0xbe4>)
 80094a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a2:	4013      	ands	r3, r2
 80094a4:	9314      	str	r3, [sp, #80]	; 0x50
 80094a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094a8:	4b74      	ldr	r3, [pc, #464]	; (800967c <_strtod_l+0xbe8>)
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d000      	beq.n	80094b0 <_strtod_l+0xa1c>
 80094ae:	e091      	b.n	80095d4 <_strtod_l+0xb40>
 80094b0:	4a73      	ldr	r2, [pc, #460]	; (8009680 <_strtod_l+0xbec>)
 80094b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094b4:	4694      	mov	ip, r2
 80094b6:	4463      	add	r3, ip
 80094b8:	001f      	movs	r7, r3
 80094ba:	0030      	movs	r0, r6
 80094bc:	0019      	movs	r1, r3
 80094be:	f7ff f99b 	bl	80087f8 <__ulp>
 80094c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c6:	f7f8 f99f 	bl	8001808 <__aeabi_dmul>
 80094ca:	0032      	movs	r2, r6
 80094cc:	003b      	movs	r3, r7
 80094ce:	f7f7 fa41 	bl	8000954 <__aeabi_dadd>
 80094d2:	4a69      	ldr	r2, [pc, #420]	; (8009678 <_strtod_l+0xbe4>)
 80094d4:	4b6b      	ldr	r3, [pc, #428]	; (8009684 <_strtod_l+0xbf0>)
 80094d6:	0006      	movs	r6, r0
 80094d8:	400a      	ands	r2, r1
 80094da:	429a      	cmp	r2, r3
 80094dc:	d949      	bls.n	8009572 <_strtod_l+0xade>
 80094de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094e0:	4b69      	ldr	r3, [pc, #420]	; (8009688 <_strtod_l+0xbf4>)
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d103      	bne.n	80094ee <_strtod_l+0xa5a>
 80094e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094e8:	3301      	adds	r3, #1
 80094ea:	d100      	bne.n	80094ee <_strtod_l+0xa5a>
 80094ec:	e535      	b.n	8008f5a <_strtod_l+0x4c6>
 80094ee:	2601      	movs	r6, #1
 80094f0:	4f65      	ldr	r7, [pc, #404]	; (8009688 <_strtod_l+0xbf4>)
 80094f2:	4276      	negs	r6, r6
 80094f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094f6:	9804      	ldr	r0, [sp, #16]
 80094f8:	f7fe fe3c 	bl	8008174 <_Bfree>
 80094fc:	9908      	ldr	r1, [sp, #32]
 80094fe:	9804      	ldr	r0, [sp, #16]
 8009500:	f7fe fe38 	bl	8008174 <_Bfree>
 8009504:	9906      	ldr	r1, [sp, #24]
 8009506:	9804      	ldr	r0, [sp, #16]
 8009508:	f7fe fe34 	bl	8008174 <_Bfree>
 800950c:	9905      	ldr	r1, [sp, #20]
 800950e:	9804      	ldr	r0, [sp, #16]
 8009510:	f7fe fe30 	bl	8008174 <_Bfree>
 8009514:	e60b      	b.n	800912e <_strtod_l+0x69a>
 8009516:	2e01      	cmp	r6, #1
 8009518:	d103      	bne.n	8009522 <_strtod_l+0xa8e>
 800951a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800951c:	2b00      	cmp	r3, #0
 800951e:	d100      	bne.n	8009522 <_strtod_l+0xa8e>
 8009520:	e58e      	b.n	8009040 <_strtod_l+0x5ac>
 8009522:	2300      	movs	r3, #0
 8009524:	4c59      	ldr	r4, [pc, #356]	; (800968c <_strtod_l+0xbf8>)
 8009526:	930a      	str	r3, [sp, #40]	; 0x28
 8009528:	940b      	str	r4, [sp, #44]	; 0x2c
 800952a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800952c:	e01c      	b.n	8009568 <_strtod_l+0xad4>
 800952e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009530:	4d50      	ldr	r5, [pc, #320]	; (8009674 <_strtod_l+0xbe0>)
 8009532:	e7ab      	b.n	800948c <_strtod_l+0x9f8>
 8009534:	2200      	movs	r2, #0
 8009536:	0020      	movs	r0, r4
 8009538:	0029      	movs	r1, r5
 800953a:	4b4e      	ldr	r3, [pc, #312]	; (8009674 <_strtod_l+0xbe0>)
 800953c:	f7f8 f964 	bl	8001808 <__aeabi_dmul>
 8009540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009542:	0004      	movs	r4, r0
 8009544:	000b      	movs	r3, r1
 8009546:	000d      	movs	r5, r1
 8009548:	2a00      	cmp	r2, #0
 800954a:	d104      	bne.n	8009556 <_strtod_l+0xac2>
 800954c:	2280      	movs	r2, #128	; 0x80
 800954e:	0612      	lsls	r2, r2, #24
 8009550:	900a      	str	r0, [sp, #40]	; 0x28
 8009552:	188b      	adds	r3, r1, r2
 8009554:	e79e      	b.n	8009494 <_strtod_l+0xa00>
 8009556:	0002      	movs	r2, r0
 8009558:	920a      	str	r2, [sp, #40]	; 0x28
 800955a:	930b      	str	r3, [sp, #44]	; 0x2c
 800955c:	e79b      	b.n	8009496 <_strtod_l+0xa02>
 800955e:	2300      	movs	r3, #0
 8009560:	4c43      	ldr	r4, [pc, #268]	; (8009670 <_strtod_l+0xbdc>)
 8009562:	930a      	str	r3, [sp, #40]	; 0x28
 8009564:	940b      	str	r4, [sp, #44]	; 0x2c
 8009566:	2400      	movs	r4, #0
 8009568:	4d41      	ldr	r5, [pc, #260]	; (8009670 <_strtod_l+0xbdc>)
 800956a:	e794      	b.n	8009496 <_strtod_l+0xa02>
 800956c:	2300      	movs	r3, #0
 800956e:	4c47      	ldr	r4, [pc, #284]	; (800968c <_strtod_l+0xbf8>)
 8009570:	e7f7      	b.n	8009562 <_strtod_l+0xace>
 8009572:	23d4      	movs	r3, #212	; 0xd4
 8009574:	049b      	lsls	r3, r3, #18
 8009576:	18cf      	adds	r7, r1, r3
 8009578:	9b07      	ldr	r3, [sp, #28]
 800957a:	970e      	str	r7, [sp, #56]	; 0x38
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1b9      	bne.n	80094f4 <_strtod_l+0xa60>
 8009580:	4b3d      	ldr	r3, [pc, #244]	; (8009678 <_strtod_l+0xbe4>)
 8009582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009584:	403b      	ands	r3, r7
 8009586:	429a      	cmp	r2, r3
 8009588:	d1b4      	bne.n	80094f4 <_strtod_l+0xa60>
 800958a:	0020      	movs	r0, r4
 800958c:	0029      	movs	r1, r5
 800958e:	f7f6 ffa7 	bl	80004e0 <__aeabi_d2lz>
 8009592:	f7f6 ffe1 	bl	8000558 <__aeabi_l2d>
 8009596:	0002      	movs	r2, r0
 8009598:	000b      	movs	r3, r1
 800959a:	0020      	movs	r0, r4
 800959c:	0029      	movs	r1, r5
 800959e:	f7f8 fbf5 	bl	8001d8c <__aeabi_dsub>
 80095a2:	033b      	lsls	r3, r7, #12
 80095a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095a6:	0b1b      	lsrs	r3, r3, #12
 80095a8:	4333      	orrs	r3, r6
 80095aa:	4313      	orrs	r3, r2
 80095ac:	0004      	movs	r4, r0
 80095ae:	000d      	movs	r5, r1
 80095b0:	4a37      	ldr	r2, [pc, #220]	; (8009690 <_strtod_l+0xbfc>)
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d054      	beq.n	8009660 <_strtod_l+0xbcc>
 80095b6:	4b37      	ldr	r3, [pc, #220]	; (8009694 <_strtod_l+0xc00>)
 80095b8:	f7f6 ff4c 	bl	8000454 <__aeabi_dcmplt>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d000      	beq.n	80095c2 <_strtod_l+0xb2e>
 80095c0:	e4d4      	b.n	8008f6c <_strtod_l+0x4d8>
 80095c2:	0020      	movs	r0, r4
 80095c4:	0029      	movs	r1, r5
 80095c6:	4a34      	ldr	r2, [pc, #208]	; (8009698 <_strtod_l+0xc04>)
 80095c8:	4b2a      	ldr	r3, [pc, #168]	; (8009674 <_strtod_l+0xbe0>)
 80095ca:	f7f6 ff57 	bl	800047c <__aeabi_dcmpgt>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d090      	beq.n	80094f4 <_strtod_l+0xa60>
 80095d2:	e4cb      	b.n	8008f6c <_strtod_l+0x4d8>
 80095d4:	9b07      	ldr	r3, [sp, #28]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d02b      	beq.n	8009632 <_strtod_l+0xb9e>
 80095da:	23d4      	movs	r3, #212	; 0xd4
 80095dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095de:	04db      	lsls	r3, r3, #19
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d826      	bhi.n	8009632 <_strtod_l+0xb9e>
 80095e4:	0020      	movs	r0, r4
 80095e6:	0029      	movs	r1, r5
 80095e8:	4a2c      	ldr	r2, [pc, #176]	; (800969c <_strtod_l+0xc08>)
 80095ea:	4b2d      	ldr	r3, [pc, #180]	; (80096a0 <_strtod_l+0xc0c>)
 80095ec:	f7f6 ff3c 	bl	8000468 <__aeabi_dcmple>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d017      	beq.n	8009624 <_strtod_l+0xb90>
 80095f4:	0020      	movs	r0, r4
 80095f6:	0029      	movs	r1, r5
 80095f8:	f7f6 ff54 	bl	80004a4 <__aeabi_d2uiz>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d100      	bne.n	8009602 <_strtod_l+0xb6e>
 8009600:	3001      	adds	r0, #1
 8009602:	f7f8 ffc9 	bl	8002598 <__aeabi_ui2d>
 8009606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009608:	0004      	movs	r4, r0
 800960a:	000b      	movs	r3, r1
 800960c:	000d      	movs	r5, r1
 800960e:	2a00      	cmp	r2, #0
 8009610:	d122      	bne.n	8009658 <_strtod_l+0xbc4>
 8009612:	2280      	movs	r2, #128	; 0x80
 8009614:	0612      	lsls	r2, r2, #24
 8009616:	188b      	adds	r3, r1, r2
 8009618:	9016      	str	r0, [sp, #88]	; 0x58
 800961a:	9317      	str	r3, [sp, #92]	; 0x5c
 800961c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800961e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009620:	9212      	str	r2, [sp, #72]	; 0x48
 8009622:	9313      	str	r3, [sp, #76]	; 0x4c
 8009624:	22d6      	movs	r2, #214	; 0xd6
 8009626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009628:	04d2      	lsls	r2, r2, #19
 800962a:	189b      	adds	r3, r3, r2
 800962c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	9313      	str	r3, [sp, #76]	; 0x4c
 8009632:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009634:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009636:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009638:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800963a:	f7ff f8dd 	bl	80087f8 <__ulp>
 800963e:	0002      	movs	r2, r0
 8009640:	000b      	movs	r3, r1
 8009642:	0030      	movs	r0, r6
 8009644:	0039      	movs	r1, r7
 8009646:	f7f8 f8df 	bl	8001808 <__aeabi_dmul>
 800964a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800964c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800964e:	f7f7 f981 	bl	8000954 <__aeabi_dadd>
 8009652:	0006      	movs	r6, r0
 8009654:	000f      	movs	r7, r1
 8009656:	e78f      	b.n	8009578 <_strtod_l+0xae4>
 8009658:	0002      	movs	r2, r0
 800965a:	9216      	str	r2, [sp, #88]	; 0x58
 800965c:	9317      	str	r3, [sp, #92]	; 0x5c
 800965e:	e7dd      	b.n	800961c <_strtod_l+0xb88>
 8009660:	4b10      	ldr	r3, [pc, #64]	; (80096a4 <_strtod_l+0xc10>)
 8009662:	f7f6 fef7 	bl	8000454 <__aeabi_dcmplt>
 8009666:	e7b2      	b.n	80095ce <_strtod_l+0xb3a>
 8009668:	fff00000 	.word	0xfff00000
 800966c:	000fffff 	.word	0x000fffff
 8009670:	3ff00000 	.word	0x3ff00000
 8009674:	3fe00000 	.word	0x3fe00000
 8009678:	7ff00000 	.word	0x7ff00000
 800967c:	7fe00000 	.word	0x7fe00000
 8009680:	fcb00000 	.word	0xfcb00000
 8009684:	7c9fffff 	.word	0x7c9fffff
 8009688:	7fefffff 	.word	0x7fefffff
 800968c:	bff00000 	.word	0xbff00000
 8009690:	94a03595 	.word	0x94a03595
 8009694:	3fdfffff 	.word	0x3fdfffff
 8009698:	35afe535 	.word	0x35afe535
 800969c:	ffc00000 	.word	0xffc00000
 80096a0:	41dfffff 	.word	0x41dfffff
 80096a4:	3fcfffff 	.word	0x3fcfffff

080096a8 <_strtod_r>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	4b02      	ldr	r3, [pc, #8]	; (80096b4 <_strtod_r+0xc>)
 80096ac:	f7ff f9f2 	bl	8008a94 <_strtod_l>
 80096b0:	bd10      	pop	{r4, pc}
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	20000068 	.word	0x20000068

080096b8 <_strtol_l.constprop.0>:
 80096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ba:	b087      	sub	sp, #28
 80096bc:	001e      	movs	r6, r3
 80096be:	9005      	str	r0, [sp, #20]
 80096c0:	9101      	str	r1, [sp, #4]
 80096c2:	9202      	str	r2, [sp, #8]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d048      	beq.n	800975a <_strtol_l.constprop.0+0xa2>
 80096c8:	000b      	movs	r3, r1
 80096ca:	2e24      	cmp	r6, #36	; 0x24
 80096cc:	d845      	bhi.n	800975a <_strtol_l.constprop.0+0xa2>
 80096ce:	4a3b      	ldr	r2, [pc, #236]	; (80097bc <_strtol_l.constprop.0+0x104>)
 80096d0:	2108      	movs	r1, #8
 80096d2:	4694      	mov	ip, r2
 80096d4:	001a      	movs	r2, r3
 80096d6:	4660      	mov	r0, ip
 80096d8:	7814      	ldrb	r4, [r2, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	5d00      	ldrb	r0, [r0, r4]
 80096de:	001d      	movs	r5, r3
 80096e0:	0007      	movs	r7, r0
 80096e2:	400f      	ands	r7, r1
 80096e4:	4208      	tst	r0, r1
 80096e6:	d1f5      	bne.n	80096d4 <_strtol_l.constprop.0+0x1c>
 80096e8:	2c2d      	cmp	r4, #45	; 0x2d
 80096ea:	d13d      	bne.n	8009768 <_strtol_l.constprop.0+0xb0>
 80096ec:	2701      	movs	r7, #1
 80096ee:	781c      	ldrb	r4, [r3, #0]
 80096f0:	1c95      	adds	r5, r2, #2
 80096f2:	2e00      	cmp	r6, #0
 80096f4:	d05e      	beq.n	80097b4 <_strtol_l.constprop.0+0xfc>
 80096f6:	2e10      	cmp	r6, #16
 80096f8:	d109      	bne.n	800970e <_strtol_l.constprop.0+0x56>
 80096fa:	2c30      	cmp	r4, #48	; 0x30
 80096fc:	d107      	bne.n	800970e <_strtol_l.constprop.0+0x56>
 80096fe:	2220      	movs	r2, #32
 8009700:	782b      	ldrb	r3, [r5, #0]
 8009702:	4393      	bics	r3, r2
 8009704:	2b58      	cmp	r3, #88	; 0x58
 8009706:	d150      	bne.n	80097aa <_strtol_l.constprop.0+0xf2>
 8009708:	2610      	movs	r6, #16
 800970a:	786c      	ldrb	r4, [r5, #1]
 800970c:	3502      	adds	r5, #2
 800970e:	4b2c      	ldr	r3, [pc, #176]	; (80097c0 <_strtol_l.constprop.0+0x108>)
 8009710:	0031      	movs	r1, r6
 8009712:	18fb      	adds	r3, r7, r3
 8009714:	0018      	movs	r0, r3
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	f7f6 fd96 	bl	8000248 <__aeabi_uidivmod>
 800971c:	2200      	movs	r2, #0
 800971e:	9104      	str	r1, [sp, #16]
 8009720:	2101      	movs	r1, #1
 8009722:	4684      	mov	ip, r0
 8009724:	0010      	movs	r0, r2
 8009726:	4249      	negs	r1, r1
 8009728:	0023      	movs	r3, r4
 800972a:	3b30      	subs	r3, #48	; 0x30
 800972c:	2b09      	cmp	r3, #9
 800972e:	d903      	bls.n	8009738 <_strtol_l.constprop.0+0x80>
 8009730:	3b11      	subs	r3, #17
 8009732:	2b19      	cmp	r3, #25
 8009734:	d81d      	bhi.n	8009772 <_strtol_l.constprop.0+0xba>
 8009736:	330a      	adds	r3, #10
 8009738:	429e      	cmp	r6, r3
 800973a:	dd1e      	ble.n	800977a <_strtol_l.constprop.0+0xc2>
 800973c:	1c54      	adds	r4, r2, #1
 800973e:	d009      	beq.n	8009754 <_strtol_l.constprop.0+0x9c>
 8009740:	000a      	movs	r2, r1
 8009742:	4584      	cmp	ip, r0
 8009744:	d306      	bcc.n	8009754 <_strtol_l.constprop.0+0x9c>
 8009746:	d102      	bne.n	800974e <_strtol_l.constprop.0+0x96>
 8009748:	9c04      	ldr	r4, [sp, #16]
 800974a:	429c      	cmp	r4, r3
 800974c:	db02      	blt.n	8009754 <_strtol_l.constprop.0+0x9c>
 800974e:	2201      	movs	r2, #1
 8009750:	4370      	muls	r0, r6
 8009752:	1818      	adds	r0, r3, r0
 8009754:	782c      	ldrb	r4, [r5, #0]
 8009756:	3501      	adds	r5, #1
 8009758:	e7e6      	b.n	8009728 <_strtol_l.constprop.0+0x70>
 800975a:	f7fd fce5 	bl	8007128 <__errno>
 800975e:	2316      	movs	r3, #22
 8009760:	6003      	str	r3, [r0, #0]
 8009762:	2000      	movs	r0, #0
 8009764:	b007      	add	sp, #28
 8009766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009768:	2c2b      	cmp	r4, #43	; 0x2b
 800976a:	d1c2      	bne.n	80096f2 <_strtol_l.constprop.0+0x3a>
 800976c:	781c      	ldrb	r4, [r3, #0]
 800976e:	1c95      	adds	r5, r2, #2
 8009770:	e7bf      	b.n	80096f2 <_strtol_l.constprop.0+0x3a>
 8009772:	0023      	movs	r3, r4
 8009774:	3b61      	subs	r3, #97	; 0x61
 8009776:	2b19      	cmp	r3, #25
 8009778:	d9dd      	bls.n	8009736 <_strtol_l.constprop.0+0x7e>
 800977a:	1c53      	adds	r3, r2, #1
 800977c:	d109      	bne.n	8009792 <_strtol_l.constprop.0+0xda>
 800977e:	2322      	movs	r3, #34	; 0x22
 8009780:	9a05      	ldr	r2, [sp, #20]
 8009782:	9803      	ldr	r0, [sp, #12]
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	9b02      	ldr	r3, [sp, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0eb      	beq.n	8009764 <_strtol_l.constprop.0+0xac>
 800978c:	1e6b      	subs	r3, r5, #1
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	e007      	b.n	80097a2 <_strtol_l.constprop.0+0xea>
 8009792:	2f00      	cmp	r7, #0
 8009794:	d000      	beq.n	8009798 <_strtol_l.constprop.0+0xe0>
 8009796:	4240      	negs	r0, r0
 8009798:	9b02      	ldr	r3, [sp, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0e2      	beq.n	8009764 <_strtol_l.constprop.0+0xac>
 800979e:	2a00      	cmp	r2, #0
 80097a0:	d1f4      	bne.n	800978c <_strtol_l.constprop.0+0xd4>
 80097a2:	9b02      	ldr	r3, [sp, #8]
 80097a4:	9a01      	ldr	r2, [sp, #4]
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	e7dc      	b.n	8009764 <_strtol_l.constprop.0+0xac>
 80097aa:	2430      	movs	r4, #48	; 0x30
 80097ac:	2e00      	cmp	r6, #0
 80097ae:	d1ae      	bne.n	800970e <_strtol_l.constprop.0+0x56>
 80097b0:	3608      	adds	r6, #8
 80097b2:	e7ac      	b.n	800970e <_strtol_l.constprop.0+0x56>
 80097b4:	2c30      	cmp	r4, #48	; 0x30
 80097b6:	d0a2      	beq.n	80096fe <_strtol_l.constprop.0+0x46>
 80097b8:	260a      	movs	r6, #10
 80097ba:	e7a8      	b.n	800970e <_strtol_l.constprop.0+0x56>
 80097bc:	0800ad61 	.word	0x0800ad61
 80097c0:	7fffffff 	.word	0x7fffffff

080097c4 <_strtol_r>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	f7ff ff77 	bl	80096b8 <_strtol_l.constprop.0>
 80097ca:	bd10      	pop	{r4, pc}

080097cc <__ssputs_r>:
 80097cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ce:	b085      	sub	sp, #20
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	9203      	str	r2, [sp, #12]
 80097d4:	688e      	ldr	r6, [r1, #8]
 80097d6:	9a01      	ldr	r2, [sp, #4]
 80097d8:	0007      	movs	r7, r0
 80097da:	000c      	movs	r4, r1
 80097dc:	680b      	ldr	r3, [r1, #0]
 80097de:	4296      	cmp	r6, r2
 80097e0:	d831      	bhi.n	8009846 <__ssputs_r+0x7a>
 80097e2:	898a      	ldrh	r2, [r1, #12]
 80097e4:	2190      	movs	r1, #144	; 0x90
 80097e6:	00c9      	lsls	r1, r1, #3
 80097e8:	420a      	tst	r2, r1
 80097ea:	d029      	beq.n	8009840 <__ssputs_r+0x74>
 80097ec:	2003      	movs	r0, #3
 80097ee:	6921      	ldr	r1, [r4, #16]
 80097f0:	1a5b      	subs	r3, r3, r1
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	6963      	ldr	r3, [r4, #20]
 80097f6:	4343      	muls	r3, r0
 80097f8:	0fdd      	lsrs	r5, r3, #31
 80097fa:	18ed      	adds	r5, r5, r3
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	9802      	ldr	r0, [sp, #8]
 8009800:	3301      	adds	r3, #1
 8009802:	181b      	adds	r3, r3, r0
 8009804:	106d      	asrs	r5, r5, #1
 8009806:	42ab      	cmp	r3, r5
 8009808:	d900      	bls.n	800980c <__ssputs_r+0x40>
 800980a:	001d      	movs	r5, r3
 800980c:	0552      	lsls	r2, r2, #21
 800980e:	d529      	bpl.n	8009864 <__ssputs_r+0x98>
 8009810:	0029      	movs	r1, r5
 8009812:	0038      	movs	r0, r7
 8009814:	f7fe fbd8 	bl	8007fc8 <_malloc_r>
 8009818:	1e06      	subs	r6, r0, #0
 800981a:	d02d      	beq.n	8009878 <__ssputs_r+0xac>
 800981c:	9a02      	ldr	r2, [sp, #8]
 800981e:	6921      	ldr	r1, [r4, #16]
 8009820:	f000 fa22 	bl	8009c68 <memcpy>
 8009824:	89a2      	ldrh	r2, [r4, #12]
 8009826:	4b19      	ldr	r3, [pc, #100]	; (800988c <__ssputs_r+0xc0>)
 8009828:	401a      	ands	r2, r3
 800982a:	2380      	movs	r3, #128	; 0x80
 800982c:	4313      	orrs	r3, r2
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	9b02      	ldr	r3, [sp, #8]
 8009832:	6126      	str	r6, [r4, #16]
 8009834:	18f6      	adds	r6, r6, r3
 8009836:	6026      	str	r6, [r4, #0]
 8009838:	6165      	str	r5, [r4, #20]
 800983a:	9e01      	ldr	r6, [sp, #4]
 800983c:	1aed      	subs	r5, r5, r3
 800983e:	60a5      	str	r5, [r4, #8]
 8009840:	9b01      	ldr	r3, [sp, #4]
 8009842:	429e      	cmp	r6, r3
 8009844:	d900      	bls.n	8009848 <__ssputs_r+0x7c>
 8009846:	9e01      	ldr	r6, [sp, #4]
 8009848:	0032      	movs	r2, r6
 800984a:	9903      	ldr	r1, [sp, #12]
 800984c:	6820      	ldr	r0, [r4, #0]
 800984e:	f000 f9d4 	bl	8009bfa <memmove>
 8009852:	2000      	movs	r0, #0
 8009854:	68a3      	ldr	r3, [r4, #8]
 8009856:	1b9b      	subs	r3, r3, r6
 8009858:	60a3      	str	r3, [r4, #8]
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	199b      	adds	r3, r3, r6
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	b005      	add	sp, #20
 8009862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009864:	002a      	movs	r2, r5
 8009866:	0038      	movs	r0, r7
 8009868:	f000 fdc8 	bl	800a3fc <_realloc_r>
 800986c:	1e06      	subs	r6, r0, #0
 800986e:	d1df      	bne.n	8009830 <__ssputs_r+0x64>
 8009870:	0038      	movs	r0, r7
 8009872:	6921      	ldr	r1, [r4, #16]
 8009874:	f7fe fb32 	bl	8007edc <_free_r>
 8009878:	230c      	movs	r3, #12
 800987a:	2001      	movs	r0, #1
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	89a2      	ldrh	r2, [r4, #12]
 8009880:	3334      	adds	r3, #52	; 0x34
 8009882:	4313      	orrs	r3, r2
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	4240      	negs	r0, r0
 8009888:	e7ea      	b.n	8009860 <__ssputs_r+0x94>
 800988a:	46c0      	nop			; (mov r8, r8)
 800988c:	fffffb7f 	.word	0xfffffb7f

08009890 <_svfiprintf_r>:
 8009890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009892:	b0a1      	sub	sp, #132	; 0x84
 8009894:	9003      	str	r0, [sp, #12]
 8009896:	001d      	movs	r5, r3
 8009898:	898b      	ldrh	r3, [r1, #12]
 800989a:	000f      	movs	r7, r1
 800989c:	0016      	movs	r6, r2
 800989e:	061b      	lsls	r3, r3, #24
 80098a0:	d511      	bpl.n	80098c6 <_svfiprintf_r+0x36>
 80098a2:	690b      	ldr	r3, [r1, #16]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10e      	bne.n	80098c6 <_svfiprintf_r+0x36>
 80098a8:	2140      	movs	r1, #64	; 0x40
 80098aa:	f7fe fb8d 	bl	8007fc8 <_malloc_r>
 80098ae:	6038      	str	r0, [r7, #0]
 80098b0:	6138      	str	r0, [r7, #16]
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d105      	bne.n	80098c2 <_svfiprintf_r+0x32>
 80098b6:	230c      	movs	r3, #12
 80098b8:	9a03      	ldr	r2, [sp, #12]
 80098ba:	3801      	subs	r0, #1
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	b021      	add	sp, #132	; 0x84
 80098c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098c2:	2340      	movs	r3, #64	; 0x40
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	2300      	movs	r3, #0
 80098c8:	ac08      	add	r4, sp, #32
 80098ca:	6163      	str	r3, [r4, #20]
 80098cc:	3320      	adds	r3, #32
 80098ce:	7663      	strb	r3, [r4, #25]
 80098d0:	3310      	adds	r3, #16
 80098d2:	76a3      	strb	r3, [r4, #26]
 80098d4:	9507      	str	r5, [sp, #28]
 80098d6:	0035      	movs	r5, r6
 80098d8:	782b      	ldrb	r3, [r5, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <_svfiprintf_r+0x52>
 80098de:	2b25      	cmp	r3, #37	; 0x25
 80098e0:	d148      	bne.n	8009974 <_svfiprintf_r+0xe4>
 80098e2:	1bab      	subs	r3, r5, r6
 80098e4:	9305      	str	r3, [sp, #20]
 80098e6:	42b5      	cmp	r5, r6
 80098e8:	d00b      	beq.n	8009902 <_svfiprintf_r+0x72>
 80098ea:	0032      	movs	r2, r6
 80098ec:	0039      	movs	r1, r7
 80098ee:	9803      	ldr	r0, [sp, #12]
 80098f0:	f7ff ff6c 	bl	80097cc <__ssputs_r>
 80098f4:	3001      	adds	r0, #1
 80098f6:	d100      	bne.n	80098fa <_svfiprintf_r+0x6a>
 80098f8:	e0af      	b.n	8009a5a <_svfiprintf_r+0x1ca>
 80098fa:	6963      	ldr	r3, [r4, #20]
 80098fc:	9a05      	ldr	r2, [sp, #20]
 80098fe:	189b      	adds	r3, r3, r2
 8009900:	6163      	str	r3, [r4, #20]
 8009902:	782b      	ldrb	r3, [r5, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d100      	bne.n	800990a <_svfiprintf_r+0x7a>
 8009908:	e0a7      	b.n	8009a5a <_svfiprintf_r+0x1ca>
 800990a:	2201      	movs	r2, #1
 800990c:	2300      	movs	r3, #0
 800990e:	4252      	negs	r2, r2
 8009910:	6062      	str	r2, [r4, #4]
 8009912:	a904      	add	r1, sp, #16
 8009914:	3254      	adds	r2, #84	; 0x54
 8009916:	1852      	adds	r2, r2, r1
 8009918:	1c6e      	adds	r6, r5, #1
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	60e3      	str	r3, [r4, #12]
 800991e:	60a3      	str	r3, [r4, #8]
 8009920:	7013      	strb	r3, [r2, #0]
 8009922:	65a3      	str	r3, [r4, #88]	; 0x58
 8009924:	4b55      	ldr	r3, [pc, #340]	; (8009a7c <_svfiprintf_r+0x1ec>)
 8009926:	2205      	movs	r2, #5
 8009928:	0018      	movs	r0, r3
 800992a:	7831      	ldrb	r1, [r6, #0]
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	f7fd fc28 	bl	8007182 <memchr>
 8009932:	1c75      	adds	r5, r6, #1
 8009934:	2800      	cmp	r0, #0
 8009936:	d11f      	bne.n	8009978 <_svfiprintf_r+0xe8>
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	06d3      	lsls	r3, r2, #27
 800993c:	d504      	bpl.n	8009948 <_svfiprintf_r+0xb8>
 800993e:	2353      	movs	r3, #83	; 0x53
 8009940:	a904      	add	r1, sp, #16
 8009942:	185b      	adds	r3, r3, r1
 8009944:	2120      	movs	r1, #32
 8009946:	7019      	strb	r1, [r3, #0]
 8009948:	0713      	lsls	r3, r2, #28
 800994a:	d504      	bpl.n	8009956 <_svfiprintf_r+0xc6>
 800994c:	2353      	movs	r3, #83	; 0x53
 800994e:	a904      	add	r1, sp, #16
 8009950:	185b      	adds	r3, r3, r1
 8009952:	212b      	movs	r1, #43	; 0x2b
 8009954:	7019      	strb	r1, [r3, #0]
 8009956:	7833      	ldrb	r3, [r6, #0]
 8009958:	2b2a      	cmp	r3, #42	; 0x2a
 800995a:	d016      	beq.n	800998a <_svfiprintf_r+0xfa>
 800995c:	0035      	movs	r5, r6
 800995e:	2100      	movs	r1, #0
 8009960:	200a      	movs	r0, #10
 8009962:	68e3      	ldr	r3, [r4, #12]
 8009964:	782a      	ldrb	r2, [r5, #0]
 8009966:	1c6e      	adds	r6, r5, #1
 8009968:	3a30      	subs	r2, #48	; 0x30
 800996a:	2a09      	cmp	r2, #9
 800996c:	d94e      	bls.n	8009a0c <_svfiprintf_r+0x17c>
 800996e:	2900      	cmp	r1, #0
 8009970:	d111      	bne.n	8009996 <_svfiprintf_r+0x106>
 8009972:	e017      	b.n	80099a4 <_svfiprintf_r+0x114>
 8009974:	3501      	adds	r5, #1
 8009976:	e7af      	b.n	80098d8 <_svfiprintf_r+0x48>
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	6822      	ldr	r2, [r4, #0]
 800997c:	1ac0      	subs	r0, r0, r3
 800997e:	2301      	movs	r3, #1
 8009980:	4083      	lsls	r3, r0
 8009982:	4313      	orrs	r3, r2
 8009984:	002e      	movs	r6, r5
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	e7cc      	b.n	8009924 <_svfiprintf_r+0x94>
 800998a:	9b07      	ldr	r3, [sp, #28]
 800998c:	1d19      	adds	r1, r3, #4
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	9107      	str	r1, [sp, #28]
 8009992:	2b00      	cmp	r3, #0
 8009994:	db01      	blt.n	800999a <_svfiprintf_r+0x10a>
 8009996:	930b      	str	r3, [sp, #44]	; 0x2c
 8009998:	e004      	b.n	80099a4 <_svfiprintf_r+0x114>
 800999a:	425b      	negs	r3, r3
 800999c:	60e3      	str	r3, [r4, #12]
 800999e:	2302      	movs	r3, #2
 80099a0:	4313      	orrs	r3, r2
 80099a2:	6023      	str	r3, [r4, #0]
 80099a4:	782b      	ldrb	r3, [r5, #0]
 80099a6:	2b2e      	cmp	r3, #46	; 0x2e
 80099a8:	d10a      	bne.n	80099c0 <_svfiprintf_r+0x130>
 80099aa:	786b      	ldrb	r3, [r5, #1]
 80099ac:	2b2a      	cmp	r3, #42	; 0x2a
 80099ae:	d135      	bne.n	8009a1c <_svfiprintf_r+0x18c>
 80099b0:	9b07      	ldr	r3, [sp, #28]
 80099b2:	3502      	adds	r5, #2
 80099b4:	1d1a      	adds	r2, r3, #4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	9207      	str	r2, [sp, #28]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	db2b      	blt.n	8009a16 <_svfiprintf_r+0x186>
 80099be:	9309      	str	r3, [sp, #36]	; 0x24
 80099c0:	4e2f      	ldr	r6, [pc, #188]	; (8009a80 <_svfiprintf_r+0x1f0>)
 80099c2:	2203      	movs	r2, #3
 80099c4:	0030      	movs	r0, r6
 80099c6:	7829      	ldrb	r1, [r5, #0]
 80099c8:	f7fd fbdb 	bl	8007182 <memchr>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d006      	beq.n	80099de <_svfiprintf_r+0x14e>
 80099d0:	2340      	movs	r3, #64	; 0x40
 80099d2:	1b80      	subs	r0, r0, r6
 80099d4:	4083      	lsls	r3, r0
 80099d6:	6822      	ldr	r2, [r4, #0]
 80099d8:	3501      	adds	r5, #1
 80099da:	4313      	orrs	r3, r2
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	7829      	ldrb	r1, [r5, #0]
 80099e0:	2206      	movs	r2, #6
 80099e2:	4828      	ldr	r0, [pc, #160]	; (8009a84 <_svfiprintf_r+0x1f4>)
 80099e4:	1c6e      	adds	r6, r5, #1
 80099e6:	7621      	strb	r1, [r4, #24]
 80099e8:	f7fd fbcb 	bl	8007182 <memchr>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d03c      	beq.n	8009a6a <_svfiprintf_r+0x1da>
 80099f0:	4b25      	ldr	r3, [pc, #148]	; (8009a88 <_svfiprintf_r+0x1f8>)
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d125      	bne.n	8009a42 <_svfiprintf_r+0x1b2>
 80099f6:	2207      	movs	r2, #7
 80099f8:	9b07      	ldr	r3, [sp, #28]
 80099fa:	3307      	adds	r3, #7
 80099fc:	4393      	bics	r3, r2
 80099fe:	3308      	adds	r3, #8
 8009a00:	9307      	str	r3, [sp, #28]
 8009a02:	6963      	ldr	r3, [r4, #20]
 8009a04:	9a04      	ldr	r2, [sp, #16]
 8009a06:	189b      	adds	r3, r3, r2
 8009a08:	6163      	str	r3, [r4, #20]
 8009a0a:	e764      	b.n	80098d6 <_svfiprintf_r+0x46>
 8009a0c:	4343      	muls	r3, r0
 8009a0e:	0035      	movs	r5, r6
 8009a10:	2101      	movs	r1, #1
 8009a12:	189b      	adds	r3, r3, r2
 8009a14:	e7a6      	b.n	8009964 <_svfiprintf_r+0xd4>
 8009a16:	2301      	movs	r3, #1
 8009a18:	425b      	negs	r3, r3
 8009a1a:	e7d0      	b.n	80099be <_svfiprintf_r+0x12e>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	200a      	movs	r0, #10
 8009a20:	001a      	movs	r2, r3
 8009a22:	3501      	adds	r5, #1
 8009a24:	6063      	str	r3, [r4, #4]
 8009a26:	7829      	ldrb	r1, [r5, #0]
 8009a28:	1c6e      	adds	r6, r5, #1
 8009a2a:	3930      	subs	r1, #48	; 0x30
 8009a2c:	2909      	cmp	r1, #9
 8009a2e:	d903      	bls.n	8009a38 <_svfiprintf_r+0x1a8>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d0c5      	beq.n	80099c0 <_svfiprintf_r+0x130>
 8009a34:	9209      	str	r2, [sp, #36]	; 0x24
 8009a36:	e7c3      	b.n	80099c0 <_svfiprintf_r+0x130>
 8009a38:	4342      	muls	r2, r0
 8009a3a:	0035      	movs	r5, r6
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	1852      	adds	r2, r2, r1
 8009a40:	e7f1      	b.n	8009a26 <_svfiprintf_r+0x196>
 8009a42:	aa07      	add	r2, sp, #28
 8009a44:	9200      	str	r2, [sp, #0]
 8009a46:	0021      	movs	r1, r4
 8009a48:	003a      	movs	r2, r7
 8009a4a:	4b10      	ldr	r3, [pc, #64]	; (8009a8c <_svfiprintf_r+0x1fc>)
 8009a4c:	9803      	ldr	r0, [sp, #12]
 8009a4e:	f7fc fc03 	bl	8006258 <_printf_float>
 8009a52:	9004      	str	r0, [sp, #16]
 8009a54:	9b04      	ldr	r3, [sp, #16]
 8009a56:	3301      	adds	r3, #1
 8009a58:	d1d3      	bne.n	8009a02 <_svfiprintf_r+0x172>
 8009a5a:	89bb      	ldrh	r3, [r7, #12]
 8009a5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009a5e:	065b      	lsls	r3, r3, #25
 8009a60:	d400      	bmi.n	8009a64 <_svfiprintf_r+0x1d4>
 8009a62:	e72c      	b.n	80098be <_svfiprintf_r+0x2e>
 8009a64:	2001      	movs	r0, #1
 8009a66:	4240      	negs	r0, r0
 8009a68:	e729      	b.n	80098be <_svfiprintf_r+0x2e>
 8009a6a:	aa07      	add	r2, sp, #28
 8009a6c:	9200      	str	r2, [sp, #0]
 8009a6e:	0021      	movs	r1, r4
 8009a70:	003a      	movs	r2, r7
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <_svfiprintf_r+0x1fc>)
 8009a74:	9803      	ldr	r0, [sp, #12]
 8009a76:	f7fc feb5 	bl	80067e4 <_printf_i>
 8009a7a:	e7ea      	b.n	8009a52 <_svfiprintf_r+0x1c2>
 8009a7c:	0800ae61 	.word	0x0800ae61
 8009a80:	0800ae67 	.word	0x0800ae67
 8009a84:	0800ae6b 	.word	0x0800ae6b
 8009a88:	08006259 	.word	0x08006259
 8009a8c:	080097cd 	.word	0x080097cd

08009a90 <__sflush_r>:
 8009a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a92:	898b      	ldrh	r3, [r1, #12]
 8009a94:	0005      	movs	r5, r0
 8009a96:	000c      	movs	r4, r1
 8009a98:	071a      	lsls	r2, r3, #28
 8009a9a:	d45c      	bmi.n	8009b56 <__sflush_r+0xc6>
 8009a9c:	684a      	ldr	r2, [r1, #4]
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	dc04      	bgt.n	8009aac <__sflush_r+0x1c>
 8009aa2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009aa4:	2a00      	cmp	r2, #0
 8009aa6:	dc01      	bgt.n	8009aac <__sflush_r+0x1c>
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009aac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009aae:	2f00      	cmp	r7, #0
 8009ab0:	d0fa      	beq.n	8009aa8 <__sflush_r+0x18>
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2080      	movs	r0, #128	; 0x80
 8009ab6:	682e      	ldr	r6, [r5, #0]
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	001a      	movs	r2, r3
 8009abc:	0140      	lsls	r0, r0, #5
 8009abe:	6a21      	ldr	r1, [r4, #32]
 8009ac0:	4002      	ands	r2, r0
 8009ac2:	4203      	tst	r3, r0
 8009ac4:	d034      	beq.n	8009b30 <__sflush_r+0xa0>
 8009ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	075b      	lsls	r3, r3, #29
 8009acc:	d506      	bpl.n	8009adc <__sflush_r+0x4c>
 8009ace:	6863      	ldr	r3, [r4, #4]
 8009ad0:	1ac0      	subs	r0, r0, r3
 8009ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <__sflush_r+0x4c>
 8009ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ada:	1ac0      	subs	r0, r0, r3
 8009adc:	0002      	movs	r2, r0
 8009ade:	2300      	movs	r3, #0
 8009ae0:	0028      	movs	r0, r5
 8009ae2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009ae4:	6a21      	ldr	r1, [r4, #32]
 8009ae6:	47b8      	blx	r7
 8009ae8:	89a2      	ldrh	r2, [r4, #12]
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	d106      	bne.n	8009afc <__sflush_r+0x6c>
 8009aee:	6829      	ldr	r1, [r5, #0]
 8009af0:	291d      	cmp	r1, #29
 8009af2:	d82c      	bhi.n	8009b4e <__sflush_r+0xbe>
 8009af4:	4b2a      	ldr	r3, [pc, #168]	; (8009ba0 <__sflush_r+0x110>)
 8009af6:	410b      	asrs	r3, r1
 8009af8:	07db      	lsls	r3, r3, #31
 8009afa:	d428      	bmi.n	8009b4e <__sflush_r+0xbe>
 8009afc:	2300      	movs	r3, #0
 8009afe:	6063      	str	r3, [r4, #4]
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	6023      	str	r3, [r4, #0]
 8009b04:	04d2      	lsls	r2, r2, #19
 8009b06:	d505      	bpl.n	8009b14 <__sflush_r+0x84>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <__sflush_r+0x82>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d100      	bne.n	8009b14 <__sflush_r+0x84>
 8009b12:	6560      	str	r0, [r4, #84]	; 0x54
 8009b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b16:	602e      	str	r6, [r5, #0]
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	d0c5      	beq.n	8009aa8 <__sflush_r+0x18>
 8009b1c:	0023      	movs	r3, r4
 8009b1e:	3344      	adds	r3, #68	; 0x44
 8009b20:	4299      	cmp	r1, r3
 8009b22:	d002      	beq.n	8009b2a <__sflush_r+0x9a>
 8009b24:	0028      	movs	r0, r5
 8009b26:	f7fe f9d9 	bl	8007edc <_free_r>
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	6360      	str	r0, [r4, #52]	; 0x34
 8009b2e:	e7bc      	b.n	8009aaa <__sflush_r+0x1a>
 8009b30:	2301      	movs	r3, #1
 8009b32:	0028      	movs	r0, r5
 8009b34:	47b8      	blx	r7
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d1c6      	bne.n	8009ac8 <__sflush_r+0x38>
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0c3      	beq.n	8009ac8 <__sflush_r+0x38>
 8009b40:	2b1d      	cmp	r3, #29
 8009b42:	d001      	beq.n	8009b48 <__sflush_r+0xb8>
 8009b44:	2b16      	cmp	r3, #22
 8009b46:	d101      	bne.n	8009b4c <__sflush_r+0xbc>
 8009b48:	602e      	str	r6, [r5, #0]
 8009b4a:	e7ad      	b.n	8009aa8 <__sflush_r+0x18>
 8009b4c:	89a2      	ldrh	r2, [r4, #12]
 8009b4e:	2340      	movs	r3, #64	; 0x40
 8009b50:	4313      	orrs	r3, r2
 8009b52:	81a3      	strh	r3, [r4, #12]
 8009b54:	e7a9      	b.n	8009aaa <__sflush_r+0x1a>
 8009b56:	690e      	ldr	r6, [r1, #16]
 8009b58:	2e00      	cmp	r6, #0
 8009b5a:	d0a5      	beq.n	8009aa8 <__sflush_r+0x18>
 8009b5c:	680f      	ldr	r7, [r1, #0]
 8009b5e:	600e      	str	r6, [r1, #0]
 8009b60:	1bba      	subs	r2, r7, r6
 8009b62:	9201      	str	r2, [sp, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	079b      	lsls	r3, r3, #30
 8009b68:	d100      	bne.n	8009b6c <__sflush_r+0xdc>
 8009b6a:	694a      	ldr	r2, [r1, #20]
 8009b6c:	60a2      	str	r2, [r4, #8]
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dd99      	ble.n	8009aa8 <__sflush_r+0x18>
 8009b74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009b76:	0032      	movs	r2, r6
 8009b78:	001f      	movs	r7, r3
 8009b7a:	0028      	movs	r0, r5
 8009b7c:	9b01      	ldr	r3, [sp, #4]
 8009b7e:	6a21      	ldr	r1, [r4, #32]
 8009b80:	47b8      	blx	r7
 8009b82:	2800      	cmp	r0, #0
 8009b84:	dc06      	bgt.n	8009b94 <__sflush_r+0x104>
 8009b86:	2340      	movs	r3, #64	; 0x40
 8009b88:	2001      	movs	r0, #1
 8009b8a:	89a2      	ldrh	r2, [r4, #12]
 8009b8c:	4240      	negs	r0, r0
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	e78a      	b.n	8009aaa <__sflush_r+0x1a>
 8009b94:	9b01      	ldr	r3, [sp, #4]
 8009b96:	1836      	adds	r6, r6, r0
 8009b98:	1a1b      	subs	r3, r3, r0
 8009b9a:	9301      	str	r3, [sp, #4]
 8009b9c:	e7e7      	b.n	8009b6e <__sflush_r+0xde>
 8009b9e:	46c0      	nop			; (mov r8, r8)
 8009ba0:	dfbffffe 	.word	0xdfbffffe

08009ba4 <_fflush_r>:
 8009ba4:	690b      	ldr	r3, [r1, #16]
 8009ba6:	b570      	push	{r4, r5, r6, lr}
 8009ba8:	0005      	movs	r5, r0
 8009baa:	000c      	movs	r4, r1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <_fflush_r+0x12>
 8009bb0:	2500      	movs	r5, #0
 8009bb2:	0028      	movs	r0, r5
 8009bb4:	bd70      	pop	{r4, r5, r6, pc}
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d004      	beq.n	8009bc4 <_fflush_r+0x20>
 8009bba:	6a03      	ldr	r3, [r0, #32]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <_fflush_r+0x20>
 8009bc0:	f7fd f9b8 	bl	8006f34 <__sinit>
 8009bc4:	220c      	movs	r2, #12
 8009bc6:	5ea3      	ldrsh	r3, [r4, r2]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0f1      	beq.n	8009bb0 <_fflush_r+0xc>
 8009bcc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bce:	07d2      	lsls	r2, r2, #31
 8009bd0:	d404      	bmi.n	8009bdc <_fflush_r+0x38>
 8009bd2:	059b      	lsls	r3, r3, #22
 8009bd4:	d402      	bmi.n	8009bdc <_fflush_r+0x38>
 8009bd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd8:	f7fd fad1 	bl	800717e <__retarget_lock_acquire_recursive>
 8009bdc:	0028      	movs	r0, r5
 8009bde:	0021      	movs	r1, r4
 8009be0:	f7ff ff56 	bl	8009a90 <__sflush_r>
 8009be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009be6:	0005      	movs	r5, r0
 8009be8:	07db      	lsls	r3, r3, #31
 8009bea:	d4e2      	bmi.n	8009bb2 <_fflush_r+0xe>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	059b      	lsls	r3, r3, #22
 8009bf0:	d4df      	bmi.n	8009bb2 <_fflush_r+0xe>
 8009bf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bf4:	f7fd fac4 	bl	8007180 <__retarget_lock_release_recursive>
 8009bf8:	e7db      	b.n	8009bb2 <_fflush_r+0xe>

08009bfa <memmove>:
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	4288      	cmp	r0, r1
 8009bfe:	d902      	bls.n	8009c06 <memmove+0xc>
 8009c00:	188b      	adds	r3, r1, r2
 8009c02:	4298      	cmp	r0, r3
 8009c04:	d303      	bcc.n	8009c0e <memmove+0x14>
 8009c06:	2300      	movs	r3, #0
 8009c08:	e007      	b.n	8009c1a <memmove+0x20>
 8009c0a:	5c8b      	ldrb	r3, [r1, r2]
 8009c0c:	5483      	strb	r3, [r0, r2]
 8009c0e:	3a01      	subs	r2, #1
 8009c10:	d2fb      	bcs.n	8009c0a <memmove+0x10>
 8009c12:	bd10      	pop	{r4, pc}
 8009c14:	5ccc      	ldrb	r4, [r1, r3]
 8009c16:	54c4      	strb	r4, [r0, r3]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d1fa      	bne.n	8009c14 <memmove+0x1a>
 8009c1e:	e7f8      	b.n	8009c12 <memmove+0x18>

08009c20 <strncmp>:
 8009c20:	b530      	push	{r4, r5, lr}
 8009c22:	0005      	movs	r5, r0
 8009c24:	1e10      	subs	r0, r2, #0
 8009c26:	d00b      	beq.n	8009c40 <strncmp+0x20>
 8009c28:	2400      	movs	r4, #0
 8009c2a:	3a01      	subs	r2, #1
 8009c2c:	5d2b      	ldrb	r3, [r5, r4]
 8009c2e:	5d08      	ldrb	r0, [r1, r4]
 8009c30:	4283      	cmp	r3, r0
 8009c32:	d104      	bne.n	8009c3e <strncmp+0x1e>
 8009c34:	42a2      	cmp	r2, r4
 8009c36:	d002      	beq.n	8009c3e <strncmp+0x1e>
 8009c38:	3401      	adds	r4, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1f6      	bne.n	8009c2c <strncmp+0xc>
 8009c3e:	1a18      	subs	r0, r3, r0
 8009c40:	bd30      	pop	{r4, r5, pc}
	...

08009c44 <_sbrk_r>:
 8009c44:	2300      	movs	r3, #0
 8009c46:	b570      	push	{r4, r5, r6, lr}
 8009c48:	4d06      	ldr	r5, [pc, #24]	; (8009c64 <_sbrk_r+0x20>)
 8009c4a:	0004      	movs	r4, r0
 8009c4c:	0008      	movs	r0, r1
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	f7f9 fb02 	bl	8003258 <_sbrk>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d103      	bne.n	8009c60 <_sbrk_r+0x1c>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d000      	beq.n	8009c60 <_sbrk_r+0x1c>
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	bd70      	pop	{r4, r5, r6, pc}
 8009c62:	46c0      	nop			; (mov r8, r8)
 8009c64:	200004c4 	.word	0x200004c4

08009c68 <memcpy>:
 8009c68:	2300      	movs	r3, #0
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d100      	bne.n	8009c72 <memcpy+0xa>
 8009c70:	bd10      	pop	{r4, pc}
 8009c72:	5ccc      	ldrb	r4, [r1, r3]
 8009c74:	54c4      	strb	r4, [r0, r3]
 8009c76:	3301      	adds	r3, #1
 8009c78:	e7f8      	b.n	8009c6c <memcpy+0x4>
	...

08009c7c <nan>:
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	4901      	ldr	r1, [pc, #4]	; (8009c84 <nan+0x8>)
 8009c80:	4770      	bx	lr
 8009c82:	46c0      	nop			; (mov r8, r8)
 8009c84:	7ff80000 	.word	0x7ff80000

08009c88 <__assert_func>:
 8009c88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c8a:	0014      	movs	r4, r2
 8009c8c:	001a      	movs	r2, r3
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <__assert_func+0x2c>)
 8009c90:	0005      	movs	r5, r0
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	000e      	movs	r6, r1
 8009c96:	68d8      	ldr	r0, [r3, #12]
 8009c98:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <__assert_func+0x30>)
 8009c9a:	2c00      	cmp	r4, #0
 8009c9c:	d101      	bne.n	8009ca2 <__assert_func+0x1a>
 8009c9e:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <__assert_func+0x34>)
 8009ca0:	001c      	movs	r4, r3
 8009ca2:	4907      	ldr	r1, [pc, #28]	; (8009cc0 <__assert_func+0x38>)
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	9402      	str	r4, [sp, #8]
 8009ca8:	002b      	movs	r3, r5
 8009caa:	9600      	str	r6, [sp, #0]
 8009cac:	f000 fbe2 	bl	800a474 <fiprintf>
 8009cb0:	f000 fbf0 	bl	800a494 <abort>
 8009cb4:	20000064 	.word	0x20000064
 8009cb8:	0800ae7a 	.word	0x0800ae7a
 8009cbc:	0800aeb5 	.word	0x0800aeb5
 8009cc0:	0800ae87 	.word	0x0800ae87

08009cc4 <_calloc_r>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	0c0b      	lsrs	r3, r1, #16
 8009cc8:	0c15      	lsrs	r5, r2, #16
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d11e      	bne.n	8009d0c <_calloc_r+0x48>
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	d10c      	bne.n	8009cec <_calloc_r+0x28>
 8009cd2:	b289      	uxth	r1, r1
 8009cd4:	b294      	uxth	r4, r2
 8009cd6:	434c      	muls	r4, r1
 8009cd8:	0021      	movs	r1, r4
 8009cda:	f7fe f975 	bl	8007fc8 <_malloc_r>
 8009cde:	1e05      	subs	r5, r0, #0
 8009ce0:	d01b      	beq.n	8009d1a <_calloc_r+0x56>
 8009ce2:	0022      	movs	r2, r4
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	f7fd f9c5 	bl	8007074 <memset>
 8009cea:	e016      	b.n	8009d1a <_calloc_r+0x56>
 8009cec:	1c2b      	adds	r3, r5, #0
 8009cee:	1c0c      	adds	r4, r1, #0
 8009cf0:	b289      	uxth	r1, r1
 8009cf2:	b292      	uxth	r2, r2
 8009cf4:	434a      	muls	r2, r1
 8009cf6:	b2a1      	uxth	r1, r4
 8009cf8:	b29c      	uxth	r4, r3
 8009cfa:	434c      	muls	r4, r1
 8009cfc:	0c13      	lsrs	r3, r2, #16
 8009cfe:	18e4      	adds	r4, r4, r3
 8009d00:	0c23      	lsrs	r3, r4, #16
 8009d02:	d107      	bne.n	8009d14 <_calloc_r+0x50>
 8009d04:	0424      	lsls	r4, r4, #16
 8009d06:	b292      	uxth	r2, r2
 8009d08:	4314      	orrs	r4, r2
 8009d0a:	e7e5      	b.n	8009cd8 <_calloc_r+0x14>
 8009d0c:	2d00      	cmp	r5, #0
 8009d0e:	d101      	bne.n	8009d14 <_calloc_r+0x50>
 8009d10:	1c14      	adds	r4, r2, #0
 8009d12:	e7ed      	b.n	8009cf0 <_calloc_r+0x2c>
 8009d14:	230c      	movs	r3, #12
 8009d16:	2500      	movs	r5, #0
 8009d18:	6003      	str	r3, [r0, #0]
 8009d1a:	0028      	movs	r0, r5
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}

08009d1e <rshift>:
 8009d1e:	0002      	movs	r2, r0
 8009d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d22:	6904      	ldr	r4, [r0, #16]
 8009d24:	114b      	asrs	r3, r1, #5
 8009d26:	b085      	sub	sp, #20
 8009d28:	3214      	adds	r2, #20
 8009d2a:	9302      	str	r3, [sp, #8]
 8009d2c:	114d      	asrs	r5, r1, #5
 8009d2e:	0013      	movs	r3, r2
 8009d30:	42ac      	cmp	r4, r5
 8009d32:	dd32      	ble.n	8009d9a <rshift+0x7c>
 8009d34:	261f      	movs	r6, #31
 8009d36:	000f      	movs	r7, r1
 8009d38:	114b      	asrs	r3, r1, #5
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	00a5      	lsls	r5, r4, #2
 8009d3e:	18d3      	adds	r3, r2, r3
 8009d40:	4037      	ands	r7, r6
 8009d42:	1955      	adds	r5, r2, r5
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	9701      	str	r7, [sp, #4]
 8009d48:	4231      	tst	r1, r6
 8009d4a:	d10d      	bne.n	8009d68 <rshift+0x4a>
 8009d4c:	0016      	movs	r6, r2
 8009d4e:	0019      	movs	r1, r3
 8009d50:	428d      	cmp	r5, r1
 8009d52:	d836      	bhi.n	8009dc2 <rshift+0xa4>
 8009d54:	9900      	ldr	r1, [sp, #0]
 8009d56:	2300      	movs	r3, #0
 8009d58:	3903      	subs	r1, #3
 8009d5a:	428d      	cmp	r5, r1
 8009d5c:	d302      	bcc.n	8009d64 <rshift+0x46>
 8009d5e:	9b02      	ldr	r3, [sp, #8]
 8009d60:	1ae4      	subs	r4, r4, r3
 8009d62:	00a3      	lsls	r3, r4, #2
 8009d64:	18d3      	adds	r3, r2, r3
 8009d66:	e018      	b.n	8009d9a <rshift+0x7c>
 8009d68:	2120      	movs	r1, #32
 8009d6a:	9e01      	ldr	r6, [sp, #4]
 8009d6c:	9f01      	ldr	r7, [sp, #4]
 8009d6e:	1b89      	subs	r1, r1, r6
 8009d70:	9e00      	ldr	r6, [sp, #0]
 8009d72:	9103      	str	r1, [sp, #12]
 8009d74:	ce02      	ldmia	r6!, {r1}
 8009d76:	4694      	mov	ip, r2
 8009d78:	40f9      	lsrs	r1, r7
 8009d7a:	42b5      	cmp	r5, r6
 8009d7c:	d816      	bhi.n	8009dac <rshift+0x8e>
 8009d7e:	9e00      	ldr	r6, [sp, #0]
 8009d80:	2300      	movs	r3, #0
 8009d82:	3601      	adds	r6, #1
 8009d84:	42b5      	cmp	r5, r6
 8009d86:	d303      	bcc.n	8009d90 <rshift+0x72>
 8009d88:	9b02      	ldr	r3, [sp, #8]
 8009d8a:	1ae3      	subs	r3, r4, r3
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	3b04      	subs	r3, #4
 8009d90:	18d3      	adds	r3, r2, r3
 8009d92:	6019      	str	r1, [r3, #0]
 8009d94:	2900      	cmp	r1, #0
 8009d96:	d000      	beq.n	8009d9a <rshift+0x7c>
 8009d98:	3304      	adds	r3, #4
 8009d9a:	1a99      	subs	r1, r3, r2
 8009d9c:	1089      	asrs	r1, r1, #2
 8009d9e:	6101      	str	r1, [r0, #16]
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d101      	bne.n	8009da8 <rshift+0x8a>
 8009da4:	2300      	movs	r3, #0
 8009da6:	6143      	str	r3, [r0, #20]
 8009da8:	b005      	add	sp, #20
 8009daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dac:	6837      	ldr	r7, [r6, #0]
 8009dae:	9b03      	ldr	r3, [sp, #12]
 8009db0:	409f      	lsls	r7, r3
 8009db2:	430f      	orrs	r7, r1
 8009db4:	4661      	mov	r1, ip
 8009db6:	c180      	stmia	r1!, {r7}
 8009db8:	468c      	mov	ip, r1
 8009dba:	9b01      	ldr	r3, [sp, #4]
 8009dbc:	ce02      	ldmia	r6!, {r1}
 8009dbe:	40d9      	lsrs	r1, r3
 8009dc0:	e7db      	b.n	8009d7a <rshift+0x5c>
 8009dc2:	c980      	ldmia	r1!, {r7}
 8009dc4:	c680      	stmia	r6!, {r7}
 8009dc6:	e7c3      	b.n	8009d50 <rshift+0x32>

08009dc8 <__hexdig_fun>:
 8009dc8:	0002      	movs	r2, r0
 8009dca:	3a30      	subs	r2, #48	; 0x30
 8009dcc:	0003      	movs	r3, r0
 8009dce:	2a09      	cmp	r2, #9
 8009dd0:	d802      	bhi.n	8009dd8 <__hexdig_fun+0x10>
 8009dd2:	3b20      	subs	r3, #32
 8009dd4:	b2d8      	uxtb	r0, r3
 8009dd6:	4770      	bx	lr
 8009dd8:	0002      	movs	r2, r0
 8009dda:	3a61      	subs	r2, #97	; 0x61
 8009ddc:	2a05      	cmp	r2, #5
 8009dde:	d801      	bhi.n	8009de4 <__hexdig_fun+0x1c>
 8009de0:	3b47      	subs	r3, #71	; 0x47
 8009de2:	e7f7      	b.n	8009dd4 <__hexdig_fun+0xc>
 8009de4:	001a      	movs	r2, r3
 8009de6:	3a41      	subs	r2, #65	; 0x41
 8009de8:	2000      	movs	r0, #0
 8009dea:	2a05      	cmp	r2, #5
 8009dec:	d8f3      	bhi.n	8009dd6 <__hexdig_fun+0xe>
 8009dee:	3b27      	subs	r3, #39	; 0x27
 8009df0:	e7f0      	b.n	8009dd4 <__hexdig_fun+0xc>
	...

08009df4 <__gethex>:
 8009df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df6:	b089      	sub	sp, #36	; 0x24
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	680a      	ldr	r2, [r1, #0]
 8009e00:	425b      	negs	r3, r3
 8009e02:	9003      	str	r0, [sp, #12]
 8009e04:	9106      	str	r1, [sp, #24]
 8009e06:	1c96      	adds	r6, r2, #2
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	199a      	adds	r2, r3, r6
 8009e0c:	9600      	str	r6, [sp, #0]
 8009e0e:	9205      	str	r2, [sp, #20]
 8009e10:	9a00      	ldr	r2, [sp, #0]
 8009e12:	3601      	adds	r6, #1
 8009e14:	7810      	ldrb	r0, [r2, #0]
 8009e16:	2830      	cmp	r0, #48	; 0x30
 8009e18:	d0f7      	beq.n	8009e0a <__gethex+0x16>
 8009e1a:	f7ff ffd5 	bl	8009dc8 <__hexdig_fun>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	001d      	movs	r5, r3
 8009e22:	9302      	str	r3, [sp, #8]
 8009e24:	4298      	cmp	r0, r3
 8009e26:	d11d      	bne.n	8009e64 <__gethex+0x70>
 8009e28:	2201      	movs	r2, #1
 8009e2a:	49a6      	ldr	r1, [pc, #664]	; (800a0c4 <__gethex+0x2d0>)
 8009e2c:	9800      	ldr	r0, [sp, #0]
 8009e2e:	f7ff fef7 	bl	8009c20 <strncmp>
 8009e32:	0007      	movs	r7, r0
 8009e34:	42a8      	cmp	r0, r5
 8009e36:	d169      	bne.n	8009f0c <__gethex+0x118>
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	0034      	movs	r4, r6
 8009e3c:	7858      	ldrb	r0, [r3, #1]
 8009e3e:	f7ff ffc3 	bl	8009dc8 <__hexdig_fun>
 8009e42:	2301      	movs	r3, #1
 8009e44:	9302      	str	r3, [sp, #8]
 8009e46:	42a8      	cmp	r0, r5
 8009e48:	d02f      	beq.n	8009eaa <__gethex+0xb6>
 8009e4a:	9600      	str	r6, [sp, #0]
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	7818      	ldrb	r0, [r3, #0]
 8009e50:	2830      	cmp	r0, #48	; 0x30
 8009e52:	d009      	beq.n	8009e68 <__gethex+0x74>
 8009e54:	f7ff ffb8 	bl	8009dc8 <__hexdig_fun>
 8009e58:	4242      	negs	r2, r0
 8009e5a:	4142      	adcs	r2, r0
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	0035      	movs	r5, r6
 8009e60:	9202      	str	r2, [sp, #8]
 8009e62:	9305      	str	r3, [sp, #20]
 8009e64:	9c00      	ldr	r4, [sp, #0]
 8009e66:	e004      	b.n	8009e72 <__gethex+0x7e>
 8009e68:	9b00      	ldr	r3, [sp, #0]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	e7ed      	b.n	8009e4c <__gethex+0x58>
 8009e70:	3401      	adds	r4, #1
 8009e72:	7820      	ldrb	r0, [r4, #0]
 8009e74:	f7ff ffa8 	bl	8009dc8 <__hexdig_fun>
 8009e78:	1e07      	subs	r7, r0, #0
 8009e7a:	d1f9      	bne.n	8009e70 <__gethex+0x7c>
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	0020      	movs	r0, r4
 8009e80:	4990      	ldr	r1, [pc, #576]	; (800a0c4 <__gethex+0x2d0>)
 8009e82:	f7ff fecd 	bl	8009c20 <strncmp>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d10d      	bne.n	8009ea6 <__gethex+0xb2>
 8009e8a:	2d00      	cmp	r5, #0
 8009e8c:	d106      	bne.n	8009e9c <__gethex+0xa8>
 8009e8e:	3401      	adds	r4, #1
 8009e90:	0025      	movs	r5, r4
 8009e92:	7820      	ldrb	r0, [r4, #0]
 8009e94:	f7ff ff98 	bl	8009dc8 <__hexdig_fun>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d102      	bne.n	8009ea2 <__gethex+0xae>
 8009e9c:	1b2d      	subs	r5, r5, r4
 8009e9e:	00af      	lsls	r7, r5, #2
 8009ea0:	e003      	b.n	8009eaa <__gethex+0xb6>
 8009ea2:	3401      	adds	r4, #1
 8009ea4:	e7f5      	b.n	8009e92 <__gethex+0x9e>
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	d1f8      	bne.n	8009e9c <__gethex+0xa8>
 8009eaa:	2220      	movs	r2, #32
 8009eac:	7823      	ldrb	r3, [r4, #0]
 8009eae:	0026      	movs	r6, r4
 8009eb0:	4393      	bics	r3, r2
 8009eb2:	2b50      	cmp	r3, #80	; 0x50
 8009eb4:	d11d      	bne.n	8009ef2 <__gethex+0xfe>
 8009eb6:	7863      	ldrb	r3, [r4, #1]
 8009eb8:	2b2b      	cmp	r3, #43	; 0x2b
 8009eba:	d02c      	beq.n	8009f16 <__gethex+0x122>
 8009ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8009ebe:	d02e      	beq.n	8009f1e <__gethex+0x12a>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	1c66      	adds	r6, r4, #1
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	7830      	ldrb	r0, [r6, #0]
 8009ec8:	f7ff ff7e 	bl	8009dc8 <__hexdig_fun>
 8009ecc:	1e43      	subs	r3, r0, #1
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b18      	cmp	r3, #24
 8009ed2:	d82b      	bhi.n	8009f2c <__gethex+0x138>
 8009ed4:	3810      	subs	r0, #16
 8009ed6:	0005      	movs	r5, r0
 8009ed8:	7870      	ldrb	r0, [r6, #1]
 8009eda:	f7ff ff75 	bl	8009dc8 <__hexdig_fun>
 8009ede:	1e43      	subs	r3, r0, #1
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	3601      	adds	r6, #1
 8009ee4:	2b18      	cmp	r3, #24
 8009ee6:	d91c      	bls.n	8009f22 <__gethex+0x12e>
 8009ee8:	9b04      	ldr	r3, [sp, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d000      	beq.n	8009ef0 <__gethex+0xfc>
 8009eee:	426d      	negs	r5, r5
 8009ef0:	197f      	adds	r7, r7, r5
 8009ef2:	9b06      	ldr	r3, [sp, #24]
 8009ef4:	601e      	str	r6, [r3, #0]
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d019      	beq.n	8009f30 <__gethex+0x13c>
 8009efc:	2600      	movs	r6, #0
 8009efe:	9b05      	ldr	r3, [sp, #20]
 8009f00:	42b3      	cmp	r3, r6
 8009f02:	d100      	bne.n	8009f06 <__gethex+0x112>
 8009f04:	3606      	adds	r6, #6
 8009f06:	0030      	movs	r0, r6
 8009f08:	b009      	add	sp, #36	; 0x24
 8009f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	2700      	movs	r7, #0
 8009f10:	9c00      	ldr	r4, [sp, #0]
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	e7c9      	b.n	8009eaa <__gethex+0xb6>
 8009f16:	2300      	movs	r3, #0
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	1ca6      	adds	r6, r4, #2
 8009f1c:	e7d3      	b.n	8009ec6 <__gethex+0xd2>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e7fa      	b.n	8009f18 <__gethex+0x124>
 8009f22:	230a      	movs	r3, #10
 8009f24:	435d      	muls	r5, r3
 8009f26:	182d      	adds	r5, r5, r0
 8009f28:	3d10      	subs	r5, #16
 8009f2a:	e7d5      	b.n	8009ed8 <__gethex+0xe4>
 8009f2c:	0026      	movs	r6, r4
 8009f2e:	e7e0      	b.n	8009ef2 <__gethex+0xfe>
 8009f30:	9b00      	ldr	r3, [sp, #0]
 8009f32:	9902      	ldr	r1, [sp, #8]
 8009f34:	1ae3      	subs	r3, r4, r3
 8009f36:	3b01      	subs	r3, #1
 8009f38:	2b07      	cmp	r3, #7
 8009f3a:	dc0a      	bgt.n	8009f52 <__gethex+0x15e>
 8009f3c:	9803      	ldr	r0, [sp, #12]
 8009f3e:	f7fe f8d5 	bl	80080ec <_Balloc>
 8009f42:	1e05      	subs	r5, r0, #0
 8009f44:	d108      	bne.n	8009f58 <__gethex+0x164>
 8009f46:	002a      	movs	r2, r5
 8009f48:	21e4      	movs	r1, #228	; 0xe4
 8009f4a:	4b5f      	ldr	r3, [pc, #380]	; (800a0c8 <__gethex+0x2d4>)
 8009f4c:	485f      	ldr	r0, [pc, #380]	; (800a0cc <__gethex+0x2d8>)
 8009f4e:	f7ff fe9b 	bl	8009c88 <__assert_func>
 8009f52:	3101      	adds	r1, #1
 8009f54:	105b      	asrs	r3, r3, #1
 8009f56:	e7ef      	b.n	8009f38 <__gethex+0x144>
 8009f58:	0003      	movs	r3, r0
 8009f5a:	3314      	adds	r3, #20
 8009f5c:	9302      	str	r3, [sp, #8]
 8009f5e:	9305      	str	r3, [sp, #20]
 8009f60:	2300      	movs	r3, #0
 8009f62:	001e      	movs	r6, r3
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	9b00      	ldr	r3, [sp, #0]
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d33f      	bcc.n	8009fec <__gethex+0x1f8>
 8009f6c:	9c05      	ldr	r4, [sp, #20]
 8009f6e:	9b02      	ldr	r3, [sp, #8]
 8009f70:	c440      	stmia	r4!, {r6}
 8009f72:	1ae4      	subs	r4, r4, r3
 8009f74:	10a4      	asrs	r4, r4, #2
 8009f76:	0030      	movs	r0, r6
 8009f78:	612c      	str	r4, [r5, #16]
 8009f7a:	f7fe f9af 	bl	80082dc <__hi0bits>
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	0164      	lsls	r4, r4, #5
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	1a26      	subs	r6, r4, r0
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	429e      	cmp	r6, r3
 8009f8a:	dd51      	ble.n	800a030 <__gethex+0x23c>
 8009f8c:	1af6      	subs	r6, r6, r3
 8009f8e:	0031      	movs	r1, r6
 8009f90:	0028      	movs	r0, r5
 8009f92:	f7fe fd43 	bl	8008a1c <__any_on>
 8009f96:	1e04      	subs	r4, r0, #0
 8009f98:	d016      	beq.n	8009fc8 <__gethex+0x1d4>
 8009f9a:	2401      	movs	r4, #1
 8009f9c:	231f      	movs	r3, #31
 8009f9e:	0020      	movs	r0, r4
 8009fa0:	1e72      	subs	r2, r6, #1
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	4098      	lsls	r0, r3
 8009fa6:	0003      	movs	r3, r0
 8009fa8:	1151      	asrs	r1, r2, #5
 8009faa:	9802      	ldr	r0, [sp, #8]
 8009fac:	0089      	lsls	r1, r1, #2
 8009fae:	5809      	ldr	r1, [r1, r0]
 8009fb0:	4219      	tst	r1, r3
 8009fb2:	d009      	beq.n	8009fc8 <__gethex+0x1d4>
 8009fb4:	42a2      	cmp	r2, r4
 8009fb6:	dd06      	ble.n	8009fc6 <__gethex+0x1d2>
 8009fb8:	0028      	movs	r0, r5
 8009fba:	1eb1      	subs	r1, r6, #2
 8009fbc:	f7fe fd2e 	bl	8008a1c <__any_on>
 8009fc0:	3402      	adds	r4, #2
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d100      	bne.n	8009fc8 <__gethex+0x1d4>
 8009fc6:	2402      	movs	r4, #2
 8009fc8:	0031      	movs	r1, r6
 8009fca:	0028      	movs	r0, r5
 8009fcc:	f7ff fea7 	bl	8009d1e <rshift>
 8009fd0:	19bf      	adds	r7, r7, r6
 8009fd2:	9b01      	ldr	r3, [sp, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	42bb      	cmp	r3, r7
 8009fd8:	da3a      	bge.n	800a050 <__gethex+0x25c>
 8009fda:	0029      	movs	r1, r5
 8009fdc:	9803      	ldr	r0, [sp, #12]
 8009fde:	f7fe f8c9 	bl	8008174 <_Bfree>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fe6:	26a3      	movs	r6, #163	; 0xa3
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	e78c      	b.n	8009f06 <__gethex+0x112>
 8009fec:	3c01      	subs	r4, #1
 8009fee:	7823      	ldrb	r3, [r4, #0]
 8009ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ff2:	d012      	beq.n	800a01a <__gethex+0x226>
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d104      	bne.n	800a004 <__gethex+0x210>
 8009ffa:	9b05      	ldr	r3, [sp, #20]
 8009ffc:	c340      	stmia	r3!, {r6}
 8009ffe:	2600      	movs	r6, #0
 800a000:	9305      	str	r3, [sp, #20]
 800a002:	9604      	str	r6, [sp, #16]
 800a004:	7820      	ldrb	r0, [r4, #0]
 800a006:	f7ff fedf 	bl	8009dc8 <__hexdig_fun>
 800a00a:	230f      	movs	r3, #15
 800a00c:	4018      	ands	r0, r3
 800a00e:	9b04      	ldr	r3, [sp, #16]
 800a010:	4098      	lsls	r0, r3
 800a012:	3304      	adds	r3, #4
 800a014:	4306      	orrs	r6, r0
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	e7a5      	b.n	8009f66 <__gethex+0x172>
 800a01a:	9b00      	ldr	r3, [sp, #0]
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	d8e9      	bhi.n	8009ff4 <__gethex+0x200>
 800a020:	2201      	movs	r2, #1
 800a022:	0020      	movs	r0, r4
 800a024:	4927      	ldr	r1, [pc, #156]	; (800a0c4 <__gethex+0x2d0>)
 800a026:	f7ff fdfb 	bl	8009c20 <strncmp>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	d1e2      	bne.n	8009ff4 <__gethex+0x200>
 800a02e:	e79a      	b.n	8009f66 <__gethex+0x172>
 800a030:	9b00      	ldr	r3, [sp, #0]
 800a032:	2400      	movs	r4, #0
 800a034:	429e      	cmp	r6, r3
 800a036:	dacc      	bge.n	8009fd2 <__gethex+0x1de>
 800a038:	1b9e      	subs	r6, r3, r6
 800a03a:	0029      	movs	r1, r5
 800a03c:	0032      	movs	r2, r6
 800a03e:	9803      	ldr	r0, [sp, #12]
 800a040:	f7fe fab8 	bl	80085b4 <__lshift>
 800a044:	0003      	movs	r3, r0
 800a046:	3314      	adds	r3, #20
 800a048:	0005      	movs	r5, r0
 800a04a:	1bbf      	subs	r7, r7, r6
 800a04c:	9302      	str	r3, [sp, #8]
 800a04e:	e7c0      	b.n	8009fd2 <__gethex+0x1de>
 800a050:	9b01      	ldr	r3, [sp, #4]
 800a052:	685e      	ldr	r6, [r3, #4]
 800a054:	42be      	cmp	r6, r7
 800a056:	dd70      	ble.n	800a13a <__gethex+0x346>
 800a058:	9b00      	ldr	r3, [sp, #0]
 800a05a:	1bf6      	subs	r6, r6, r7
 800a05c:	42b3      	cmp	r3, r6
 800a05e:	dc37      	bgt.n	800a0d0 <__gethex+0x2dc>
 800a060:	9b01      	ldr	r3, [sp, #4]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d024      	beq.n	800a0b2 <__gethex+0x2be>
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d026      	beq.n	800a0ba <__gethex+0x2c6>
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d117      	bne.n	800a0a0 <__gethex+0x2ac>
 800a070:	9b00      	ldr	r3, [sp, #0]
 800a072:	42b3      	cmp	r3, r6
 800a074:	d114      	bne.n	800a0a0 <__gethex+0x2ac>
 800a076:	2b01      	cmp	r3, #1
 800a078:	d10b      	bne.n	800a092 <__gethex+0x29e>
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	9a07      	ldr	r2, [sp, #28]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	2662      	movs	r6, #98	; 0x62
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	2301      	movs	r3, #1
 800a086:	9a02      	ldr	r2, [sp, #8]
 800a088:	612b      	str	r3, [r5, #16]
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a08e:	601d      	str	r5, [r3, #0]
 800a090:	e739      	b.n	8009f06 <__gethex+0x112>
 800a092:	9900      	ldr	r1, [sp, #0]
 800a094:	0028      	movs	r0, r5
 800a096:	3901      	subs	r1, #1
 800a098:	f7fe fcc0 	bl	8008a1c <__any_on>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1ec      	bne.n	800a07a <__gethex+0x286>
 800a0a0:	0029      	movs	r1, r5
 800a0a2:	9803      	ldr	r0, [sp, #12]
 800a0a4:	f7fe f866 	bl	8008174 <_Bfree>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ac:	2650      	movs	r6, #80	; 0x50
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	e729      	b.n	8009f06 <__gethex+0x112>
 800a0b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f3      	bne.n	800a0a0 <__gethex+0x2ac>
 800a0b8:	e7df      	b.n	800a07a <__gethex+0x286>
 800a0ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1dc      	bne.n	800a07a <__gethex+0x286>
 800a0c0:	e7ee      	b.n	800a0a0 <__gethex+0x2ac>
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	0800ad0c 	.word	0x0800ad0c
 800a0c8:	0800aba5 	.word	0x0800aba5
 800a0cc:	0800aeb6 	.word	0x0800aeb6
 800a0d0:	1e77      	subs	r7, r6, #1
 800a0d2:	2c00      	cmp	r4, #0
 800a0d4:	d12f      	bne.n	800a136 <__gethex+0x342>
 800a0d6:	2f00      	cmp	r7, #0
 800a0d8:	d004      	beq.n	800a0e4 <__gethex+0x2f0>
 800a0da:	0039      	movs	r1, r7
 800a0dc:	0028      	movs	r0, r5
 800a0de:	f7fe fc9d 	bl	8008a1c <__any_on>
 800a0e2:	0004      	movs	r4, r0
 800a0e4:	231f      	movs	r3, #31
 800a0e6:	117a      	asrs	r2, r7, #5
 800a0e8:	401f      	ands	r7, r3
 800a0ea:	3b1e      	subs	r3, #30
 800a0ec:	40bb      	lsls	r3, r7
 800a0ee:	9902      	ldr	r1, [sp, #8]
 800a0f0:	0092      	lsls	r2, r2, #2
 800a0f2:	5852      	ldr	r2, [r2, r1]
 800a0f4:	421a      	tst	r2, r3
 800a0f6:	d001      	beq.n	800a0fc <__gethex+0x308>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	431c      	orrs	r4, r3
 800a0fc:	9b00      	ldr	r3, [sp, #0]
 800a0fe:	0031      	movs	r1, r6
 800a100:	1b9b      	subs	r3, r3, r6
 800a102:	2602      	movs	r6, #2
 800a104:	0028      	movs	r0, r5
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	f7ff fe09 	bl	8009d1e <rshift>
 800a10c:	9b01      	ldr	r3, [sp, #4]
 800a10e:	685f      	ldr	r7, [r3, #4]
 800a110:	2c00      	cmp	r4, #0
 800a112:	d041      	beq.n	800a198 <__gethex+0x3a4>
 800a114:	9b01      	ldr	r3, [sp, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d010      	beq.n	800a13e <__gethex+0x34a>
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d012      	beq.n	800a146 <__gethex+0x352>
 800a120:	2b01      	cmp	r3, #1
 800a122:	d106      	bne.n	800a132 <__gethex+0x33e>
 800a124:	07a2      	lsls	r2, r4, #30
 800a126:	d504      	bpl.n	800a132 <__gethex+0x33e>
 800a128:	9a02      	ldr	r2, [sp, #8]
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	4314      	orrs	r4, r2
 800a12e:	421c      	tst	r4, r3
 800a130:	d10c      	bne.n	800a14c <__gethex+0x358>
 800a132:	2310      	movs	r3, #16
 800a134:	e02f      	b.n	800a196 <__gethex+0x3a2>
 800a136:	2401      	movs	r4, #1
 800a138:	e7d4      	b.n	800a0e4 <__gethex+0x2f0>
 800a13a:	2601      	movs	r6, #1
 800a13c:	e7e8      	b.n	800a110 <__gethex+0x31c>
 800a13e:	2301      	movs	r3, #1
 800a140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a142:	1a9b      	subs	r3, r3, r2
 800a144:	930f      	str	r3, [sp, #60]	; 0x3c
 800a146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0f2      	beq.n	800a132 <__gethex+0x33e>
 800a14c:	692b      	ldr	r3, [r5, #16]
 800a14e:	2000      	movs	r0, #0
 800a150:	9302      	str	r3, [sp, #8]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	9304      	str	r3, [sp, #16]
 800a156:	002b      	movs	r3, r5
 800a158:	9a04      	ldr	r2, [sp, #16]
 800a15a:	3314      	adds	r3, #20
 800a15c:	1899      	adds	r1, r3, r2
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	1c54      	adds	r4, r2, #1
 800a162:	d01e      	beq.n	800a1a2 <__gethex+0x3ae>
 800a164:	3201      	adds	r2, #1
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	002b      	movs	r3, r5
 800a16a:	3314      	adds	r3, #20
 800a16c:	2e02      	cmp	r6, #2
 800a16e:	d141      	bne.n	800a1f4 <__gethex+0x400>
 800a170:	9a01      	ldr	r2, [sp, #4]
 800a172:	9900      	ldr	r1, [sp, #0]
 800a174:	6812      	ldr	r2, [r2, #0]
 800a176:	3a01      	subs	r2, #1
 800a178:	428a      	cmp	r2, r1
 800a17a:	d10b      	bne.n	800a194 <__gethex+0x3a0>
 800a17c:	221f      	movs	r2, #31
 800a17e:	9800      	ldr	r0, [sp, #0]
 800a180:	1149      	asrs	r1, r1, #5
 800a182:	4002      	ands	r2, r0
 800a184:	2001      	movs	r0, #1
 800a186:	0004      	movs	r4, r0
 800a188:	4094      	lsls	r4, r2
 800a18a:	0089      	lsls	r1, r1, #2
 800a18c:	58cb      	ldr	r3, [r1, r3]
 800a18e:	4223      	tst	r3, r4
 800a190:	d000      	beq.n	800a194 <__gethex+0x3a0>
 800a192:	2601      	movs	r6, #1
 800a194:	2320      	movs	r3, #32
 800a196:	431e      	orrs	r6, r3
 800a198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a19a:	601d      	str	r5, [r3, #0]
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	601f      	str	r7, [r3, #0]
 800a1a0:	e6b1      	b.n	8009f06 <__gethex+0x112>
 800a1a2:	c301      	stmia	r3!, {r0}
 800a1a4:	4299      	cmp	r1, r3
 800a1a6:	d8da      	bhi.n	800a15e <__gethex+0x36a>
 800a1a8:	68ab      	ldr	r3, [r5, #8]
 800a1aa:	9a02      	ldr	r2, [sp, #8]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	db18      	blt.n	800a1e2 <__gethex+0x3ee>
 800a1b0:	6869      	ldr	r1, [r5, #4]
 800a1b2:	9803      	ldr	r0, [sp, #12]
 800a1b4:	3101      	adds	r1, #1
 800a1b6:	f7fd ff99 	bl	80080ec <_Balloc>
 800a1ba:	1e04      	subs	r4, r0, #0
 800a1bc:	d104      	bne.n	800a1c8 <__gethex+0x3d4>
 800a1be:	0022      	movs	r2, r4
 800a1c0:	2184      	movs	r1, #132	; 0x84
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <__gethex+0x440>)
 800a1c4:	481c      	ldr	r0, [pc, #112]	; (800a238 <__gethex+0x444>)
 800a1c6:	e6c2      	b.n	8009f4e <__gethex+0x15a>
 800a1c8:	0029      	movs	r1, r5
 800a1ca:	692a      	ldr	r2, [r5, #16]
 800a1cc:	310c      	adds	r1, #12
 800a1ce:	3202      	adds	r2, #2
 800a1d0:	0092      	lsls	r2, r2, #2
 800a1d2:	300c      	adds	r0, #12
 800a1d4:	f7ff fd48 	bl	8009c68 <memcpy>
 800a1d8:	0029      	movs	r1, r5
 800a1da:	9803      	ldr	r0, [sp, #12]
 800a1dc:	f7fd ffca 	bl	8008174 <_Bfree>
 800a1e0:	0025      	movs	r5, r4
 800a1e2:	692b      	ldr	r3, [r5, #16]
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	612a      	str	r2, [r5, #16]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	18eb      	adds	r3, r5, r3
 800a1f0:	605a      	str	r2, [r3, #4]
 800a1f2:	e7b9      	b.n	800a168 <__gethex+0x374>
 800a1f4:	692a      	ldr	r2, [r5, #16]
 800a1f6:	9902      	ldr	r1, [sp, #8]
 800a1f8:	428a      	cmp	r2, r1
 800a1fa:	dd09      	ble.n	800a210 <__gethex+0x41c>
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	0028      	movs	r0, r5
 800a200:	f7ff fd8d 	bl	8009d1e <rshift>
 800a204:	9b01      	ldr	r3, [sp, #4]
 800a206:	3701      	adds	r7, #1
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	42bb      	cmp	r3, r7
 800a20c:	dac1      	bge.n	800a192 <__gethex+0x39e>
 800a20e:	e6e4      	b.n	8009fda <__gethex+0x1e6>
 800a210:	221f      	movs	r2, #31
 800a212:	9c00      	ldr	r4, [sp, #0]
 800a214:	9900      	ldr	r1, [sp, #0]
 800a216:	2601      	movs	r6, #1
 800a218:	4014      	ands	r4, r2
 800a21a:	4211      	tst	r1, r2
 800a21c:	d0ba      	beq.n	800a194 <__gethex+0x3a0>
 800a21e:	9a04      	ldr	r2, [sp, #16]
 800a220:	189b      	adds	r3, r3, r2
 800a222:	3b04      	subs	r3, #4
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f7fe f859 	bl	80082dc <__hi0bits>
 800a22a:	2320      	movs	r3, #32
 800a22c:	1b1b      	subs	r3, r3, r4
 800a22e:	4298      	cmp	r0, r3
 800a230:	dbe4      	blt.n	800a1fc <__gethex+0x408>
 800a232:	e7af      	b.n	800a194 <__gethex+0x3a0>
 800a234:	0800aba5 	.word	0x0800aba5
 800a238:	0800aeb6 	.word	0x0800aeb6

0800a23c <L_shift>:
 800a23c:	2308      	movs	r3, #8
 800a23e:	b570      	push	{r4, r5, r6, lr}
 800a240:	2520      	movs	r5, #32
 800a242:	1a9a      	subs	r2, r3, r2
 800a244:	0092      	lsls	r2, r2, #2
 800a246:	1aad      	subs	r5, r5, r2
 800a248:	6843      	ldr	r3, [r0, #4]
 800a24a:	6804      	ldr	r4, [r0, #0]
 800a24c:	001e      	movs	r6, r3
 800a24e:	40ae      	lsls	r6, r5
 800a250:	40d3      	lsrs	r3, r2
 800a252:	4334      	orrs	r4, r6
 800a254:	6004      	str	r4, [r0, #0]
 800a256:	6043      	str	r3, [r0, #4]
 800a258:	3004      	adds	r0, #4
 800a25a:	4288      	cmp	r0, r1
 800a25c:	d3f4      	bcc.n	800a248 <L_shift+0xc>
 800a25e:	bd70      	pop	{r4, r5, r6, pc}

0800a260 <__match>:
 800a260:	b530      	push	{r4, r5, lr}
 800a262:	6803      	ldr	r3, [r0, #0]
 800a264:	780c      	ldrb	r4, [r1, #0]
 800a266:	3301      	adds	r3, #1
 800a268:	2c00      	cmp	r4, #0
 800a26a:	d102      	bne.n	800a272 <__match+0x12>
 800a26c:	6003      	str	r3, [r0, #0]
 800a26e:	2001      	movs	r0, #1
 800a270:	bd30      	pop	{r4, r5, pc}
 800a272:	781a      	ldrb	r2, [r3, #0]
 800a274:	0015      	movs	r5, r2
 800a276:	3d41      	subs	r5, #65	; 0x41
 800a278:	2d19      	cmp	r5, #25
 800a27a:	d800      	bhi.n	800a27e <__match+0x1e>
 800a27c:	3220      	adds	r2, #32
 800a27e:	3101      	adds	r1, #1
 800a280:	42a2      	cmp	r2, r4
 800a282:	d0ef      	beq.n	800a264 <__match+0x4>
 800a284:	2000      	movs	r0, #0
 800a286:	e7f3      	b.n	800a270 <__match+0x10>

0800a288 <__hexnan>:
 800a288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a28a:	680b      	ldr	r3, [r1, #0]
 800a28c:	b08b      	sub	sp, #44	; 0x2c
 800a28e:	9201      	str	r2, [sp, #4]
 800a290:	9901      	ldr	r1, [sp, #4]
 800a292:	115a      	asrs	r2, r3, #5
 800a294:	0092      	lsls	r2, r2, #2
 800a296:	188a      	adds	r2, r1, r2
 800a298:	9202      	str	r2, [sp, #8]
 800a29a:	0019      	movs	r1, r3
 800a29c:	221f      	movs	r2, #31
 800a29e:	4011      	ands	r1, r2
 800a2a0:	9008      	str	r0, [sp, #32]
 800a2a2:	9106      	str	r1, [sp, #24]
 800a2a4:	4213      	tst	r3, r2
 800a2a6:	d002      	beq.n	800a2ae <__hexnan+0x26>
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	9302      	str	r3, [sp, #8]
 800a2ae:	9b02      	ldr	r3, [sp, #8]
 800a2b0:	2500      	movs	r5, #0
 800a2b2:	1f1f      	subs	r7, r3, #4
 800a2b4:	003e      	movs	r6, r7
 800a2b6:	003c      	movs	r4, r7
 800a2b8:	9b08      	ldr	r3, [sp, #32]
 800a2ba:	603d      	str	r5, [r7, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	9507      	str	r5, [sp, #28]
 800a2c0:	9305      	str	r3, [sp, #20]
 800a2c2:	9503      	str	r5, [sp, #12]
 800a2c4:	9b05      	ldr	r3, [sp, #20]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ca:	9b05      	ldr	r3, [sp, #20]
 800a2cc:	785b      	ldrb	r3, [r3, #1]
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d028      	beq.n	800a326 <__hexnan+0x9e>
 800a2d4:	9804      	ldr	r0, [sp, #16]
 800a2d6:	f7ff fd77 	bl	8009dc8 <__hexdig_fun>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d154      	bne.n	800a388 <__hexnan+0x100>
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	2b20      	cmp	r3, #32
 800a2e2:	d819      	bhi.n	800a318 <__hexnan+0x90>
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	9a07      	ldr	r2, [sp, #28]
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	dd12      	ble.n	800a312 <__hexnan+0x8a>
 800a2ec:	42b4      	cmp	r4, r6
 800a2ee:	d206      	bcs.n	800a2fe <__hexnan+0x76>
 800a2f0:	2d07      	cmp	r5, #7
 800a2f2:	dc04      	bgt.n	800a2fe <__hexnan+0x76>
 800a2f4:	002a      	movs	r2, r5
 800a2f6:	0031      	movs	r1, r6
 800a2f8:	0020      	movs	r0, r4
 800a2fa:	f7ff ff9f 	bl	800a23c <L_shift>
 800a2fe:	9b01      	ldr	r3, [sp, #4]
 800a300:	2508      	movs	r5, #8
 800a302:	429c      	cmp	r4, r3
 800a304:	d905      	bls.n	800a312 <__hexnan+0x8a>
 800a306:	1f26      	subs	r6, r4, #4
 800a308:	2500      	movs	r5, #0
 800a30a:	0034      	movs	r4, r6
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	6035      	str	r5, [r6, #0]
 800a310:	9307      	str	r3, [sp, #28]
 800a312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a314:	9305      	str	r3, [sp, #20]
 800a316:	e7d5      	b.n	800a2c4 <__hexnan+0x3c>
 800a318:	9b04      	ldr	r3, [sp, #16]
 800a31a:	2b29      	cmp	r3, #41	; 0x29
 800a31c:	d159      	bne.n	800a3d2 <__hexnan+0x14a>
 800a31e:	9b05      	ldr	r3, [sp, #20]
 800a320:	9a08      	ldr	r2, [sp, #32]
 800a322:	3302      	adds	r3, #2
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d052      	beq.n	800a3d2 <__hexnan+0x14a>
 800a32c:	42b4      	cmp	r4, r6
 800a32e:	d206      	bcs.n	800a33e <__hexnan+0xb6>
 800a330:	2d07      	cmp	r5, #7
 800a332:	dc04      	bgt.n	800a33e <__hexnan+0xb6>
 800a334:	002a      	movs	r2, r5
 800a336:	0031      	movs	r1, r6
 800a338:	0020      	movs	r0, r4
 800a33a:	f7ff ff7f 	bl	800a23c <L_shift>
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	429c      	cmp	r4, r3
 800a342:	d935      	bls.n	800a3b0 <__hexnan+0x128>
 800a344:	001a      	movs	r2, r3
 800a346:	0023      	movs	r3, r4
 800a348:	cb02      	ldmia	r3!, {r1}
 800a34a:	c202      	stmia	r2!, {r1}
 800a34c:	429f      	cmp	r7, r3
 800a34e:	d2fb      	bcs.n	800a348 <__hexnan+0xc0>
 800a350:	9b02      	ldr	r3, [sp, #8]
 800a352:	1c62      	adds	r2, r4, #1
 800a354:	1ed9      	subs	r1, r3, #3
 800a356:	2304      	movs	r3, #4
 800a358:	4291      	cmp	r1, r2
 800a35a:	d305      	bcc.n	800a368 <__hexnan+0xe0>
 800a35c:	9b02      	ldr	r3, [sp, #8]
 800a35e:	3b04      	subs	r3, #4
 800a360:	1b1b      	subs	r3, r3, r4
 800a362:	089b      	lsrs	r3, r3, #2
 800a364:	3301      	adds	r3, #1
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	9a01      	ldr	r2, [sp, #4]
 800a36a:	18d3      	adds	r3, r2, r3
 800a36c:	2200      	movs	r2, #0
 800a36e:	c304      	stmia	r3!, {r2}
 800a370:	429f      	cmp	r7, r3
 800a372:	d2fc      	bcs.n	800a36e <__hexnan+0xe6>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d104      	bne.n	800a384 <__hexnan+0xfc>
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	429f      	cmp	r7, r3
 800a37e:	d126      	bne.n	800a3ce <__hexnan+0x146>
 800a380:	2301      	movs	r3, #1
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	2005      	movs	r0, #5
 800a386:	e025      	b.n	800a3d4 <__hexnan+0x14c>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	3501      	adds	r5, #1
 800a38c:	3301      	adds	r3, #1
 800a38e:	9303      	str	r3, [sp, #12]
 800a390:	2d08      	cmp	r5, #8
 800a392:	dd06      	ble.n	800a3a2 <__hexnan+0x11a>
 800a394:	9b01      	ldr	r3, [sp, #4]
 800a396:	429c      	cmp	r4, r3
 800a398:	d9bb      	bls.n	800a312 <__hexnan+0x8a>
 800a39a:	2300      	movs	r3, #0
 800a39c:	2501      	movs	r5, #1
 800a39e:	3c04      	subs	r4, #4
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	220f      	movs	r2, #15
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	4010      	ands	r0, r2
 800a3a8:	011b      	lsls	r3, r3, #4
 800a3aa:	4303      	orrs	r3, r0
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	e7b0      	b.n	800a312 <__hexnan+0x8a>
 800a3b0:	9b06      	ldr	r3, [sp, #24]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0de      	beq.n	800a374 <__hexnan+0xec>
 800a3b6:	2320      	movs	r3, #32
 800a3b8:	9a06      	ldr	r2, [sp, #24]
 800a3ba:	9902      	ldr	r1, [sp, #8]
 800a3bc:	1a9b      	subs	r3, r3, r2
 800a3be:	2201      	movs	r2, #1
 800a3c0:	4252      	negs	r2, r2
 800a3c2:	40da      	lsrs	r2, r3
 800a3c4:	3904      	subs	r1, #4
 800a3c6:	680b      	ldr	r3, [r1, #0]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	600b      	str	r3, [r1, #0]
 800a3cc:	e7d2      	b.n	800a374 <__hexnan+0xec>
 800a3ce:	3f04      	subs	r7, #4
 800a3d0:	e7d0      	b.n	800a374 <__hexnan+0xec>
 800a3d2:	2004      	movs	r0, #4
 800a3d4:	b00b      	add	sp, #44	; 0x2c
 800a3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3d8 <__ascii_mbtowc>:
 800a3d8:	b082      	sub	sp, #8
 800a3da:	2900      	cmp	r1, #0
 800a3dc:	d100      	bne.n	800a3e0 <__ascii_mbtowc+0x8>
 800a3de:	a901      	add	r1, sp, #4
 800a3e0:	1e10      	subs	r0, r2, #0
 800a3e2:	d006      	beq.n	800a3f2 <__ascii_mbtowc+0x1a>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d006      	beq.n	800a3f6 <__ascii_mbtowc+0x1e>
 800a3e8:	7813      	ldrb	r3, [r2, #0]
 800a3ea:	600b      	str	r3, [r1, #0]
 800a3ec:	7810      	ldrb	r0, [r2, #0]
 800a3ee:	1e43      	subs	r3, r0, #1
 800a3f0:	4198      	sbcs	r0, r3
 800a3f2:	b002      	add	sp, #8
 800a3f4:	4770      	bx	lr
 800a3f6:	2002      	movs	r0, #2
 800a3f8:	4240      	negs	r0, r0
 800a3fa:	e7fa      	b.n	800a3f2 <__ascii_mbtowc+0x1a>

0800a3fc <_realloc_r>:
 800a3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3fe:	0007      	movs	r7, r0
 800a400:	000e      	movs	r6, r1
 800a402:	0014      	movs	r4, r2
 800a404:	2900      	cmp	r1, #0
 800a406:	d105      	bne.n	800a414 <_realloc_r+0x18>
 800a408:	0011      	movs	r1, r2
 800a40a:	f7fd fddd 	bl	8007fc8 <_malloc_r>
 800a40e:	0005      	movs	r5, r0
 800a410:	0028      	movs	r0, r5
 800a412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a414:	2a00      	cmp	r2, #0
 800a416:	d103      	bne.n	800a420 <_realloc_r+0x24>
 800a418:	f7fd fd60 	bl	8007edc <_free_r>
 800a41c:	0025      	movs	r5, r4
 800a41e:	e7f7      	b.n	800a410 <_realloc_r+0x14>
 800a420:	f000 f83f 	bl	800a4a2 <_malloc_usable_size_r>
 800a424:	9001      	str	r0, [sp, #4]
 800a426:	4284      	cmp	r4, r0
 800a428:	d803      	bhi.n	800a432 <_realloc_r+0x36>
 800a42a:	0035      	movs	r5, r6
 800a42c:	0843      	lsrs	r3, r0, #1
 800a42e:	42a3      	cmp	r3, r4
 800a430:	d3ee      	bcc.n	800a410 <_realloc_r+0x14>
 800a432:	0021      	movs	r1, r4
 800a434:	0038      	movs	r0, r7
 800a436:	f7fd fdc7 	bl	8007fc8 <_malloc_r>
 800a43a:	1e05      	subs	r5, r0, #0
 800a43c:	d0e8      	beq.n	800a410 <_realloc_r+0x14>
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	0022      	movs	r2, r4
 800a442:	429c      	cmp	r4, r3
 800a444:	d900      	bls.n	800a448 <_realloc_r+0x4c>
 800a446:	001a      	movs	r2, r3
 800a448:	0031      	movs	r1, r6
 800a44a:	0028      	movs	r0, r5
 800a44c:	f7ff fc0c 	bl	8009c68 <memcpy>
 800a450:	0031      	movs	r1, r6
 800a452:	0038      	movs	r0, r7
 800a454:	f7fd fd42 	bl	8007edc <_free_r>
 800a458:	e7da      	b.n	800a410 <_realloc_r+0x14>

0800a45a <__ascii_wctomb>:
 800a45a:	0003      	movs	r3, r0
 800a45c:	1e08      	subs	r0, r1, #0
 800a45e:	d005      	beq.n	800a46c <__ascii_wctomb+0x12>
 800a460:	2aff      	cmp	r2, #255	; 0xff
 800a462:	d904      	bls.n	800a46e <__ascii_wctomb+0x14>
 800a464:	228a      	movs	r2, #138	; 0x8a
 800a466:	2001      	movs	r0, #1
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	4240      	negs	r0, r0
 800a46c:	4770      	bx	lr
 800a46e:	2001      	movs	r0, #1
 800a470:	700a      	strb	r2, [r1, #0]
 800a472:	e7fb      	b.n	800a46c <__ascii_wctomb+0x12>

0800a474 <fiprintf>:
 800a474:	b40e      	push	{r1, r2, r3}
 800a476:	b517      	push	{r0, r1, r2, r4, lr}
 800a478:	4c05      	ldr	r4, [pc, #20]	; (800a490 <fiprintf+0x1c>)
 800a47a:	ab05      	add	r3, sp, #20
 800a47c:	cb04      	ldmia	r3!, {r2}
 800a47e:	0001      	movs	r1, r0
 800a480:	6820      	ldr	r0, [r4, #0]
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	f000 f83c 	bl	800a500 <_vfiprintf_r>
 800a488:	bc1e      	pop	{r1, r2, r3, r4}
 800a48a:	bc08      	pop	{r3}
 800a48c:	b003      	add	sp, #12
 800a48e:	4718      	bx	r3
 800a490:	20000064 	.word	0x20000064

0800a494 <abort>:
 800a494:	2006      	movs	r0, #6
 800a496:	b510      	push	{r4, lr}
 800a498:	f000 fa1e 	bl	800a8d8 <raise>
 800a49c:	2001      	movs	r0, #1
 800a49e:	f7f8 fe6a 	bl	8003176 <_exit>

0800a4a2 <_malloc_usable_size_r>:
 800a4a2:	1f0b      	subs	r3, r1, #4
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	1f18      	subs	r0, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da01      	bge.n	800a4b0 <_malloc_usable_size_r+0xe>
 800a4ac:	580b      	ldr	r3, [r1, r0]
 800a4ae:	18c0      	adds	r0, r0, r3
 800a4b0:	4770      	bx	lr

0800a4b2 <__sfputc_r>:
 800a4b2:	6893      	ldr	r3, [r2, #8]
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	6093      	str	r3, [r2, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	da04      	bge.n	800a4c8 <__sfputc_r+0x16>
 800a4be:	6994      	ldr	r4, [r2, #24]
 800a4c0:	42a3      	cmp	r3, r4
 800a4c2:	db07      	blt.n	800a4d4 <__sfputc_r+0x22>
 800a4c4:	290a      	cmp	r1, #10
 800a4c6:	d005      	beq.n	800a4d4 <__sfputc_r+0x22>
 800a4c8:	6813      	ldr	r3, [r2, #0]
 800a4ca:	1c58      	adds	r0, r3, #1
 800a4cc:	6010      	str	r0, [r2, #0]
 800a4ce:	7019      	strb	r1, [r3, #0]
 800a4d0:	0008      	movs	r0, r1
 800a4d2:	bd10      	pop	{r4, pc}
 800a4d4:	f000 f930 	bl	800a738 <__swbuf_r>
 800a4d8:	0001      	movs	r1, r0
 800a4da:	e7f9      	b.n	800a4d0 <__sfputc_r+0x1e>

0800a4dc <__sfputs_r>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	0006      	movs	r6, r0
 800a4e0:	000f      	movs	r7, r1
 800a4e2:	0014      	movs	r4, r2
 800a4e4:	18d5      	adds	r5, r2, r3
 800a4e6:	42ac      	cmp	r4, r5
 800a4e8:	d101      	bne.n	800a4ee <__sfputs_r+0x12>
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	e007      	b.n	800a4fe <__sfputs_r+0x22>
 800a4ee:	7821      	ldrb	r1, [r4, #0]
 800a4f0:	003a      	movs	r2, r7
 800a4f2:	0030      	movs	r0, r6
 800a4f4:	f7ff ffdd 	bl	800a4b2 <__sfputc_r>
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	1c43      	adds	r3, r0, #1
 800a4fc:	d1f3      	bne.n	800a4e6 <__sfputs_r+0xa>
 800a4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a500 <_vfiprintf_r>:
 800a500:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a502:	b0a1      	sub	sp, #132	; 0x84
 800a504:	000f      	movs	r7, r1
 800a506:	0015      	movs	r5, r2
 800a508:	001e      	movs	r6, r3
 800a50a:	9003      	str	r0, [sp, #12]
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d004      	beq.n	800a51a <_vfiprintf_r+0x1a>
 800a510:	6a03      	ldr	r3, [r0, #32]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <_vfiprintf_r+0x1a>
 800a516:	f7fc fd0d 	bl	8006f34 <__sinit>
 800a51a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a51c:	07db      	lsls	r3, r3, #31
 800a51e:	d405      	bmi.n	800a52c <_vfiprintf_r+0x2c>
 800a520:	89bb      	ldrh	r3, [r7, #12]
 800a522:	059b      	lsls	r3, r3, #22
 800a524:	d402      	bmi.n	800a52c <_vfiprintf_r+0x2c>
 800a526:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a528:	f7fc fe29 	bl	800717e <__retarget_lock_acquire_recursive>
 800a52c:	89bb      	ldrh	r3, [r7, #12]
 800a52e:	071b      	lsls	r3, r3, #28
 800a530:	d502      	bpl.n	800a538 <_vfiprintf_r+0x38>
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d113      	bne.n	800a560 <_vfiprintf_r+0x60>
 800a538:	0039      	movs	r1, r7
 800a53a:	9803      	ldr	r0, [sp, #12]
 800a53c:	f000 f93e 	bl	800a7bc <__swsetup_r>
 800a540:	2800      	cmp	r0, #0
 800a542:	d00d      	beq.n	800a560 <_vfiprintf_r+0x60>
 800a544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a546:	07db      	lsls	r3, r3, #31
 800a548:	d503      	bpl.n	800a552 <_vfiprintf_r+0x52>
 800a54a:	2001      	movs	r0, #1
 800a54c:	4240      	negs	r0, r0
 800a54e:	b021      	add	sp, #132	; 0x84
 800a550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a552:	89bb      	ldrh	r3, [r7, #12]
 800a554:	059b      	lsls	r3, r3, #22
 800a556:	d4f8      	bmi.n	800a54a <_vfiprintf_r+0x4a>
 800a558:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a55a:	f7fc fe11 	bl	8007180 <__retarget_lock_release_recursive>
 800a55e:	e7f4      	b.n	800a54a <_vfiprintf_r+0x4a>
 800a560:	2300      	movs	r3, #0
 800a562:	ac08      	add	r4, sp, #32
 800a564:	6163      	str	r3, [r4, #20]
 800a566:	3320      	adds	r3, #32
 800a568:	7663      	strb	r3, [r4, #25]
 800a56a:	3310      	adds	r3, #16
 800a56c:	76a3      	strb	r3, [r4, #26]
 800a56e:	9607      	str	r6, [sp, #28]
 800a570:	002e      	movs	r6, r5
 800a572:	7833      	ldrb	r3, [r6, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <_vfiprintf_r+0x7c>
 800a578:	2b25      	cmp	r3, #37	; 0x25
 800a57a:	d148      	bne.n	800a60e <_vfiprintf_r+0x10e>
 800a57c:	1b73      	subs	r3, r6, r5
 800a57e:	9305      	str	r3, [sp, #20]
 800a580:	42ae      	cmp	r6, r5
 800a582:	d00b      	beq.n	800a59c <_vfiprintf_r+0x9c>
 800a584:	002a      	movs	r2, r5
 800a586:	0039      	movs	r1, r7
 800a588:	9803      	ldr	r0, [sp, #12]
 800a58a:	f7ff ffa7 	bl	800a4dc <__sfputs_r>
 800a58e:	3001      	adds	r0, #1
 800a590:	d100      	bne.n	800a594 <_vfiprintf_r+0x94>
 800a592:	e0af      	b.n	800a6f4 <_vfiprintf_r+0x1f4>
 800a594:	6963      	ldr	r3, [r4, #20]
 800a596:	9a05      	ldr	r2, [sp, #20]
 800a598:	189b      	adds	r3, r3, r2
 800a59a:	6163      	str	r3, [r4, #20]
 800a59c:	7833      	ldrb	r3, [r6, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d100      	bne.n	800a5a4 <_vfiprintf_r+0xa4>
 800a5a2:	e0a7      	b.n	800a6f4 <_vfiprintf_r+0x1f4>
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	4252      	negs	r2, r2
 800a5aa:	6062      	str	r2, [r4, #4]
 800a5ac:	a904      	add	r1, sp, #16
 800a5ae:	3254      	adds	r2, #84	; 0x54
 800a5b0:	1852      	adds	r2, r2, r1
 800a5b2:	1c75      	adds	r5, r6, #1
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	60e3      	str	r3, [r4, #12]
 800a5b8:	60a3      	str	r3, [r4, #8]
 800a5ba:	7013      	strb	r3, [r2, #0]
 800a5bc:	65a3      	str	r3, [r4, #88]	; 0x58
 800a5be:	4b59      	ldr	r3, [pc, #356]	; (800a724 <_vfiprintf_r+0x224>)
 800a5c0:	2205      	movs	r2, #5
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	7829      	ldrb	r1, [r5, #0]
 800a5c6:	9305      	str	r3, [sp, #20]
 800a5c8:	f7fc fddb 	bl	8007182 <memchr>
 800a5cc:	1c6e      	adds	r6, r5, #1
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d11f      	bne.n	800a612 <_vfiprintf_r+0x112>
 800a5d2:	6822      	ldr	r2, [r4, #0]
 800a5d4:	06d3      	lsls	r3, r2, #27
 800a5d6:	d504      	bpl.n	800a5e2 <_vfiprintf_r+0xe2>
 800a5d8:	2353      	movs	r3, #83	; 0x53
 800a5da:	a904      	add	r1, sp, #16
 800a5dc:	185b      	adds	r3, r3, r1
 800a5de:	2120      	movs	r1, #32
 800a5e0:	7019      	strb	r1, [r3, #0]
 800a5e2:	0713      	lsls	r3, r2, #28
 800a5e4:	d504      	bpl.n	800a5f0 <_vfiprintf_r+0xf0>
 800a5e6:	2353      	movs	r3, #83	; 0x53
 800a5e8:	a904      	add	r1, sp, #16
 800a5ea:	185b      	adds	r3, r3, r1
 800a5ec:	212b      	movs	r1, #43	; 0x2b
 800a5ee:	7019      	strb	r1, [r3, #0]
 800a5f0:	782b      	ldrb	r3, [r5, #0]
 800a5f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5f4:	d016      	beq.n	800a624 <_vfiprintf_r+0x124>
 800a5f6:	002e      	movs	r6, r5
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	200a      	movs	r0, #10
 800a5fc:	68e3      	ldr	r3, [r4, #12]
 800a5fe:	7832      	ldrb	r2, [r6, #0]
 800a600:	1c75      	adds	r5, r6, #1
 800a602:	3a30      	subs	r2, #48	; 0x30
 800a604:	2a09      	cmp	r2, #9
 800a606:	d94e      	bls.n	800a6a6 <_vfiprintf_r+0x1a6>
 800a608:	2900      	cmp	r1, #0
 800a60a:	d111      	bne.n	800a630 <_vfiprintf_r+0x130>
 800a60c:	e017      	b.n	800a63e <_vfiprintf_r+0x13e>
 800a60e:	3601      	adds	r6, #1
 800a610:	e7af      	b.n	800a572 <_vfiprintf_r+0x72>
 800a612:	9b05      	ldr	r3, [sp, #20]
 800a614:	6822      	ldr	r2, [r4, #0]
 800a616:	1ac0      	subs	r0, r0, r3
 800a618:	2301      	movs	r3, #1
 800a61a:	4083      	lsls	r3, r0
 800a61c:	4313      	orrs	r3, r2
 800a61e:	0035      	movs	r5, r6
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	e7cc      	b.n	800a5be <_vfiprintf_r+0xbe>
 800a624:	9b07      	ldr	r3, [sp, #28]
 800a626:	1d19      	adds	r1, r3, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	9107      	str	r1, [sp, #28]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	db01      	blt.n	800a634 <_vfiprintf_r+0x134>
 800a630:	930b      	str	r3, [sp, #44]	; 0x2c
 800a632:	e004      	b.n	800a63e <_vfiprintf_r+0x13e>
 800a634:	425b      	negs	r3, r3
 800a636:	60e3      	str	r3, [r4, #12]
 800a638:	2302      	movs	r3, #2
 800a63a:	4313      	orrs	r3, r2
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	7833      	ldrb	r3, [r6, #0]
 800a640:	2b2e      	cmp	r3, #46	; 0x2e
 800a642:	d10a      	bne.n	800a65a <_vfiprintf_r+0x15a>
 800a644:	7873      	ldrb	r3, [r6, #1]
 800a646:	2b2a      	cmp	r3, #42	; 0x2a
 800a648:	d135      	bne.n	800a6b6 <_vfiprintf_r+0x1b6>
 800a64a:	9b07      	ldr	r3, [sp, #28]
 800a64c:	3602      	adds	r6, #2
 800a64e:	1d1a      	adds	r2, r3, #4
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	9207      	str	r2, [sp, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	db2b      	blt.n	800a6b0 <_vfiprintf_r+0x1b0>
 800a658:	9309      	str	r3, [sp, #36]	; 0x24
 800a65a:	4d33      	ldr	r5, [pc, #204]	; (800a728 <_vfiprintf_r+0x228>)
 800a65c:	2203      	movs	r2, #3
 800a65e:	0028      	movs	r0, r5
 800a660:	7831      	ldrb	r1, [r6, #0]
 800a662:	f7fc fd8e 	bl	8007182 <memchr>
 800a666:	2800      	cmp	r0, #0
 800a668:	d006      	beq.n	800a678 <_vfiprintf_r+0x178>
 800a66a:	2340      	movs	r3, #64	; 0x40
 800a66c:	1b40      	subs	r0, r0, r5
 800a66e:	4083      	lsls	r3, r0
 800a670:	6822      	ldr	r2, [r4, #0]
 800a672:	3601      	adds	r6, #1
 800a674:	4313      	orrs	r3, r2
 800a676:	6023      	str	r3, [r4, #0]
 800a678:	7831      	ldrb	r1, [r6, #0]
 800a67a:	2206      	movs	r2, #6
 800a67c:	482b      	ldr	r0, [pc, #172]	; (800a72c <_vfiprintf_r+0x22c>)
 800a67e:	1c75      	adds	r5, r6, #1
 800a680:	7621      	strb	r1, [r4, #24]
 800a682:	f7fc fd7e 	bl	8007182 <memchr>
 800a686:	2800      	cmp	r0, #0
 800a688:	d043      	beq.n	800a712 <_vfiprintf_r+0x212>
 800a68a:	4b29      	ldr	r3, [pc, #164]	; (800a730 <_vfiprintf_r+0x230>)
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d125      	bne.n	800a6dc <_vfiprintf_r+0x1dc>
 800a690:	2207      	movs	r2, #7
 800a692:	9b07      	ldr	r3, [sp, #28]
 800a694:	3307      	adds	r3, #7
 800a696:	4393      	bics	r3, r2
 800a698:	3308      	adds	r3, #8
 800a69a:	9307      	str	r3, [sp, #28]
 800a69c:	6963      	ldr	r3, [r4, #20]
 800a69e:	9a04      	ldr	r2, [sp, #16]
 800a6a0:	189b      	adds	r3, r3, r2
 800a6a2:	6163      	str	r3, [r4, #20]
 800a6a4:	e764      	b.n	800a570 <_vfiprintf_r+0x70>
 800a6a6:	4343      	muls	r3, r0
 800a6a8:	002e      	movs	r6, r5
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	189b      	adds	r3, r3, r2
 800a6ae:	e7a6      	b.n	800a5fe <_vfiprintf_r+0xfe>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	425b      	negs	r3, r3
 800a6b4:	e7d0      	b.n	800a658 <_vfiprintf_r+0x158>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	200a      	movs	r0, #10
 800a6ba:	001a      	movs	r2, r3
 800a6bc:	3601      	adds	r6, #1
 800a6be:	6063      	str	r3, [r4, #4]
 800a6c0:	7831      	ldrb	r1, [r6, #0]
 800a6c2:	1c75      	adds	r5, r6, #1
 800a6c4:	3930      	subs	r1, #48	; 0x30
 800a6c6:	2909      	cmp	r1, #9
 800a6c8:	d903      	bls.n	800a6d2 <_vfiprintf_r+0x1d2>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0c5      	beq.n	800a65a <_vfiprintf_r+0x15a>
 800a6ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a6d0:	e7c3      	b.n	800a65a <_vfiprintf_r+0x15a>
 800a6d2:	4342      	muls	r2, r0
 800a6d4:	002e      	movs	r6, r5
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	1852      	adds	r2, r2, r1
 800a6da:	e7f1      	b.n	800a6c0 <_vfiprintf_r+0x1c0>
 800a6dc:	aa07      	add	r2, sp, #28
 800a6de:	9200      	str	r2, [sp, #0]
 800a6e0:	0021      	movs	r1, r4
 800a6e2:	003a      	movs	r2, r7
 800a6e4:	4b13      	ldr	r3, [pc, #76]	; (800a734 <_vfiprintf_r+0x234>)
 800a6e6:	9803      	ldr	r0, [sp, #12]
 800a6e8:	f7fb fdb6 	bl	8006258 <_printf_float>
 800a6ec:	9004      	str	r0, [sp, #16]
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	d1d3      	bne.n	800a69c <_vfiprintf_r+0x19c>
 800a6f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f6:	07db      	lsls	r3, r3, #31
 800a6f8:	d405      	bmi.n	800a706 <_vfiprintf_r+0x206>
 800a6fa:	89bb      	ldrh	r3, [r7, #12]
 800a6fc:	059b      	lsls	r3, r3, #22
 800a6fe:	d402      	bmi.n	800a706 <_vfiprintf_r+0x206>
 800a700:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a702:	f7fc fd3d 	bl	8007180 <__retarget_lock_release_recursive>
 800a706:	89bb      	ldrh	r3, [r7, #12]
 800a708:	065b      	lsls	r3, r3, #25
 800a70a:	d500      	bpl.n	800a70e <_vfiprintf_r+0x20e>
 800a70c:	e71d      	b.n	800a54a <_vfiprintf_r+0x4a>
 800a70e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a710:	e71d      	b.n	800a54e <_vfiprintf_r+0x4e>
 800a712:	aa07      	add	r2, sp, #28
 800a714:	9200      	str	r2, [sp, #0]
 800a716:	0021      	movs	r1, r4
 800a718:	003a      	movs	r2, r7
 800a71a:	4b06      	ldr	r3, [pc, #24]	; (800a734 <_vfiprintf_r+0x234>)
 800a71c:	9803      	ldr	r0, [sp, #12]
 800a71e:	f7fc f861 	bl	80067e4 <_printf_i>
 800a722:	e7e3      	b.n	800a6ec <_vfiprintf_r+0x1ec>
 800a724:	0800ae61 	.word	0x0800ae61
 800a728:	0800ae67 	.word	0x0800ae67
 800a72c:	0800ae6b 	.word	0x0800ae6b
 800a730:	08006259 	.word	0x08006259
 800a734:	0800a4dd 	.word	0x0800a4dd

0800a738 <__swbuf_r>:
 800a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73a:	0006      	movs	r6, r0
 800a73c:	000d      	movs	r5, r1
 800a73e:	0014      	movs	r4, r2
 800a740:	2800      	cmp	r0, #0
 800a742:	d004      	beq.n	800a74e <__swbuf_r+0x16>
 800a744:	6a03      	ldr	r3, [r0, #32]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <__swbuf_r+0x16>
 800a74a:	f7fc fbf3 	bl	8006f34 <__sinit>
 800a74e:	69a3      	ldr	r3, [r4, #24]
 800a750:	60a3      	str	r3, [r4, #8]
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	071b      	lsls	r3, r3, #28
 800a756:	d528      	bpl.n	800a7aa <__swbuf_r+0x72>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d025      	beq.n	800a7aa <__swbuf_r+0x72>
 800a75e:	6923      	ldr	r3, [r4, #16]
 800a760:	6820      	ldr	r0, [r4, #0]
 800a762:	b2ef      	uxtb	r7, r5
 800a764:	1ac0      	subs	r0, r0, r3
 800a766:	6963      	ldr	r3, [r4, #20]
 800a768:	b2ed      	uxtb	r5, r5
 800a76a:	4283      	cmp	r3, r0
 800a76c:	dc05      	bgt.n	800a77a <__swbuf_r+0x42>
 800a76e:	0021      	movs	r1, r4
 800a770:	0030      	movs	r0, r6
 800a772:	f7ff fa17 	bl	8009ba4 <_fflush_r>
 800a776:	2800      	cmp	r0, #0
 800a778:	d11d      	bne.n	800a7b6 <__swbuf_r+0x7e>
 800a77a:	68a3      	ldr	r3, [r4, #8]
 800a77c:	3001      	adds	r0, #1
 800a77e:	3b01      	subs	r3, #1
 800a780:	60a3      	str	r3, [r4, #8]
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	6022      	str	r2, [r4, #0]
 800a788:	701f      	strb	r7, [r3, #0]
 800a78a:	6963      	ldr	r3, [r4, #20]
 800a78c:	4283      	cmp	r3, r0
 800a78e:	d004      	beq.n	800a79a <__swbuf_r+0x62>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	07db      	lsls	r3, r3, #31
 800a794:	d507      	bpl.n	800a7a6 <__swbuf_r+0x6e>
 800a796:	2d0a      	cmp	r5, #10
 800a798:	d105      	bne.n	800a7a6 <__swbuf_r+0x6e>
 800a79a:	0021      	movs	r1, r4
 800a79c:	0030      	movs	r0, r6
 800a79e:	f7ff fa01 	bl	8009ba4 <_fflush_r>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d107      	bne.n	800a7b6 <__swbuf_r+0x7e>
 800a7a6:	0028      	movs	r0, r5
 800a7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7aa:	0021      	movs	r1, r4
 800a7ac:	0030      	movs	r0, r6
 800a7ae:	f000 f805 	bl	800a7bc <__swsetup_r>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0d3      	beq.n	800a75e <__swbuf_r+0x26>
 800a7b6:	2501      	movs	r5, #1
 800a7b8:	426d      	negs	r5, r5
 800a7ba:	e7f4      	b.n	800a7a6 <__swbuf_r+0x6e>

0800a7bc <__swsetup_r>:
 800a7bc:	4b30      	ldr	r3, [pc, #192]	; (800a880 <__swsetup_r+0xc4>)
 800a7be:	b570      	push	{r4, r5, r6, lr}
 800a7c0:	0005      	movs	r5, r0
 800a7c2:	6818      	ldr	r0, [r3, #0]
 800a7c4:	000c      	movs	r4, r1
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d004      	beq.n	800a7d4 <__swsetup_r+0x18>
 800a7ca:	6a03      	ldr	r3, [r0, #32]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <__swsetup_r+0x18>
 800a7d0:	f7fc fbb0 	bl	8006f34 <__sinit>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	5ee2      	ldrsh	r2, [r4, r3]
 800a7d8:	b293      	uxth	r3, r2
 800a7da:	0711      	lsls	r1, r2, #28
 800a7dc:	d423      	bmi.n	800a826 <__swsetup_r+0x6a>
 800a7de:	06d9      	lsls	r1, r3, #27
 800a7e0:	d407      	bmi.n	800a7f2 <__swsetup_r+0x36>
 800a7e2:	2309      	movs	r3, #9
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	602b      	str	r3, [r5, #0]
 800a7e8:	3337      	adds	r3, #55	; 0x37
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	4240      	negs	r0, r0
 800a7f0:	bd70      	pop	{r4, r5, r6, pc}
 800a7f2:	075b      	lsls	r3, r3, #29
 800a7f4:	d513      	bpl.n	800a81e <__swsetup_r+0x62>
 800a7f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7f8:	2900      	cmp	r1, #0
 800a7fa:	d008      	beq.n	800a80e <__swsetup_r+0x52>
 800a7fc:	0023      	movs	r3, r4
 800a7fe:	3344      	adds	r3, #68	; 0x44
 800a800:	4299      	cmp	r1, r3
 800a802:	d002      	beq.n	800a80a <__swsetup_r+0x4e>
 800a804:	0028      	movs	r0, r5
 800a806:	f7fd fb69 	bl	8007edc <_free_r>
 800a80a:	2300      	movs	r3, #0
 800a80c:	6363      	str	r3, [r4, #52]	; 0x34
 800a80e:	2224      	movs	r2, #36	; 0x24
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	4393      	bics	r3, r2
 800a814:	81a3      	strh	r3, [r4, #12]
 800a816:	2300      	movs	r3, #0
 800a818:	6063      	str	r3, [r4, #4]
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	2308      	movs	r3, #8
 800a820:	89a2      	ldrh	r2, [r4, #12]
 800a822:	4313      	orrs	r3, r2
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	6923      	ldr	r3, [r4, #16]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10b      	bne.n	800a844 <__swsetup_r+0x88>
 800a82c:	21a0      	movs	r1, #160	; 0xa0
 800a82e:	2280      	movs	r2, #128	; 0x80
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	0089      	lsls	r1, r1, #2
 800a834:	0092      	lsls	r2, r2, #2
 800a836:	400b      	ands	r3, r1
 800a838:	4293      	cmp	r3, r2
 800a83a:	d003      	beq.n	800a844 <__swsetup_r+0x88>
 800a83c:	0021      	movs	r1, r4
 800a83e:	0028      	movs	r0, r5
 800a840:	f000 f892 	bl	800a968 <__smakebuf_r>
 800a844:	220c      	movs	r2, #12
 800a846:	5ea3      	ldrsh	r3, [r4, r2]
 800a848:	2001      	movs	r0, #1
 800a84a:	001a      	movs	r2, r3
 800a84c:	b299      	uxth	r1, r3
 800a84e:	4002      	ands	r2, r0
 800a850:	4203      	tst	r3, r0
 800a852:	d00f      	beq.n	800a874 <__swsetup_r+0xb8>
 800a854:	2200      	movs	r2, #0
 800a856:	60a2      	str	r2, [r4, #8]
 800a858:	6962      	ldr	r2, [r4, #20]
 800a85a:	4252      	negs	r2, r2
 800a85c:	61a2      	str	r2, [r4, #24]
 800a85e:	2000      	movs	r0, #0
 800a860:	6922      	ldr	r2, [r4, #16]
 800a862:	4282      	cmp	r2, r0
 800a864:	d1c4      	bne.n	800a7f0 <__swsetup_r+0x34>
 800a866:	0609      	lsls	r1, r1, #24
 800a868:	d5c2      	bpl.n	800a7f0 <__swsetup_r+0x34>
 800a86a:	2240      	movs	r2, #64	; 0x40
 800a86c:	4313      	orrs	r3, r2
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	3801      	subs	r0, #1
 800a872:	e7bd      	b.n	800a7f0 <__swsetup_r+0x34>
 800a874:	0788      	lsls	r0, r1, #30
 800a876:	d400      	bmi.n	800a87a <__swsetup_r+0xbe>
 800a878:	6962      	ldr	r2, [r4, #20]
 800a87a:	60a2      	str	r2, [r4, #8]
 800a87c:	e7ef      	b.n	800a85e <__swsetup_r+0xa2>
 800a87e:	46c0      	nop			; (mov r8, r8)
 800a880:	20000064 	.word	0x20000064

0800a884 <_raise_r>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	0004      	movs	r4, r0
 800a888:	000d      	movs	r5, r1
 800a88a:	291f      	cmp	r1, #31
 800a88c:	d904      	bls.n	800a898 <_raise_r+0x14>
 800a88e:	2316      	movs	r3, #22
 800a890:	6003      	str	r3, [r0, #0]
 800a892:	2001      	movs	r0, #1
 800a894:	4240      	negs	r0, r0
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d004      	beq.n	800a8a8 <_raise_r+0x24>
 800a89e:	008a      	lsls	r2, r1, #2
 800a8a0:	189b      	adds	r3, r3, r2
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	2a00      	cmp	r2, #0
 800a8a6:	d108      	bne.n	800a8ba <_raise_r+0x36>
 800a8a8:	0020      	movs	r0, r4
 800a8aa:	f000 f831 	bl	800a910 <_getpid_r>
 800a8ae:	002a      	movs	r2, r5
 800a8b0:	0001      	movs	r1, r0
 800a8b2:	0020      	movs	r0, r4
 800a8b4:	f000 f81a 	bl	800a8ec <_kill_r>
 800a8b8:	e7ed      	b.n	800a896 <_raise_r+0x12>
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	2a01      	cmp	r2, #1
 800a8be:	d0ea      	beq.n	800a896 <_raise_r+0x12>
 800a8c0:	1c51      	adds	r1, r2, #1
 800a8c2:	d103      	bne.n	800a8cc <_raise_r+0x48>
 800a8c4:	2316      	movs	r3, #22
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	6023      	str	r3, [r4, #0]
 800a8ca:	e7e4      	b.n	800a896 <_raise_r+0x12>
 800a8cc:	2400      	movs	r4, #0
 800a8ce:	0028      	movs	r0, r5
 800a8d0:	601c      	str	r4, [r3, #0]
 800a8d2:	4790      	blx	r2
 800a8d4:	0020      	movs	r0, r4
 800a8d6:	e7de      	b.n	800a896 <_raise_r+0x12>

0800a8d8 <raise>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	4b03      	ldr	r3, [pc, #12]	; (800a8e8 <raise+0x10>)
 800a8dc:	0001      	movs	r1, r0
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	f7ff ffd0 	bl	800a884 <_raise_r>
 800a8e4:	bd10      	pop	{r4, pc}
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	20000064 	.word	0x20000064

0800a8ec <_kill_r>:
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	b570      	push	{r4, r5, r6, lr}
 800a8f0:	4d06      	ldr	r5, [pc, #24]	; (800a90c <_kill_r+0x20>)
 800a8f2:	0004      	movs	r4, r0
 800a8f4:	0008      	movs	r0, r1
 800a8f6:	0011      	movs	r1, r2
 800a8f8:	602b      	str	r3, [r5, #0]
 800a8fa:	f7f8 fc2c 	bl	8003156 <_kill>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	d103      	bne.n	800a90a <_kill_r+0x1e>
 800a902:	682b      	ldr	r3, [r5, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d000      	beq.n	800a90a <_kill_r+0x1e>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	200004c4 	.word	0x200004c4

0800a910 <_getpid_r>:
 800a910:	b510      	push	{r4, lr}
 800a912:	f7f8 fc1a 	bl	800314a <_getpid>
 800a916:	bd10      	pop	{r4, pc}

0800a918 <__swhatbuf_r>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	000e      	movs	r6, r1
 800a91c:	001d      	movs	r5, r3
 800a91e:	230e      	movs	r3, #14
 800a920:	5ec9      	ldrsh	r1, [r1, r3]
 800a922:	0014      	movs	r4, r2
 800a924:	b096      	sub	sp, #88	; 0x58
 800a926:	2900      	cmp	r1, #0
 800a928:	da0c      	bge.n	800a944 <__swhatbuf_r+0x2c>
 800a92a:	89b2      	ldrh	r2, [r6, #12]
 800a92c:	2380      	movs	r3, #128	; 0x80
 800a92e:	0011      	movs	r1, r2
 800a930:	4019      	ands	r1, r3
 800a932:	421a      	tst	r2, r3
 800a934:	d013      	beq.n	800a95e <__swhatbuf_r+0x46>
 800a936:	2100      	movs	r1, #0
 800a938:	3b40      	subs	r3, #64	; 0x40
 800a93a:	2000      	movs	r0, #0
 800a93c:	6029      	str	r1, [r5, #0]
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	b016      	add	sp, #88	; 0x58
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	466a      	mov	r2, sp
 800a946:	f000 f84d 	bl	800a9e4 <_fstat_r>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	dbed      	blt.n	800a92a <__swhatbuf_r+0x12>
 800a94e:	23f0      	movs	r3, #240	; 0xf0
 800a950:	9901      	ldr	r1, [sp, #4]
 800a952:	021b      	lsls	r3, r3, #8
 800a954:	4019      	ands	r1, r3
 800a956:	4b03      	ldr	r3, [pc, #12]	; (800a964 <__swhatbuf_r+0x4c>)
 800a958:	18c9      	adds	r1, r1, r3
 800a95a:	424b      	negs	r3, r1
 800a95c:	4159      	adcs	r1, r3
 800a95e:	2380      	movs	r3, #128	; 0x80
 800a960:	00db      	lsls	r3, r3, #3
 800a962:	e7ea      	b.n	800a93a <__swhatbuf_r+0x22>
 800a964:	ffffe000 	.word	0xffffe000

0800a968 <__smakebuf_r>:
 800a968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a96a:	2602      	movs	r6, #2
 800a96c:	898b      	ldrh	r3, [r1, #12]
 800a96e:	0005      	movs	r5, r0
 800a970:	000c      	movs	r4, r1
 800a972:	4233      	tst	r3, r6
 800a974:	d006      	beq.n	800a984 <__smakebuf_r+0x1c>
 800a976:	0023      	movs	r3, r4
 800a978:	3347      	adds	r3, #71	; 0x47
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	6123      	str	r3, [r4, #16]
 800a97e:	2301      	movs	r3, #1
 800a980:	6163      	str	r3, [r4, #20]
 800a982:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a984:	466a      	mov	r2, sp
 800a986:	ab01      	add	r3, sp, #4
 800a988:	f7ff ffc6 	bl	800a918 <__swhatbuf_r>
 800a98c:	9900      	ldr	r1, [sp, #0]
 800a98e:	0007      	movs	r7, r0
 800a990:	0028      	movs	r0, r5
 800a992:	f7fd fb19 	bl	8007fc8 <_malloc_r>
 800a996:	2800      	cmp	r0, #0
 800a998:	d108      	bne.n	800a9ac <__smakebuf_r+0x44>
 800a99a:	220c      	movs	r2, #12
 800a99c:	5ea3      	ldrsh	r3, [r4, r2]
 800a99e:	059a      	lsls	r2, r3, #22
 800a9a0:	d4ef      	bmi.n	800a982 <__smakebuf_r+0x1a>
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	4393      	bics	r3, r2
 800a9a6:	431e      	orrs	r6, r3
 800a9a8:	81a6      	strh	r6, [r4, #12]
 800a9aa:	e7e4      	b.n	800a976 <__smakebuf_r+0xe>
 800a9ac:	2380      	movs	r3, #128	; 0x80
 800a9ae:	89a2      	ldrh	r2, [r4, #12]
 800a9b0:	6020      	str	r0, [r4, #0]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	9b00      	ldr	r3, [sp, #0]
 800a9b8:	6120      	str	r0, [r4, #16]
 800a9ba:	6163      	str	r3, [r4, #20]
 800a9bc:	9b01      	ldr	r3, [sp, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00c      	beq.n	800a9dc <__smakebuf_r+0x74>
 800a9c2:	0028      	movs	r0, r5
 800a9c4:	230e      	movs	r3, #14
 800a9c6:	5ee1      	ldrsh	r1, [r4, r3]
 800a9c8:	f000 f81e 	bl	800aa08 <_isatty_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d005      	beq.n	800a9dc <__smakebuf_r+0x74>
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	89a2      	ldrh	r2, [r4, #12]
 800a9d4:	439a      	bics	r2, r3
 800a9d6:	3b02      	subs	r3, #2
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	81a3      	strh	r3, [r4, #12]
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	433b      	orrs	r3, r7
 800a9e0:	81a3      	strh	r3, [r4, #12]
 800a9e2:	e7ce      	b.n	800a982 <__smakebuf_r+0x1a>

0800a9e4 <_fstat_r>:
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	b570      	push	{r4, r5, r6, lr}
 800a9e8:	4d06      	ldr	r5, [pc, #24]	; (800aa04 <_fstat_r+0x20>)
 800a9ea:	0004      	movs	r4, r0
 800a9ec:	0008      	movs	r0, r1
 800a9ee:	0011      	movs	r1, r2
 800a9f0:	602b      	str	r3, [r5, #0]
 800a9f2:	f7f8 fc0f 	bl	8003214 <_fstat>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	d103      	bne.n	800aa02 <_fstat_r+0x1e>
 800a9fa:	682b      	ldr	r3, [r5, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d000      	beq.n	800aa02 <_fstat_r+0x1e>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	200004c4 	.word	0x200004c4

0800aa08 <_isatty_r>:
 800aa08:	2300      	movs	r3, #0
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	4d06      	ldr	r5, [pc, #24]	; (800aa28 <_isatty_r+0x20>)
 800aa0e:	0004      	movs	r4, r0
 800aa10:	0008      	movs	r0, r1
 800aa12:	602b      	str	r3, [r5, #0]
 800aa14:	f7f8 fc0c 	bl	8003230 <_isatty>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d103      	bne.n	800aa24 <_isatty_r+0x1c>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d000      	beq.n	800aa24 <_isatty_r+0x1c>
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	bd70      	pop	{r4, r5, r6, pc}
 800aa26:	46c0      	nop			; (mov r8, r8)
 800aa28:	200004c4 	.word	0x200004c4

0800aa2c <_init>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	46c0      	nop			; (mov r8, r8)
 800aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa32:	bc08      	pop	{r3}
 800aa34:	469e      	mov	lr, r3
 800aa36:	4770      	bx	lr

0800aa38 <_fini>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	46c0      	nop			; (mov r8, r8)
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr
